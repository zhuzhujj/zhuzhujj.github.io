{
    "version": "https://jsonfeed.org/version/1",
    "title": "zhuZhu • All posts by \"源码\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/08/18/diff%E7%AE%97%E6%B3%95/",
            "url": "http://example.com/2023/08/18/diff%E7%AE%97%E6%B3%95/",
            "title": "diff算法",
            "date_published": "2023-08-18T04:47:09.000Z",
            "content_html": "<h1 id=\"简单实现diff方法\"><a href=\"#简单实现diff方法\" class=\"headerlink\" title=\"简单实现diff方法\"></a>简单实现diff方法</h1><a id=\"more\"></a>\n\n<h3 id=\"一、是什么diff算法\"><a href=\"#一、是什么diff算法\" class=\"headerlink\" title=\"一、是什么diff算法\"></a>一、是什么diff算法</h3><p>先来一句概念：</p>\n<blockquote>\n<p>diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方，最后用patch记录的消息去局部更新Dom。</p>\n</blockquote>\n<p>换句人话</p>\n<blockquote>\n<p>diff的过程就是调用名为patch的函数，比较新旧节点，一边比较一边给真实的DOM打补丁</p>\n</blockquote>\n<p><strong>其有两个特点：</strong></p>\n<ul>\n<li>比较只会在同层级进行, 不会跨层级比较</li>\n<li>在diff比较的过程中，循环从两边向中间比较</li>\n</ul>\n<h3 id=\"Diff算法的步骤：\"><a href=\"#Diff算法的步骤：\" class=\"headerlink\" title=\"Diff算法的步骤：\"></a>Diff算法的步骤：</h3><ul>\n<li>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文 档当中</li>\n<li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较(diff)，记录两棵树差异</li>\n<li>把第二棵树所记录的差异应用到第一棵树所构建的真正的DOM树上(patch)，视图就更新了</li>\n</ul>\n<h3 id=\"二、比较方式\"><a href=\"#二、比较方式\" class=\"headerlink\" title=\"二、比较方式\"></a>二、比较方式</h3><p>diff整体策略为：深度优先，同层比较</p>\n<h3 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1.数据\"></a>1.数据</h4><blockquote>\n<p>vDom用于模拟更新前dom， vDom1用于模拟更新后dom</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// dom类</span><br><span class=\"line\">class Element &#123;</span><br><span class=\"line\">    constructor(type,props,children)&#123;</span><br><span class=\"line\">        this.type = type</span><br><span class=\"line\">        this.props = props</span><br><span class=\"line\">        this.children = children</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">function createElement(type,props,children)&#123;</span><br><span class=\"line\">    return new Element(type,props,children)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 虚拟dom</span><br><span class=\"line\">const vDom = createElement(&#x27;ul&#x27;, &#123;</span><br><span class=\"line\">    class:&#x27;list&#x27;,</span><br><span class=\"line\">    style: &#x27;width: 300px; height: 300px; background-color: orange&#x27;</span><br><span class=\"line\">   &#125;, </span><br><span class=\"line\">   [</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 0</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第一个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 1</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第2个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第3个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),        </span><br><span class=\"line\">   ])</span><br><span class=\"line\">// 用于寻找补丁的dom</span><br><span class=\"line\">const vDom1 = createElement(&#x27;ul&#x27;, &#123;</span><br><span class=\"line\">    class:&#x27;list-wrap&#x27;,</span><br><span class=\"line\">    style: &#x27;width: 300px; height: 300px; background-color: orange&#x27;</span><br><span class=\"line\">   &#125;, </span><br><span class=\"line\">   [</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 0</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text1&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;特殊列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 1</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;title&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第2个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;div&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第3个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),        </span><br><span class=\"line\">   ])</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-渲染器\"><a href=\"#2-渲染器\" class=\"headerlink\" title=\"2.渲染器\"></a>2.渲染器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// render渲染器</span><br><span class=\"line\">    let render = (vsnode,el)=&gt;&#123;</span><br><span class=\"line\">        // 创建最外层dom元素</span><br><span class=\"line\">        const vel = document.createElement(vsnode.type)</span><br><span class=\"line\">        for(key in vsnode.props)&#123;</span><br><span class=\"line\">            if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">                vel.addEventListener(</span><br><span class=\"line\">                    key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;else if(key == &#x27;class&#x27;) &#123;//添加类名</span><br><span class=\"line\">                vel.className=vsnode.props[key]</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                // vel.</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 如果children是字符串 则创建节点追加到vel</span><br><span class=\"line\">        if(typeof vsnode.children == &#x27;string&#x27;)&#123;</span><br><span class=\"line\">            const text = document.createTextNode(vsnode.children)</span><br><span class=\"line\">            vel.appendChild(text)</span><br><span class=\"line\">            // 如果是数组 递归</span><br><span class=\"line\">        &#125;else if(Array.isArray(vsnode.children))&#123;</span><br><span class=\"line\">            vsnode.children.forEach(chil =&gt; &#123;</span><br><span class=\"line\">                render(chil,vel)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        el.appendChild(vel)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-diff函数\"><a href=\"#3-diff函数\" class=\"headerlink\" title=\"3.diff函数\"></a>3.diff函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// diff</span><br><span class=\"line\">let types = &#123;ATTR:&#x27;ATTE&#x27;,TEXT:&#x27;TEXT&#x27;,REPLACE:&#x27;REPLACE&#x27;,REMOVE:&#x27;REMOVE&#x27;&#125;//模拟补丁类型</span><br><span class=\"line\">// 用于寻找补丁</span><br><span class=\"line\">let patches = &#123;&#125; //找到的补丁</span><br><span class=\"line\">let vnIndex = 0</span><br><span class=\"line\">const domDiff = (oldVDom, newVDom)=&gt;&#123;</span><br><span class=\"line\">    let index = 0</span><br><span class=\"line\">    vNodeWalk(oldVDom, newVDom,index)//寻找节点的补丁</span><br><span class=\"line\">    return patches</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const vNodeWalk = (oldNode, newNode, index)=&gt;&#123;</span><br><span class=\"line\">    let vnPatch = [] //本节点的补丁</span><br><span class=\"line\">    if(!newNode)&#123;//判断newnode是否被删除</span><br><span class=\"line\">        vnPatch.push(&#123;</span><br><span class=\"line\">            type: types.REMOVE,</span><br><span class=\"line\">            index:index</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;else if (typeof oldNode === &#x27;string&#x27; &amp;&amp; typeof newNode === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">        if(oldNode != newNode)&#123;//判断文本节点是否改变</span><br><span class=\"line\">            vnPatch.push(&#123;</span><br><span class=\"line\">                type:types.TEXT,</span><br><span class=\"line\">                text:newNode</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;else if (oldNode.type === newNode.type) &#123;</span><br><span class=\"line\">        const attrPatch = attrsWalk(oldNode.props, newNode.props)//用于判断两个节点的属性</span><br><span class=\"line\">        if(Object.keys(attrPatch).length&gt;0)&#123;</span><br><span class=\"line\">            vnPatch.push(&#123;</span><br><span class=\"line\">                type:types.ATTR,</span><br><span class=\"line\">                attrs: attrPatch</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 寻找子节点补丁</span><br><span class=\"line\">    childWalk(oldNode.children, newNode.children,vnIndex)</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        vnPatch.push(&#123;</span><br><span class=\"line\">            type: types.REPLACE,</span><br><span class=\"line\">            newNode</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(vnPatch.length &gt; 0)&#123;</span><br><span class=\"line\">        patches[index] = vnPatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//用于判断两个节点的属性</span><br><span class=\"line\">const attrsWalk = (oldAttrs, newAttrs)=&gt;&#123;</span><br><span class=\"line\">    let attrPatch = &#123;&#125;;</span><br><span class=\"line\">    // 修改属性</span><br><span class=\"line\">    for (key in oldAttrs) &#123;</span><br><span class=\"line\">        if(oldAttrs[key] != newAttrs[key])&#123;</span><br><span class=\"line\">            attrPatch[key] = newAttrs[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 新增属性</span><br><span class=\"line\">    for(key in newAttrs)&#123;</span><br><span class=\"line\">        if(!oldAttrs.hasOwnProperty(key))&#123;</span><br><span class=\"line\">            attrPatch[key] = newAttrs[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return attrPatch</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// // 寻找子节点补丁</span><br><span class=\"line\">const childWalk = (oldChildren, newChildren)=&gt;&#123;</span><br><span class=\"line\">    oldChildren.map((c,idx)=&gt;&#123;</span><br><span class=\"line\">        vNodeWalk(c, newChildren[idx], ++vnIndex)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">domDiff(vDom,vDom1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-打补丁\"><a href=\"#4-打补丁\" class=\"headerlink\" title=\"4.打补丁\"></a>4.打补丁</h4>",
            "tags": [
                "vue3"
            ]
        },
        {
            "id": "http://example.com/2023/08/16/%E8%99%9A%E6%8B%9Fdom%E5%8F%8Arender%E6%B8%B2%E6%9F%93%E5%99%A8/",
            "url": "http://example.com/2023/08/16/%E8%99%9A%E6%8B%9Fdom%E5%8F%8Arender%E6%B8%B2%E6%9F%93%E5%99%A8/",
            "title": "虚拟dom及render渲染器",
            "date_published": "2023-08-16T11:36:07.000Z",
            "content_html": "<h1 id=\"简单手写虚拟dom及渲染器\"><a href=\"#简单手写虚拟dom及渲染器\" class=\"headerlink\" title=\"简单手写虚拟dom及渲染器\"></a>简单手写虚拟dom及渲染器</h1><a id=\"more\"></a>\n\n<h2 id=\"1-虚拟dom\"><a href=\"#1-虚拟dom\" class=\"headerlink\" title=\"1.虚拟dom\"></a>1.虚拟dom</h2><blockquote>\n<p>虚拟DOM就是普通的js对象。是一个用来描述真实dom结构的js对象，因为它不是真实的dom，所以才叫做虚拟dom。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let dom = &#123;</span><br><span class=\"line\">    tag: &#x27;div&#x27;,</span><br><span class=\"line\">    props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">    children: &#x27;内容&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-render渲染器\"><a href=\"#2-render渲染器\" class=\"headerlink\" title=\"2.render渲染器\"></a>2.render渲染器</h2><blockquote>\n<p>render就是一个函数，用于将虚拟dom转为真实的dom</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function renderer (vnode, container) &#123; // vnode为要传入的虚拟dom对象， container为要挂载到的节点</span><br><span class=\"line\">    // 创建最外层元素</span><br><span class=\"line\">    const el = document.createElement(vnode.tag)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 props</span><br><span class=\"line\">    for(key in vnode.props)&#123;</span><br><span class=\"line\">        if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">             el.addEventListener(</span><br><span class=\"line\">                  key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 children</span><br><span class=\"line\">    if(typeof vnode.children === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        const text = document.createTextElement(vnode.children)</span><br><span class=\"line\">        el.appendChild(text)</span><br><span class=\"line\">    &#125;else if(Array.isArray(vnode.children)) &#123;</span><br><span class=\"line\">        renderer(vnode.children, el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 渲染到要挂载的节点上</span><br><span class=\"line\">    container.appendChild(el)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-组件的渲染\"><a href=\"#3-组件的渲染\" class=\"headerlink\" title=\"3.组件的渲染\"></a>3.组件的渲染</h2><blockquote>\n<p>组件就是一组 DOM 元素的封装，这组 DOM 元素就是组件要渲染的内容，因此我们可以定义一个函数来代表组件，而函数的返回值就代表组件要渲染的内容</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方法形式</span><br><span class=\"line\">function MyComponent () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        tag: &#x27;div&#x27;,</span><br><span class=\"line\">        props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">        children: &#x27;内容&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 对象形式</span><br><span class=\"line\">let MyComponent = &#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return:&#123;</span><br><span class=\"line\">            tag: &#x27;div&#x27;,</span><br><span class=\"line\">            props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">            children: &#x27;内容&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">///</span><br><span class=\"line\">const vnode = &#123;</span><br><span class=\"line\">    tag: MyComponent</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>现在需要renderer渲染的有两部分，一个属组件 一个是虚拟dom对象 所以需要判断， 若 vnode.tag 类型为string 则是标签，若为object，则是组件 </p>\n</blockquote>\n<h3 id=\"分别创建渲染组件和标签的方法\"><a href=\"#分别创建渲染组件和标签的方法\" class=\"headerlink\" title=\"分别创建渲染组件和标签的方法\"></a>分别创建渲染组件和标签的方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 渲染标签的函数</span><br><span class=\"line\">function mountElement(vnode,container)&#123;</span><br><span class=\"line\">        // 创建最外层元素</span><br><span class=\"line\">    const el = document.createElement(vnode.tag)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 props</span><br><span class=\"line\">    for(key in vnode.props)&#123;</span><br><span class=\"line\">        if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">             el.addEventListener(</span><br><span class=\"line\">                  key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 children</span><br><span class=\"line\">    if(typeof vnode.children === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        const text = document.createTextElement(vnode.children)</span><br><span class=\"line\">        el.appendChild(text)</span><br><span class=\"line\">    &#125;else if(Array.isArray(vnode.children)) &#123;</span><br><span class=\"line\">        renderer(vnode.children, el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 渲染到要挂载的节点上</span><br><span class=\"line\">    container.appendChild(el)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 渲染组件的函数</span><br><span class=\"line\">function mountComponent(vnode,container)&#123;</span><br><span class=\"line\">    const subTree = vnode.tag()</span><br><span class=\"line\">    renderer(subTree,container)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 渲染器</span><br><span class=\"line\">function renderer(vnode,container)&#123;</span><br><span class=\"line\">    if(typeof vnode.tag === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        mountElement(vnode,container)</span><br><span class=\"line\">    &#125;else if(vnode.tag === &#x27;function&#x27;) &#123;</span><br><span class=\"line\">        mountComponent(vnode,container)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"当组件为对象格式\"><a href=\"#当组件为对象格式\" class=\"headerlink\" title=\"当组件为对象格式\"></a>当组件为对象格式</h3><blockquote>\n<p>对渲染组件的函数进行修改</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 渲染组件的函数</span><br><span class=\"line\">function mountComponent(vnode,container)&#123;</span><br><span class=\"line\">    const subTree = vnode.tag.render()</span><br><span class=\"line\">    renderer(subTree,container)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对渲染器进行修改</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function renderer(vnode,container)&#123;</span><br><span class=\"line\">    if(typeof vnode.tag === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        mountElement(vnode,container)</span><br><span class=\"line\">    &#125;else if(vnode.tag === &#x27;object&#x27;) &#123;</span><br><span class=\"line\">        mountComponent(vnode,container)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "vue3"
            ]
        }
    ]
}