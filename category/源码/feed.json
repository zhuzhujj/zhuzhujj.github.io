{
    "version": "https://jsonfeed.org/version/1",
    "title": "zhuZhu • All posts by \"源码\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/08/16/%E8%99%9A%E6%8B%9Fdom%E5%8F%8Arender%E6%B8%B2%E6%9F%93%E5%99%A8/",
            "url": "http://example.com/2023/08/16/%E8%99%9A%E6%8B%9Fdom%E5%8F%8Arender%E6%B8%B2%E6%9F%93%E5%99%A8/",
            "title": "虚拟dom及render渲染器",
            "date_published": "2023-08-16T11:36:07.000Z",
            "content_html": "<h1 id=\"简单手写虚拟dom及渲染器\"><a href=\"#简单手写虚拟dom及渲染器\" class=\"headerlink\" title=\"简单手写虚拟dom及渲染器\"></a>简单手写虚拟dom及渲染器</h1><a id=\"more\"></a>\n\n<h2 id=\"1-虚拟dom\"><a href=\"#1-虚拟dom\" class=\"headerlink\" title=\"1.虚拟dom\"></a>1.虚拟dom</h2><blockquote>\n<p>虚拟DOM就是普通的js对象。是一个用来描述真实dom结构的js对象，因为它不是真实的dom，所以才叫做虚拟dom。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let dom = &#123;</span><br><span class=\"line\">    tag: &#x27;div&#x27;,</span><br><span class=\"line\">    props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">    children: &#x27;内容&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-render渲染器\"><a href=\"#2-render渲染器\" class=\"headerlink\" title=\"2.render渲染器\"></a>2.render渲染器</h2><blockquote>\n<p>render就是一个函数，用于将虚拟dom转为真实的dom</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function renderer (vnode, container) &#123; // vnode为要传入的虚拟dom对象， container为要挂载到的节点</span><br><span class=\"line\">    // 创建最外层元素</span><br><span class=\"line\">    const el = document.createElement(vnode.tag)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 props</span><br><span class=\"line\">    for(key in vnode.props)&#123;</span><br><span class=\"line\">        if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">             el.addEventListener(</span><br><span class=\"line\">                  key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 children</span><br><span class=\"line\">    if(typeof vnode.children === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        const text = document.createTextElement(vnode.children)</span><br><span class=\"line\">        el.appendChild(text)</span><br><span class=\"line\">    &#125;else if(Array.isArray(vnode.children)) &#123;</span><br><span class=\"line\">        renderer(vnode.children, el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 渲染到要挂载的节点上</span><br><span class=\"line\">    container.appendChild(el)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-组件的渲染\"><a href=\"#3-组件的渲染\" class=\"headerlink\" title=\"3.组件的渲染\"></a>3.组件的渲染</h2><blockquote>\n<p>组件就是一组 DOM 元素的封装，这组 DOM 元素就是组件要渲染的内容，因此我们可以定义一个函数来代表组件，而函数的返回值就代表组件要渲染的内容</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方法形式</span><br><span class=\"line\">function MyComponent () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        tag: &#x27;div&#x27;,</span><br><span class=\"line\">        props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">        children: &#x27;内容&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 对象形式</span><br><span class=\"line\">let MyComponent = &#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return:&#123;</span><br><span class=\"line\">            tag: &#x27;div&#x27;,</span><br><span class=\"line\">            props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">            children: &#x27;内容&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">///</span><br><span class=\"line\">const vnode = &#123;</span><br><span class=\"line\">    tag: MyComponent</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>现在需要renderer渲染的有两部分，一个属组件 一个是虚拟dom对象 所以需要判断， 若 vnode.tag 类型为string 则是标签，若为object，则是组件 </p>\n</blockquote>\n<h3 id=\"分别创建渲染组件和标签的方法\"><a href=\"#分别创建渲染组件和标签的方法\" class=\"headerlink\" title=\"分别创建渲染组件和标签的方法\"></a>分别创建渲染组件和标签的方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 渲染标签的函数</span><br><span class=\"line\">function mountElement(vnode,container)&#123;</span><br><span class=\"line\">        // 创建最外层元素</span><br><span class=\"line\">    const el = document.createElement(vnode.tag)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 props</span><br><span class=\"line\">    for(key in vnode.props)&#123;</span><br><span class=\"line\">        if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">             el.addEventListener(</span><br><span class=\"line\">                  key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 children</span><br><span class=\"line\">    if(typeof vnode.children === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        const text = document.createTextElement(vnode.children)</span><br><span class=\"line\">        el.appendChild(text)</span><br><span class=\"line\">    &#125;else if(Array.isArray(vnode.children)) &#123;</span><br><span class=\"line\">        renderer(vnode.children, el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 渲染到要挂载的节点上</span><br><span class=\"line\">    container.appendChild(el)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 渲染组件的函数</span><br><span class=\"line\">function mountComponent(vnode,container)&#123;</span><br><span class=\"line\">    const subTree = vnode.tag()</span><br><span class=\"line\">    renderer(subTree,container)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 渲染器</span><br><span class=\"line\">function renderer(vnode,container)&#123;</span><br><span class=\"line\">    if(typeof vnode.tag === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        mountElement(vnode,container)</span><br><span class=\"line\">    &#125;else if(vnode.tag === &#x27;function&#x27;) &#123;</span><br><span class=\"line\">        mountComponent(vnode,container)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"当组件为对象格式\"><a href=\"#当组件为对象格式\" class=\"headerlink\" title=\"当组件为对象格式\"></a>当组件为对象格式</h3><blockquote>\n<p>对渲染组件的函数进行修改</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 渲染组件的函数</span><br><span class=\"line\">function mountComponent(vnode,container)&#123;</span><br><span class=\"line\">    const subTree = vnode.tag.render()</span><br><span class=\"line\">    renderer(subTree,container)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对渲染器进行修改</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function renderer(vnode,container)&#123;</span><br><span class=\"line\">    if(typeof vnode.tag === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        mountElement(vnode,container)</span><br><span class=\"line\">    &#125;else if(vnode.tag === &#x27;object&#x27;) &#123;</span><br><span class=\"line\">        mountComponent(vnode,container)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "vue3"
            ]
        }
    ]
}