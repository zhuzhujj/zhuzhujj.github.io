{
    "version": "https://jsonfeed.org/version/1",
    "title": "m博客 • All posts by \"面试题\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/08/14/jsthis%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2023/08/14/jsthis%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/",
            "title": "jsthis指向问题",
            "date_published": "2023-08-14T02:56:55.000Z",
            "content_html": "<h1 id=\"js–this指向问题\"><a href=\"#js–this指向问题\" class=\"headerlink\" title=\"js–this指向问题\"></a>js–this指向问题</h1><a id=\"more\"></a>\n\n<h2 id=\"1-普通\"><a href=\"#1-普通\" class=\"headerlink\" title=\"1.普通\"></a>1.普通</h2><blockquote>\n<p>this有三种指向 ，原则为谁调用指向谁。</p>\n</blockquote>\n<h3 id=\"1-普通函数\"><a href=\"#1-普通函数\" class=\"headerlink\" title=\"1.普通函数\"></a>1.普通函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = &#x27;window&#x27;</span><br><span class=\"line\">function sayName () &#123;</span><br><span class=\"line\">    console.log(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayName()// 指向window  打印window</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-new构造函数\"><a href=\"#2-new构造函数\" class=\"headerlink\" title=\"2.new构造函数\"></a>2.new构造函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = new Object()</span><br><span class=\"line\">a.name = &#x27;new&#x27;</span><br><span class=\"line\">a.say = sayName</span><br><span class=\"line\">console.log(a.say())// 打印new  this指向实例a</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-对象方法\"><a href=\"#3-对象方法\" class=\"headerlink\" title=\"3.对象方法\"></a>3.对象方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const people = &#123;</span><br><span class=\"line\">    name: &#x27;jake&#x27;,</span><br><span class=\"line\">    age: 18,</span><br><span class=\"line\">    say : sayName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">people.say() // this指向people 打印jake</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-箭头函数\"><a href=\"#2-箭头函数\" class=\"headerlink\" title=\"2.箭头函数\"></a>2.箭头函数</h2><blockquote>\n<p>箭头函数中没有this, 但是根据作用域链 会向上找。定义在哪里 就在那里的上一层找</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = &#x27;window&#x27;</span><br><span class=\"line\">const  sayName = ()=&gt;&#123;</span><br><span class=\"line\">    conlose.log(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayName() // 指向window, 打印 window</span><br><span class=\"line\"></span><br><span class=\"line\">const people = &#123;</span><br><span class=\"line\">    name: &#x27;jake&#x27;,</span><br><span class=\"line\">    age: 18,</span><br><span class=\"line\">    say : sayName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">people.say // 打印window</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/08/13/js%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/",
            "url": "http://example.com/2023/08/13/js%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/",
            "title": "js数组方法",
            "date_published": "2023-08-13T12:53:27.000Z",
            "content_html": "<h1 id=\"js–数组方法\"><a href=\"#js–数组方法\" class=\"headerlink\" title=\"js–数组方法\"></a>js–数组方法</h1><a id=\"more\"></a>\n\n<blockquote>\n<p>数组常见方法：操作方法 排序方法 转换方法 迭代方法，</p>\n</blockquote>\n<h2 id=\"1-操作方法\"><a href=\"#1-操作方法\" class=\"headerlink\" title=\"1.操作方法\"></a>1.操作方法</h2><blockquote>\n<p>增  删  改  查</p>\n</blockquote>\n<h3 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"#增\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjJUU1JUEyJTlF\">#</span>增</h3><p>下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响</p>\n<ul>\n<li>push()</li>\n<li>unshift()</li>\n<li>splice()</li>\n<li>concat()</li>\n</ul>\n<h4 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"#push()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjcHVzaA==\">#</span>push()</h4><p><code>push()</code>方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = []; <span class=\"comment\">// 创建一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = colors.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>); <span class=\"comment\">// 推入两项</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"#unshift()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjdW5zaGlmdA==\">#</span>unshift()</h4><p>unshift()在数组开头添加任意多个值，然后返回新的数组长度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(); <span class=\"comment\">// 创建一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = colors.<span class=\"title function_\">unshift</span>(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>); <span class=\"comment\">// 从数组开头推入两项</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(count); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"#splice\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc3BsaWNl\">#</span>splice</h4><p>传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> removed = colors.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors) <span class=\"comment\">// red,yellow,orange,green,blue</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(removed) <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"#concat()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjY29uY2F0\">#</span>concat()</h4><p>首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> colors2 = colors.<span class=\"title function_\">concat</span>(<span class=\"string\">&quot;yellow&quot;</span>, [<span class=\"string\">&quot;black&quot;</span>, <span class=\"string\">&quot;brown&quot;</span>]);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors); <span class=\"comment\">// [&quot;red&quot;, &quot;green&quot;,&quot;blue&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors2); <span class=\"comment\">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"#删\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjJUU1JTg4JUEw\">#</span>删</h3><p>下面三种都会影响原数组，最后一项不影响原数组：</p>\n<ul>\n<li>pop()</li>\n<li>shift()</li>\n<li>splice()</li>\n<li>slice()</li>\n</ul>\n<h4 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"#pop()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjcG9w\">#</span>pop()</h4><p><code>pop()</code> 方法用于删除数组的最后一项，同时减少数组的<code>length</code> 值，返回被删除的项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = colors.<span class=\"title function_\">pop</span>(); <span class=\"comment\">// 取得最后一项</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item) <span class=\"comment\">// green</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors.<span class=\"property\">length</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"#shift()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc2hpZnQ=\">#</span>shift()</h4><p><code>shift()</code>方法用于删除数组的第一项，同时减少数组的<code>length</code> 值，返回被删除的项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = colors.<span class=\"title function_\">shift</span>(); <span class=\"comment\">// 取得第一项</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item) <span class=\"comment\">// red</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors.<span class=\"property\">length</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"splice-1\"><a href=\"#splice-1\" class=\"headerlink\" title=\"#splice()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc3BsaWNlLTI=\">#</span>splice()</h4><p>传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> removed = colors.<span class=\"title function_\">splice</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>); <span class=\"comment\">// 删除第一项</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors); <span class=\"comment\">// green,blue</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(removed); <span class=\"comment\">// red，只有一个元素的数组</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"#slice()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc2xpY2U=\">#</span>slice()</h3><p>slice() 用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;purple&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> colors2 = colors.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> colors3 = colors.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors)   <span class=\"comment\">// red,green,blue,yellow,purple</span></span><br><span class=\"line\">concole.<span class=\"title function_\">log</span>(colors2); <span class=\"comment\">// green,blue,yellow,purple</span></span><br><span class=\"line\">concole.<span class=\"title function_\">log</span>(colors3); <span class=\"comment\">// green,blue,yellow</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"#改\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjJUU2JTk0JUI5\">#</span>改</h4><p>即修改原来数组的内容，常用<code>splice</code></p>\n<h4 id=\"splice-2\"><a href=\"#splice-2\" class=\"headerlink\" title=\"#splice()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc3BsaWNlLTM=\">#</span>splice()</h4><p>传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> removed = colors.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;purple&quot;</span>); <span class=\"comment\">// 插入两个值，删除一个元素</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors); <span class=\"comment\">// red,red,purple,blue</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(removed); <span class=\"comment\">// green，只有一个元素的数组</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"#查\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjJUU2JTlGJUE1\">#</span>查</h4><p>即查找元素，返回元素坐标或者元素值</p>\n<ul>\n<li>indexOf()</li>\n<li>includes()</li>\n<li>find()</li>\n</ul>\n<h4 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"#indexOf()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjaW5kZXhvZg==\">#</span>indexOf()</h4><p>返回要查找的元素在数组中的位置，如果没找到则返回 -1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">numbers.<span class=\"title function_\">indexOf</span>(<span class=\"number\">4</span>) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"#includes()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjaW5jbHVkZXM=\">#</span>includes()</h4><p>返回要查找的元素在数组中的位置，找到返回<code>true</code>，否则<code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">numbers.<span class=\"title function_\">includes</span>(<span class=\"number\">4</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"#find()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjZmluZA==\">#</span>find()</h4><p>返回第一个匹配的元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> people = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;Matt&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">27</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;Nicholas&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">29</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">people.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">element, index, array</span>) =&gt;</span> element.<span class=\"property\">age</span> &lt; <span class=\"number\">28</span>) <span class=\"comment\">// // &#123;name: &quot;Matt&quot;, age: 27&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-排序方法\"><a href=\"#2-排序方法\" class=\"headerlink\" title=\"2.排序方法\"></a>2.排序方法</h2><p>数组有两个方法可以用来对元素重新排序：</p>\n<ul>\n<li>reverse()</li>\n<li>sort()</li>\n</ul>\n<h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"#reverse()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjcmV2ZXJzZQ==\">#</span>reverse()</h3><p>顾名思义，将数组元素方向反转</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">values.<span class=\"title function_\">reverse</span>();</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(values); <span class=\"comment\">// 5,4,3,2,1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"#sort()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc29ydA==\">#</span>sort()</h3><p>sort()方法接受一个比较函数，用于判断哪个值应该排在前面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">compare</span>(<span class=\"params\">value1, value2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value1 &lt; value2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value1 &gt; value2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\">values.<span class=\"title function_\">sort</span>(compare);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(values); <span class=\"comment\">// 0,1,5,10,15</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-转换方法\"><a href=\"#3-转换方法\" class=\"headerlink\" title=\"3.转换方法\"></a>3.转换方法</h2><h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h3><p>join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(colors.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;,&quot;</span>)); <span class=\"comment\">// red,green,blue</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(colors.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;||&quot;</span>)); <span class=\"comment\">// red||green||blue</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-迭代方法\"><a href=\"#4-迭代方法\" class=\"headerlink\" title=\"4.迭代方法\"></a>4.迭代方法</h2><p>常用来迭代数组的方法（都不改变原数组）有如下：</p>\n<ul>\n<li>some()</li>\n<li>every()</li>\n<li>forEach()</li>\n<li>filter()</li>\n<li>map()</li>\n</ul>\n<h3 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"#some()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc29tZQ==\">#</span>some()</h3><p>对数组每一项都运行传入的测试函数，如果至少有1个元素返回 true ，则这个方法返回 true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> someResult = numbers.<span class=\"title function_\">some</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> item &gt; <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(someResult) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"#every()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjZXZlcnk=\">#</span>every()</h3><p>对数组每一项都运行传入的测试函数，如果所有元素都返回 true ，则这个方法返回 true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> everyResult = numbers.<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> item &gt; <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(everyResult) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"#forEach()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjZm9yZWFjaA==\">#</span>forEach()</h3><p>对数组每一项都运行传入的函数，没有返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">numbers.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行某些操作</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"#filter()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjZmlsdGVy\">#</span>filter()</h3><p>对数组每一项都运行传入的函数，函数返回 <code>true</code> 的项会组成数组之后返回</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> filterResult = numbers.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> item &gt; <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(filterResult); <span class=\"comment\">// 3,4,5,4,3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"#map()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjbWFw\">#</span>map()</h3><p>对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> mapResult = numbers.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> item * <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(mapResult) <span class=\"comment\">// 2,4,6,8,10,8,6,4,2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-数组扁平化\"><a href=\"#5-数组扁平化\" class=\"headerlink\" title=\"5.数组扁平化\"></a>5.数组扁平化</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1, [2, [3, 4]]];</span><br><span class=\"line\">function flatten(arr) &#123;</span><br><span class=\"line\">  return arr.flat(Infinity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(flatten(arr)); //  [1, 2, 3, 4，5]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-数组求和\"><a href=\"#6-数组求和\" class=\"headerlink\" title=\"6.数组求和\"></a>6.数组求和</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev,cur,index,arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,init)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>arr: 表示将要原数组</li>\n<li>prev:表示上一次调用回调时的返回值，或者初始值init</li>\n<li>cur:表示当前正在处理的数组元素</li>\n<li>index:表示正在处理的数组元素的索引，若提供init值，则索引为0，否则索引为1</li>\n<li>init: 表示初始值</li>\n</ul>\n<p>案例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制代码<span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre +cur</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/08/12/js%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE/",
            "url": "http://example.com/2023/08/12/js%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE/",
            "title": "js原型原型链",
            "date_published": "2023-08-12T11:38:23.000Z",
            "content_html": "<h1 id=\"js–原型-原型链\"><a href=\"#js–原型-原型链\" class=\"headerlink\" title=\"js–原型 原型链\"></a>js–原型 原型链</h1><a id=\"more\"></a>\n\n<blockquote>\n<p>每个函数都有一个prototype, 每个对象都有一个-proto- 指向其原型对象prototype</p>\n</blockquote>\n<h3 id=\"prototype：\"><a href=\"#prototype：\" class=\"headerlink\" title=\"prototype：\"></a>prototype：</h3><blockquote>\n<p>每个函数都有prototype属性 称之为原型， 因为这个属性的值是个对象，也成为原型对象</p>\n</blockquote>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><blockquote>\n<p>存放一些属性和方法</p>\n<p>实现继承</p>\n</blockquote>\n<h3 id=\"proto-：\"><a href=\"#proto-：\" class=\"headerlink\" title=\"-proto-_：\"></a>-proto-_：</h3><blockquote>\n<p>每个对象对象都有-proto-属性</p>\n</blockquote>\n<h4 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4><blockquote>\n<p>这个属性指向它的原型对象</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = new Array(1,2,3)</span><br><span class=\"line\">arr.__proto__ === Array.prototype // true</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/08/12/js%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "http://example.com/2023/08/12/js%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "js判断数据类型",
            "date_published": "2023-08-12T11:29:14.000Z",
            "content_html": "<h1 id=\"js–typeof与instanceof\"><a href=\"#js–typeof与instanceof\" class=\"headerlink\" title=\"js–typeof与instanceof\"></a>js–typeof与instanceof</h1><a id=\"more\"></a>\n\n<h2 id=\"js数据类型\"><a href=\"#js数据类型\" class=\"headerlink\" title=\"js数据类型\"></a>js数据类型</h2><ol>\n<li><code>undefined</code></li>\n<li><code>Null</code></li>\n<li><code>Boolean</code></li>\n<li><code>Number</code></li>\n<li><code>String</code></li>\n<li><code>Symbol</code></li>\n<li>引用数据类型</li>\n</ol>\n<h2 id=\"typeof主要用于判断基本数据类型\"><a href=\"#typeof主要用于判断基本数据类型\" class=\"headerlink\" title=\"typeof主要用于判断基本数据类型\"></a>typeof主要用于判断基本数据类型</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Numbers </span><br><span class=\"line\">typeof 37 === &#x27;number&#x27;;</span><br><span class=\"line\">// Strings </span><br><span class=\"line\">typeof &quot;&quot; === &#x27;string&#x27;;</span><br><span class=\"line\">// Booleans </span><br><span class=\"line\">typeof true === &#x27;boolean&#x27;;</span><br><span class=\"line\">// Symbols </span><br><span class=\"line\">typeof Symbol(&#x27;foo&#x27;) === &#x27;symbol&#x27;;</span><br><span class=\"line\">// Undefined </span><br><span class=\"line\">typeof undefined === &#x27;undefined&#x27;; </span><br><span class=\"line\">typeof blabla === &#x27;undefined&#x27;; // 一个未定义的变量,或者一个定义了却未赋初值的变量</span><br><span class=\"line\">// Objects </span><br><span class=\"line\">typeof &#123;a:1&#125; === &#x27;object&#x27;;</span><br><span class=\"line\">type [1,2,3] = &#x27;object&#x27;</span><br><span class=\"line\">------------------------&#x27;下面是不是有点奇怪？&#x27;--------------------------</span><br><span class=\"line\">// 函数</span><br><span class=\"line\">typeof function()&#123;&#125; === &#x27;function&#x27;;</span><br><span class=\"line\">// Null</span><br><span class=\"line\">typeof null === &#x27;object&#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"instanceof判断该对象是谁的实例\"><a href=\"#instanceof判断该对象是谁的实例\" class=\"headerlink\" title=\"instanceof判断该对象是谁的实例\"></a>instanceof判断该对象是谁的实例</h2><blockquote>\n<p><code>instanceof</code>的判断就是根据原型链进行搜寻，在对象obj1的原型链上如果存在另一个对象obj2的原型属性，那么表达式（<code>obj1 instanceof obj2</code>）返回值为true；否则返回false。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Parent()&#123;&#125;;</span><br><span class=\"line\">function Child()&#123;&#125;;</span><br><span class=\"line\">function Other()&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype = new Parent();</span><br><span class=\"line\">let child = new Child();</span><br><span class=\"line\"></span><br><span class=\"line\">child instanceof Child; // true</span><br><span class=\"line\">child instanceof Parent; // true</span><br><span class=\"line\">child instanceof Object; // true</span><br><span class=\"line\">child instanceof Other; // false</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"typeof与instanceof都是判断数据类型的方法，区别如下：\"><a href=\"#typeof与instanceof都是判断数据类型的方法，区别如下：\" class=\"headerlink\" title=\"typeof与instanceof都是判断数据类型的方法，区别如下：\"></a>typeof与instanceof都是判断数据类型的方法，区别如下：</h2><ol>\n<li>typeof会返回一个变量的基本类型，instanceof返回的是一个布尔值</li>\n<li>instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</li>\n<li>而typeof 也存在弊端，它虽然可以判断基础数据类型（null 除外），但是引用数据类型中，除了function 类型以外，其他的也无法判断</li>\n</ol>\n",
            "tags": [
                "js"
            ]
        }
    ]
}