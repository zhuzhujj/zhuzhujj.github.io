{
    "version": "https://jsonfeed.org/version/1",
    "title": "zhuZhu",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/10/17/websocket%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2023/10/17/websocket%E4%BD%BF%E7%94%A8/",
            "title": "websocket使用",
            "date_published": "2023-10-17T09:04:08.000Z",
            "content_html": "<h1 id=\"在vue3中使用socket\"><a href=\"#在vue3中使用socket\" class=\"headerlink\" title=\"在vue3中使用socket\"></a>在vue3中使用socket</h1><a id=\"more\"></a>\n\n<blockquote>\n<p>express generator + vue3</p>\n</blockquote>\n<h1 id=\"一、前端\"><a href=\"#一、前端\" class=\"headerlink\" title=\"一、前端\"></a>一、前端</h1><h2 id=\"1-引入依赖\"><a href=\"#1-引入依赖\" class=\"headerlink\" title=\"1.引入依赖\"></a>1.引入依赖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-socket.io socket.io-client</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-在main-js导入依赖\"><a href=\"#2-在main-js导入依赖\" class=\"headerlink\" title=\"2.在main.js导入依赖\"></a>2.在main.js导入依赖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import VueSocketIO from &#x27;vue-socket.io&#x27;</span><br><span class=\"line\">import SocketIO from &#x27;socket.io-client&#x27;</span><br><span class=\"line\">const app = createApp(App)</span><br><span class=\"line\">app.use(new VueSocketIO(&#123;</span><br><span class=\"line\">  debug: true,</span><br><span class=\"line\">  connection: SocketIO(&#x27;ws://127.0.0.1:3000&#x27;)</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-vue-config-js\"><a href=\"#3-vue-config-js\" class=\"headerlink\" title=\"3.vue.config.js\"></a>3.vue.config.js</h2><blockquote>\n<p>注意，第二个代理路劲的ws属性必须设置为false，否则还会报跨域被阻止的错误</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      &#x27;/socket.io&#x27;: &#123;</span><br><span class=\"line\">        target: &#x27;http://127.0.0.1:3000/&#x27;, // target host</span><br><span class=\"line\">        changeOrigin: true, // needed for virtual hosted sites</span><br><span class=\"line\">        logLevel: &#x27;debug&#x27;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#x27;/sockjs-node&#x27;: &#123;</span><br><span class=\"line\">        target: &#x27;http://127.0.0.1:3000&#x27;,</span><br><span class=\"line\">        ws: false,</span><br><span class=\"line\">        changeOrigin: true</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-更改依赖包代码\"><a href=\"#4-更改依赖包代码\" class=\"headerlink\" title=\"4.更改依赖包代码\"></a>4.更改依赖包代码</h2><blockquote>\n<p>依赖包只适用于vue2</p>\n<p>解决 Cannot set property ‘$socket‘ of undefined 解决方案</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules/vue-socket.io/dist/vue-socketio.js</span><br><span class=\"line\"></span><br><span class=\"line\">将 </span><br><span class=\"line\">t.prototype.$socket=this.io,t.prototype.$vueSocketIo=this</span><br><span class=\"line\">改为</span><br><span class=\"line\">t.config.globalProperties.$http=this.io,t.config.globalProperties.$vueSocketIo = this</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-组件中的代码\"><a href=\"#5-组件中的代码\" class=\"headerlink\" title=\"5.组件中的代码\"></a>5.组件中的代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class=\"line\">    &lt;input id=&quot;inputArea&quot; type=&quot;text&quot;&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;sendMsgToServer&quot;&gt;发送消息给服务端&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import io from &#x27;socket.io-client&#x27;;</span><br><span class=\"line\">const socket = io(&#x27;http://127.0.0.1:24000&#x27;);</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#x27;HelloWorld&#x27;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &#x27;Welcome to Your Vue.js App&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    /*socket.emit(&#x27;message&#x27;,&#x27;xxx&#x27;) 表示，服务端上定义了一个监听&#x27;hello&#x27;的socket，</span><br><span class=\"line\">      即服务端有代码 </span><br><span class=\"line\">      socket.on(&#x27;hello&#x27;,(data) =&gt; &#123;</span><br><span class=\"line\">        //这是接收到的客户端消息</span><br><span class=\"line\">        console.log(data);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">       */</span><br><span class=\"line\">    sendMsgToServer()&#123;</span><br><span class=\"line\">      socket.emit(&#x27;hello&#x27;,document.getElementById(&quot;inputArea&quot;).value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    //一定要移除旧的message监听，否则会出现重复监听的状况</span><br><span class=\"line\">    socket.removeListener(&#x27;message&#x27;);</span><br><span class=\"line\">    //这是移除所有监听</span><br><span class=\"line\">    // socket.removeAllListeners();</span><br><span class=\"line\">    socket.on(&#x27;message&#x27;,(data) =&gt;&#123;</span><br><span class=\"line\">      console.log(data)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"二、后端\"><a href=\"#二、后端\" class=\"headerlink\" title=\"二、后端\"></a>二、后端</h1><h2 id=\"1-引入依赖-1\"><a href=\"#1-引入依赖-1\" class=\"headerlink\" title=\"1.引入依赖\"></a>1.引入依赖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i socket.io</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-导入\"><a href=\"#2-导入\" class=\"headerlink\" title=\"2.导入\"></a>2.导入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&#x27;express&#x27;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var server = http.createServer(app);</span><br><span class=\"line\"></span><br><span class=\"line\">// 导入socket.io</span><br><span class=\"line\">let io = require(&#x27;socket.io&#x27;)(server, &#123; cors: &#123; origin: &#x27;*&#x27; &#125; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//有新的客户端连接时触发</span><br><span class=\"line\">io.on(&#x27;connection&#x27;, function (socket) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  //接收到消息时触发</span><br><span class=\"line\">  socket.on(&#x27;message&#x27;, function (data) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    console.log(&#x27;服务端收到 : &#x27;, data);</span><br><span class=\"line\">    //注意send()方法其实是发送一个 &#x27;message&#x27; 事件</span><br><span class=\"line\">    //客户端要通过on(&#x27;message&#x27;)来响应</span><br><span class=\"line\">      // socket.emit(&#x27;message&#x27;,data)</span><br><span class=\"line\">    socket.send(&#x27;你好客户端, &#x27; + data);</span><br><span class=\"line\">    io.send(&#x27;有人说说话了&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  //发生错误时触发</span><br><span class=\"line\">  socket.on(&#x27;error&#x27;, function (err) &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、socket-io使用\"><a href=\"#三、socket-io使用\" class=\"headerlink\" title=\"三、socket.io使用\"></a>三、socket.io使用</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">io.on(&#x27;connection&#x27;, socket =&gt; &#123;</span><br><span class=\"line\">  socket.emit(&#x27;request&#x27;, /* … */); // emit an event to the socket</span><br><span class=\"line\">  io.emit(&#x27;broadcast&#x27;, /* … */); // emit an event to all connected sockets</span><br><span class=\"line\">  socket.on(&#x27;reply&#x27;, () =&gt; &#123; /* … */ &#125;); // listen to the event</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四、-在路由中使用\"><a href=\"#四、-在路由中使用\" class=\"headerlink\" title=\"四、 在路由中使用\"></a>四、 在路由中使用</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. // 将Socket.io与Express应用关联</span><br><span class=\"line\">let io = require(&#x27;socket.io&#x27;)(server, &#123; cors: &#123; origin: &#x27;*&#x27; &#125; &#125;)</span><br><span class=\"line\">app.io = io</span><br><span class=\"line\"></span><br><span class=\"line\">2.在指定路由中</span><br><span class=\"line\">let io = req.app.io</span><br><span class=\"line\"></span><br><span class=\"line\">3.</span><br><span class=\"line\">    // 向所有人发送</span><br><span class=\"line\">    io.emit(&#x27;message&#x27;, &#x27;aaa&#x27;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/09/21/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",
            "url": "http://example.com/2023/09/21/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",
            "title": "大文件上传",
            "date_published": "2023-09-21T07:55:53.000Z",
            "content_html": "<h1 id=\"大文件上传\"><a href=\"#大文件上传\" class=\"headerlink\" title=\"大文件上传\"></a>大文件上传</h1><a id=\"more\"></a>\n\n<h2 id=\"1-前置\"><a href=\"#1-前置\" class=\"headerlink\" title=\"1.前置\"></a>1.前置</h2><blockquote>\n<p>files 通过input标签读的文件</p>\n<p>blob 不可变的二进制文件</p>\n<p>formData 用于和后端传输的对象</p>\n<p>fileReader 多用于把文件读取为某种形式 base64 text文本</p>\n</blockquote>\n<h2 id=\"2-格式转换\"><a href=\"#2-格式转换\" class=\"headerlink\" title=\"2.格式转换\"></a>2.格式转换</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;file&quot; @change=&quot;fileChange&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">const fileChange = (e) =&gt; &#123;</span><br><span class=\"line\">  const file = e.target.files[0]</span><br><span class=\"line\">  // file转blob</span><br><span class=\"line\">  const _sliceBlob = new Blob([file]).slice(0, 1000)</span><br><span class=\"line\">  // console.log(_sliceBlob);</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  // blob 转 file</span><br><span class=\"line\">  const _file = new File([_sliceBlob], &#x27;newFile&#x27;)</span><br><span class=\"line\">  // console.log(file, _file);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  // 缩略图 转换为 fileReader</span><br><span class=\"line\">  const fr = new FileReader()</span><br><span class=\"line\">  fr.readAsDataURL(file)</span><br><span class=\"line\">  // 读取完成</span><br><span class=\"line\">  fr.onload = function () &#123;</span><br><span class=\"line\">    _base64.value = fr.result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // // 提交 base64</span><br><span class=\"line\">  // const _submit = new FormData()</span><br><span class=\"line\">  // _submit.append(&#x27;文件名&#x27;, file)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-切片上传\"><a href=\"#3-切片上传\" class=\"headerlink\" title=\"3.切片上传\"></a>3.切片上传</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const submit = (file) =&gt; &#123;</span><br><span class=\"line\">  let size = 1024</span><br><span class=\"line\">  let fileSize = file.size</span><br><span class=\"line\">  let current = 0</span><br><span class=\"line\">  while (current &lt;= fileSize) &#123;</span><br><span class=\"line\">    // 提交 base64</span><br><span class=\"line\">    const _submit = new FormData()</span><br><span class=\"line\">    _submit.append(&#x27;文件名1&#x27;, file.slice(current, current + size))</span><br><span class=\"line\">    </span><br><span class=\"line\">    //将 _submit发送给后端</span><br><span class=\"line\">    console.log(((current / fileSize * 100).toFixed(1)));</span><br><span class=\"line\">    current += size</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/09/13/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/",
            "url": "http://example.com/2023/09/13/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/",
            "title": "面试题汇总",
            "date_published": "2023-09-13T07:14:43.000Z",
            "content_html": "<h1 id=\"面试题汇总\"><a href=\"#面试题汇总\" class=\"headerlink\" title=\"面试题汇总\"></a>面试题汇总</h1><a id=\"more\"></a>\n\n<h2 id=\"day01\"><a href=\"#day01\" class=\"headerlink\" title=\"day01\"></a>day01</h2><h3 id=\"1-元素快速居中\"><a href=\"#1-元素快速居中\" class=\"headerlink\" title=\"1.元素快速居中\"></a>1.元素快速居中</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;style&gt;</span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    html,body&#123;</span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .auto &#123;</span><br><span class=\"line\">      border: 1px solid black;</span><br><span class=\"line\">      background-color: antiquewhite;</span><br><span class=\"line\">      width: 300px;</span><br><span class=\"line\">      height: 300px;</span><br><span class=\"line\">      margin: auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">      display: flex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;auto&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;aaaaaa&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-padding与margin有什么不同\"><a href=\"#2-padding与margin有什么不同\" class=\"headerlink\" title=\"2.padding与margin有什么不同\"></a>2.padding与margin有什么不同</h3><blockquote>\n<p>作用对象不同，padding作用于自身，margin作用于外部</p>\n</blockquote>\n<h3 id=\"3-vw与百分比\"><a href=\"#3-vw与百分比\" class=\"headerlink\" title=\"3.vw与百分比\"></a>3.vw与百分比</h3><blockquote>\n<p>%有继承关系，相对于父亲， </p>\n<p>vw只和设备的宽度相关</p>\n</blockquote>\n<h3 id=\"4-谷歌浏览器设置小字体\"><a href=\"#4-谷歌浏览器设置小字体\" class=\"headerlink\" title=\"4.谷歌浏览器设置小字体\"></a>4.谷歌浏览器设置小字体</h3><blockquote>\n<p>最小为12px, 可以用transform: scale(0.8)</p>\n</blockquote>\n<h3 id=\"5-判断数据类型\"><a href=\"#5-判断数据类型\" class=\"headerlink\" title=\"5.判断数据类型\"></a>5.判断数据类型</h3><blockquote>\n<p><strong>1.最常见的判断方法：typeof</strong></p>\n<p><strong>2.已知对象类型:  instanceof</strong> </p>\n<p><strong>3.对象原型链判断方法： prototype 通用但很繁琐</strong></p>\n<p><strong>4.根据对象的构造器constructor进行判断</strong></p>\n</blockquote>\n<h3 id=\"6-手写深拷贝\"><a href=\"#6-手写深拷贝\" class=\"headerlink\" title=\"6.手写深拷贝\"></a>6.手写深拷贝</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = &#123;</span><br><span class=\"line\">   name:&#x27;jake&#x27;,</span><br><span class=\"line\">   age:18,</span><br><span class=\"line\">   c: [1,2,3],</span><br><span class=\"line\">   d: &#123;</span><br><span class=\"line\">     d1:123,</span><br><span class=\"line\">     d2:&#x27;abc&#x27;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> function deepClone (soure) &#123;</span><br><span class=\"line\">   // 判断是[]?&#123;&#125;</span><br><span class=\"line\">   let _default = soure.constructor === Array ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   for(key in soure)&#123;</span><br><span class=\"line\">     if(soure.hasOwnProperty(key))&#123;</span><br><span class=\"line\">       // 每个key 有三种可能 基本类型 [] &#123;&#125;</span><br><span class=\"line\">     if(typeof soure[key] === &#x27;object&#x27;)&#123;//引用类型进一步判断</span><br><span class=\"line\">       _default[key] = soure[key].constructor === Array ? [] : &#123;&#125;</span><br><span class=\"line\">       _default[key] = deepClone(soure[key])</span><br><span class=\"line\">     &#125;else &#123;//基本类型直接赋值</span><br><span class=\"line\">       _default[key] = soure[key]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   return _default</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "all"
            ]
        },
        {
            "id": "http://example.com/2023/09/08/es6%E7%AC%94%E8%AE%B0/",
            "url": "http://example.com/2023/09/08/es6%E7%AC%94%E8%AE%B0/",
            "title": "es6笔记",
            "date_published": "2023-09-08T01:57:59.000Z",
            "content_html": "<h1 id=\"es6笔记\"><a href=\"#es6笔记\" class=\"headerlink\" title=\"es6笔记\"></a>es6笔记</h1><a id=\"more\"></a>\n\n<h2 id=\"1-闭包\"><a href=\"#1-闭包\" class=\"headerlink\" title=\"1.闭包\"></a>1.闭包</h2><blockquote>\n<p>闭包让你可以在一个内层函数中访问到其外层函数的作用域，同时规避gc清除</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 闭包</span><br><span class=\"line\">function count () &#123;</span><br><span class=\"line\">  let i = 0</span><br><span class=\"line\">  return function fn () &#123;</span><br><span class=\"line\">    i++</span><br><span class=\"line\">    console.log(`i已被引用$&#123;i&#125;次`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const fun = count()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-剩余参数\"><a href=\"#2-剩余参数\" class=\"headerlink\" title=\"2.剩余参数\"></a>2.剩余参数</h2><blockquote>\n<p>解决函数参数不确定情况</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 剩余参数</span><br><span class=\"line\">function sum1 (...arr) &#123;</span><br><span class=\"line\">  let sum = 0</span><br><span class=\"line\">  for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    sum += arr[i]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function sum2 () &#123;</span><br><span class=\"line\">  let sum = 0</span><br><span class=\"line\">  for (let i = 0; i &lt; arguments.length; i++) &#123;</span><br><span class=\"line\">    sum += arguments[i]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum1(1, 2, 3, 4, 5, 6)</span><br><span class=\"line\">sum2(1, 2, 3, 4, 5, 6)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-展开运算符\"><a href=\"#3-展开运算符\" class=\"headerlink\" title=\"3.展开运算符\"></a>3.展开运算符</h2><blockquote>\n<p>主要用于 合并数组 数组去重 求最大值</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//展开运算符</span><br><span class=\"line\">let arr = [1, 2, 3, 4, 5, 6]</span><br><span class=\"line\">let arr1 = [7, 8, 9, 0, 1, 2, 3]</span><br><span class=\"line\">console.log(&quot;max:&quot; + Math.max(...arr));</span><br><span class=\"line\">console.log(&quot;min:&quot; + Math.min(...arr));</span><br><span class=\"line\">console.log([...arr, ...arr1]);</span><br><span class=\"line\">console.log(new Set([...arr, ...arr1]));</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-数组解构\"><a href=\"#4-数组解构\" class=\"headerlink\" title=\"4.数组解构\"></a>4.数组解构</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 数组解构</span><br><span class=\"line\">// let [a, b, c, ...d] = [1, 2, 3, 4, 5]</span><br><span class=\"line\">// console.log(a);</span><br><span class=\"line\">// console.log(b);</span><br><span class=\"line\">// console.log(c);</span><br><span class=\"line\">// console.log(d);</span><br><span class=\"line\"></span><br><span class=\"line\">// let [a, b, c = &#x27;123a&#x27;] = [1, 2] //默认值</span><br><span class=\"line\">// console.log(a);//1</span><br><span class=\"line\">// console.log(b);//2</span><br><span class=\"line\">// console.log(c);//undefind</span><br><span class=\"line\"></span><br><span class=\"line\">// let [a, , b, c] = [1, 2, 3, 4] //默认值</span><br><span class=\"line\">// console.log(a);//1</span><br><span class=\"line\">// console.log(b);//3</span><br><span class=\"line\">// console.log(c);//4</span><br><span class=\"line\"></span><br><span class=\"line\">let [a, [b, c]] = [1, [2, 3]]</span><br><span class=\"line\">console.log(a);//1</span><br><span class=\"line\">console.log(b);//2</span><br><span class=\"line\">console.log(c);//3</span><br><span class=\"line\"></span><br><span class=\"line\">// let a = 1</span><br><span class=\"line\">// let b = 2</span><br><span class=\"line\">//   ;[a, b] = [b, a]//交换两个数</span><br><span class=\"line\">// console.log(a, b);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-对象解构\"><a href=\"#5-对象解构\" class=\"headerlink\" title=\"5.对象解构\"></a>5.对象解构</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对象解构</span><br><span class=\"line\">// const people = &#123;</span><br><span class=\"line\">//   age: 18,</span><br><span class=\"line\">//   name: &#x27;jake&#x27;</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 数组解构</span><br><span class=\"line\">// const &#123; age, name &#125; = people</span><br><span class=\"line\">// console.log(age, name);</span><br><span class=\"line\"></span><br><span class=\"line\">// const people = [</span><br><span class=\"line\">//   &#123;</span><br><span class=\"line\">//     age: 18,</span><br><span class=\"line\">//     name: &#x27;jake&#x27;</span><br><span class=\"line\">//   &#125;</span><br><span class=\"line\">// ]</span><br><span class=\"line\"></span><br><span class=\"line\">// const [&#123; age, name &#125;] = people</span><br><span class=\"line\">// console.log(age, name); </span><br><span class=\"line\"></span><br><span class=\"line\">// 多级对象解构</span><br><span class=\"line\">// const people =</span><br><span class=\"line\">// &#123;</span><br><span class=\"line\">//   age: 18,</span><br><span class=\"line\">//   name: &#x27;jake&#x27;,</span><br><span class=\"line\">//   soming: &#123;</span><br><span class=\"line\">//     a: 1,</span><br><span class=\"line\">//     b: 2,</span><br><span class=\"line\">//     c: 3</span><br><span class=\"line\">//   &#125;</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// const &#123; age, name, soming: &#123; a, b, c &#125; &#125; = people</span><br><span class=\"line\">// console.log(age, name, a, b, c); </span><br><span class=\"line\"></span><br><span class=\"line\">// 数组多级对象解构</span><br><span class=\"line\">const people =</span><br><span class=\"line\">  [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      age: 18,</span><br><span class=\"line\">      name: &#x27;jake&#x27;,</span><br><span class=\"line\">      soming: &#123;</span><br><span class=\"line\">        a: 1,</span><br><span class=\"line\">        b: 2,</span><br><span class=\"line\">        c: 3</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\">const [&#123; age, name, soming: &#123; a, b, c &#125; &#125;] = people</span><br><span class=\"line\">console.log(age, name, a, b, c); </span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "es6"
            ]
        },
        {
            "id": "http://example.com/2023/09/07/scss%E7%AC%94%E8%AE%B0/",
            "url": "http://example.com/2023/09/07/scss%E7%AC%94%E8%AE%B0/",
            "title": "scss笔记",
            "date_published": "2023-09-07T06:56:35.000Z",
            "content_html": "<h1 id=\"scss笔记\"><a href=\"#scss笔记\" class=\"headerlink\" title=\"scss笔记\"></a>scss笔记</h1><a id=\"more\"></a>\n\n<h2 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1.变量\"></a>1.变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义</span><br><span class=\"line\">$color1: black;</span><br><span class=\"line\">$color2: red;</span><br><span class=\"line\">$width: 300px;</span><br><span class=\"line\">$height: 300px;</span><br><span class=\"line\"></span><br><span class=\"line\">使用</span><br><span class=\"line\">.d1 &#123;</span><br><span class=\"line\">  color: $color</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-注释\"><a href=\"#2-注释\" class=\"headerlink\" title=\"2.注释\"></a>2.注释</h2><p>SCSS中的注释有两种</p>\n<p>（1）/<em>注释</em>/:这种注释会被保留到编译后的css文件中。</p>\n<p>（2）//注释:这种注释不会被保留到编译后生成的css文件中。</p>\n<h2 id=\"3-混合器mixin\"><a href=\"#3-混合器mixin\" class=\"headerlink\" title=\"3.混合器mixin\"></a>3.混合器mixin</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义</span><br><span class=\"line\">@mixin whc($width: 300px, $height: 300px, $bc: #a23a0c) &#123;</span><br><span class=\"line\">  width: $width;</span><br><span class=\"line\">  height: $height;</span><br><span class=\"line\">  background-color: $bc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用</span><br><span class=\"line\">.d1 &#123;</span><br><span class=\"line\">  @include whc();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-继承\"><a href=\"#4-继承\" class=\"headerlink\" title=\"4.继承\"></a>4.继承</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 继承 %相当于抽象类 @extend继承</span><br><span class=\"line\">%border &#123;</span><br><span class=\"line\">  border: 3px solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用</span><br><span class=\"line\">.d1 &#123;</span><br><span class=\"line\">  @extend %border;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.d2 &#123;</span><br><span class=\"line\">  @extend .d1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-函数\"><a href=\"#5-函数\" class=\"headerlink\" title=\"5.函数\"></a>5.函数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// function</span><br><span class=\"line\">@function db ($fontSize: &#x27;15px&#x27;) &#123;</span><br><span class=\"line\">  @return 30px</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用</span><br><span class=\"line\">.d2 &#123;</span><br><span class=\"line\">  font-size: db(16px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "scss"
            ]
        },
        {
            "id": "http://example.com/2023/09/06/%E6%89%8B%E5%86%99promise/",
            "url": "http://example.com/2023/09/06/%E6%89%8B%E5%86%99promise/",
            "title": "手写promise",
            "date_published": "2023-09-06T13:44:25.000Z",
            "content_html": "<h1 id=\"手写Promise\"><a href=\"#手写Promise\" class=\"headerlink\" title=\"手写Promise\"></a>手写Promise</h1><a id=\"more\"></a>\n\n<h2 id=\"1-基本实现\"><a href=\"#1-基本实现\" class=\"headerlink\" title=\"1.基本实现\"></a>1.基本实现</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义三个状态</span><br><span class=\"line\">const PENDING = &#x27;PENDING&#x27;,</span><br><span class=\"line\">  FULFILLEN = &#x27;FULFILLEN&#x27;,</span><br><span class=\"line\">  REJECTEN = &#x27;REJECTEN&#x27;,</span><br><span class=\"line\">  // 用于依赖收集</span><br><span class=\"line\">  onFulfilledCallBack = [],</span><br><span class=\"line\">  onRejectedCallBack = []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class MyPromise &#123;</span><br><span class=\"line\">  constructor(executor) &#123;</span><br><span class=\"line\">    this.status = PENDING</span><br><span class=\"line\">    this.value = undefined</span><br><span class=\"line\">    this.reason = undefined</span><br><span class=\"line\"></span><br><span class=\"line\">    const resolve = (value) =&gt; &#123;</span><br><span class=\"line\">      if (this.status === PENDING) &#123;</span><br><span class=\"line\">        this.status = FULFILLEN</span><br><span class=\"line\">        this.value = value</span><br><span class=\"line\"></span><br><span class=\"line\">        // 发布</span><br><span class=\"line\">        onFulfilledCallBack.forEach(fn =&gt; fn())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const reject = (reason) =&gt; &#123;</span><br><span class=\"line\">      if (this.status === PENDING) &#123;</span><br><span class=\"line\">        this.status = REJECTEN</span><br><span class=\"line\">        this.reason = reason</span><br><span class=\"line\">        // 发布</span><br><span class=\"line\">        onRejectedCallBack.forEach(fn =&gt; fn())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      executor(resolve, reject)</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      reject(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 根据状态调用</span><br><span class=\"line\">  then (onFulfilled, onRejected) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.status === FULFILLEN) &#123;</span><br><span class=\"line\">      onFulfilled(this.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (this.status === REJECTEN) &#123;</span><br><span class=\"line\">      onRejected(this.reason)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.status === PENDING) &#123;</span><br><span class=\"line\">      // 订阅</span><br><span class=\"line\">      onFulfilledCallBack.push(() =&gt; &#123;</span><br><span class=\"line\">        onFulfilled(this.value)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      onRejectedCallBack.push(() =&gt; &#123;</span><br><span class=\"line\">        onRejected(this.reason)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = MyPromise</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-链式调用实现\"><a href=\"#2-链式调用实现\" class=\"headerlink\" title=\"2.链式调用实现\"></a>2.链式调用实现</h2>",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/09/06/instanceof%E5%AE%9E%E7%8E%B0/",
            "url": "http://example.com/2023/09/06/instanceof%E5%AE%9E%E7%8E%B0/",
            "title": "instanceof实现",
            "date_published": "2023-09-06T01:30:10.000Z",
            "content_html": "<h1 id=\"instanceof实现原理\"><a href=\"#instanceof实现原理\" class=\"headerlink\" title=\"instanceof实现原理\"></a>instanceof实现原理</h1><a id=\"more\"></a>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  instanceof 实现</span><br><span class=\"line\">//  [] instanceof Array</span><br><span class=\"line\">function myInstanceof (left, right) &#123;</span><br><span class=\"line\">  let proto = Object.getPrototypeOf(left) // 获取__proto__</span><br><span class=\"line\">  let protoType = right.prototype</span><br><span class=\"line\"></span><br><span class=\"line\">  // 循环判断 </span><br><span class=\"line\">  while (1) &#123; // 在原型链上寻找</span><br><span class=\"line\">    if (!proto) return false</span><br><span class=\"line\">    if (proto == protoType) return true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    proto = Object.getPrototypeOf(proto)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(myInstanceof(1, Array));</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/08/27/nuxt/",
            "url": "http://example.com/2023/08/27/nuxt/",
            "title": "nuxt",
            "date_published": "2023-08-27T03:50:49.000Z",
            "content_html": "<h1 id=\"Nuxt3从零到实战手把手-免费视频图文教程\"><a href=\"#Nuxt3从零到实战手把手-免费视频图文教程\" class=\"headerlink\" title=\"Nuxt3从零到实战手把手 免费视频图文教程\"></a>Nuxt3从零到实战手把手 免费视频图文教程</h1><a id=\"more\"></a>\n\n<blockquote>\n<p>摘自 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jMQ==\">技术胖-Nuxt3从零到实战手把手 免费视频图文教程 (jspang.com)</span></p>\n</blockquote>\n<p>分类: <strong>视频教程</strong>发布时间: <strong>2022-08-12</strong>集数: <strong>14</strong>浏览数: <strong>43604</strong>学习时长: <strong>2h12m</strong></p>\n<p>Nuxt3是Vue3全家桶的一员，让你能轻松实现SSR网页的制作。Nuxt3比Nuxt2新增加了12项最新的特性，包括可以完全使用Vue3的所有语法，并且对TypeScript的完美支持。 目前Nuxt3还是Bate版本，但我相信今年就会出正式版，所以小伙伴们可以和我一起学起来。本套视频完全免费，还提供了辅导微信群，只要你肯学，一定可以学会。</p>\n<p>00.视频目录</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUdBNHkxOTdaTQ==\">01.Nuxt3简介和开发环境搭建</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUhBNHkxOTdveQ==\">02.Nuxt3目录结构介绍和HelloWorld编写</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlyNHkxcDdDNg==\">03.Nuxt3页面创建和约定路由的使用</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW1aNHkxMTdXSA==\">04.Nuxt3动态路由的使用</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTV1NDExQzdrMQ==\">05.Nuxt3嵌套页面和路由的编写</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUNaNHkxQzdTQg==\">06.Nuxt3布局模板的编写和插槽的使用</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWhUNHkxNjdzcw==\">07.Nuxt3组件的编写和注意事项</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXFaNHkxeTd4NA==\">08.Nuxt3多层级组件和懒加载组件</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUxaNHkxYTdTOQ==\">09.Nuxt3中的模块化代码 composables文件夹</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXNZNHkxNDdTQg==\">10.Nuxt3中请求数据的四种方法</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXBUNDExSjd3dQ==\">11.Nuxt3中间件的使用和路由守卫编写</span></li>\n</ul>\n<p>\\01. Nuxt3简介和环境搭建</p>\n<h3 id=\"Nuxt3的简介\"><a href=\"#Nuxt3的简介\" class=\"headerlink\" title=\"Nuxt3的简介\"></a>Nuxt3的简介</h3><p>Nuxt3是基于Vue3发布的SSR框架，也是Vue全家桶系列的一员。如果你了解Nuxt2，应该也了解Nuxt3的使命和用途。但是如果你不了解，你需要先知道两个概念。</p>\n<ul>\n<li>SPA应用：也就是单页应用，这些多是在客户端的应用，不能进行SEO优化（搜索引擎优化）。</li>\n<li>SSR应用：在服务端进行渲染，渲染完成后返回给客户端，每个页面有独立的URL，对SEO友好。</li>\n</ul>\n<p>所以如果你开发的应用是企业网站、商品展示 、博客这类型的展示型网站，就需要使用搜索引擎喜欢的SSR应用。当我们明白这两个概念后，再来看Nuxt3的使命。因为Vue开发的应用默认是单页应用（SPA应用），但如果你想针对于搜索优化，就需要使用Vue的SSR模式开发，而Nuxt3就是Vue的SSR开发的框架。<br><img data-src=\"https://img.jspang.com/ArticleImages/20220323_Nuxt003.png\" alt=\"img\"> 我录制本期视频的时候，Nuxt3还是Beta版本，所以网络资料也是相对比较少的，所以我建立了一个微信群，并且我会保证一周拿出6个小时的时间在群里解答小伙伴们的问题。和小伙伴一起学习进步。 本视频预计会在30-40集左右，基础知识讲完，会带着你作一个博客的实战项目。项目样式，就是我现在的博客。项目完成后，还会把这套博客开源出来。所以如果你想跟着我一起学习Nuxt的知识，可以加我微信，我邀请你入群。 <img data-src=\"https://img.jspang.com/ArticleImages/20220331_Nuxt05.jpg\" alt=\"加入Nuxt3学习群\"></p>\n<h3 id=\"Nuxt3-的安装\"><a href=\"#Nuxt3-的安装\" class=\"headerlink\" title=\"Nuxt3 的安装\"></a>Nuxt3 的安装</h3><p>我这里使用的代码编辑器是VSCode，如果你是新手，尽量也使用和我一样的代码编辑器，这样能最大程度的和我统一，让自己少踩坑。 打开 <code>Visual Studio Code</code> ，打开内置终端并输入下面命令创建一个nuxt项目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx nuxi init nuxt3-test</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：<code>npx</code>是npm从5.2版开始增加的命令，所以说你的 npm 最小版本也要是5.2版本。查看npm版本的命令如下。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<p>如果你安装失败，或者安装很慢的话你需要多试几次，其实这个是国内网络问题造成的，道理就和你上不了Google是一样的。所以你可以使用科学上网解决这个问题。一般获取不到内容，就会得到下面一段警告。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">could not fetch remote https://github.com/nuxt/starter</span><br><span class=\"line\">Make sure you have installed git correctly   </span><br></pre></td></tr></table></figure>\n\n<p>直到出现下面的文字就算安装成功了。<br><img data-src=\"https://img.jspang.com/ArticleImages/20220323_Nuxt004.png\" alt=\"Nuxt3安装成功页面\"> 上面这段提示，也告诉我们了接下来的三个步骤。</p>\n<ol>\n<li>使用<code>cd nuxt3-test</code>进入项目根目录.</li>\n<li>用<code>npm install</code>或者<code>yarn install</code> 来安装项目依赖包。</li>\n<li>用<code>npm run dev</code>或者 <code>yarn dev</code>来运行项目。</li>\n</ol>\n<p>按照上面的三个步骤就应该可以启动起来项目了，项目启动后的效果如下。（你的IP地址可能会和我的不一样）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Nuxt CLI v3.0.0-27466220.7c0d2e1                                               </span><br><span class=\"line\"><span class=\"meta prompt_\">  &gt; </span><span class=\"language-bash\">Local:    http://localhost:3000/</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">  &gt; </span><span class=\"language-bash\">Network:  http://192.168.0.118:3000/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  &gt; </span><span class=\"language-bash\">Network:  http://172.17.208.1:3000/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  &gt; </span><span class=\"language-bash\">Network:  http://172.27.32.1:3000/</span></span><br></pre></td></tr></table></figure>\n\n<p>然后打开浏览器，输入<code>http://localhost:3000</code>，就可以看到下面的页面了。 <img data-src=\"https://img.jspang.com/ArticleImages/20220323_Nuxt001.png\" alt=\"img\"> 图片地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcuanNwYW5nLmNvbS9BcnRpY2xlSW1hZ2VzLzIwMjIwMzIzX051eHQwMDEucG5n\">https://img.jspang.com/ArticleImages/20220323_Nuxt001.png</span> 如果看到上面的页面，说明你的安装已经顺利完成了。</p>\n<h3 id=\"Nuxt3的优势介绍\"><a href=\"#Nuxt3的优势介绍\" class=\"headerlink\" title=\"Nuxt3的优势介绍\"></a>Nuxt3的优势介绍</h3><p>当我们动手操作完了，我们再简单介绍一下Nuxt3对比Nuxt2的优势或者说作了那些改进。<br><img data-src=\"https://img.jspang.com/ArticleImages/20220323_Nuxt002.png\" alt=\"img\"> 这是一张Nuxt3官网的图片，列出Nuxt3的新特性，一共12个。我们快速来解读一下。</p>\n<ul>\n<li>更轻量：以现代浏览器为基础的情况下，服务器部署和客户端产物最多减小75倍。</li>\n<li>更快：用动态服务端代码来优化冷启动。</li>\n<li>Hybird：增量动态生成和其他高级模式现在都成为可能。</li>\n<li>Suspense: 导航前后可在任何组件中获取数据。</li>\n<li>Composition API : 使用Composition API 和 Nuxt3的composables 实现真正的可复用性。</li>\n<li>Nuxt CLI ： 权限的零依赖体验，助你轻松搭建项目和集成模块。</li>\n<li>Nuxt Devtools ：专属调试工具，更多的信息和快速修复，在浏览器中高效工作。</li>\n<li>Nuxt Kit ：全新的基于 TypeScript 和跨版本兼容的模块开发。</li>\n<li>Webpack5 ： 更快的构建速度和更小的构建包，并且零配置。</li>\n<li>Vite：用Vite作为你的打包器，体验轻量级的快速HMR。</li>\n<li>Vue3 ： 完全支持Vue3语法，这一点特别关键。</li>\n<li>TypeScript：由原生TypeScript和ESM构成，没有额外配置步骤。</li>\n</ul>\n<p>好了，第一节课的内容，就先到这里了，如果你正好想学习Nuxt3的知识，不防点击关注和添加我微信flutter100，我邀请你进群，和众多小伙伴一起学习。下期视频我们将编写第一个Nuxt3的Hello World 和讲解 Nuxt3的目录结构。更新频率大概是一周三集。</p>\n<p>\\02. Nuxt3的基础目录结构</p>\n<p>当Nuxt3项目创建好之后，我们用VSCode打开这个项目。然后可以看到项目根目录已经有了很多的文件。这节课我们就先来了解一下这些文件的作用。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUhBNHkxOTdveQ==\">视频教程地址 – 点击观看视频教程</span></li>\n</ul>\n<h3 id=\"Nuxt3的目录结构\"><a href=\"#Nuxt3的目录结构\" class=\"headerlink\" title=\"Nuxt3的目录结构\"></a>Nuxt3的目录结构</h3><p>默认的项目里就如下几个文件和目录，我已经用备注的形式写清楚每个文件的作用了。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- .nuxt               <span class=\"comment\">// 自动生成的目录，用于展示结果</span></span><br><span class=\"line\">- node_modules        <span class=\"comment\">// 项目依赖包存放目录</span></span><br><span class=\"line\">- .gitignore          <span class=\"comment\">// Git的配置目录，比如一些文件不用Git管理就可以在这个文件中配置</span></span><br><span class=\"line\">- app.vue             <span class=\"comment\">// 项目入口文件，你可以在这里配置路由的出口</span></span><br><span class=\"line\">- nuxt.config.ts      <span class=\"comment\">// nuxt项目的配置文件 ，这个里边可以配置Nuxt项目的方法面面</span></span><br><span class=\"line\">- package-lock.json   <span class=\"comment\">// 锁定安装时包的版本，以保证其他人在 npm install时和你保持一致</span></span><br><span class=\"line\">- package.json        <span class=\"comment\">// 包的配置文件和项目的启动调式命令配置</span></span><br><span class=\"line\">- README.md           <span class=\"comment\">// 项目的说明文件</span></span><br><span class=\"line\">- tsconfig.json       <span class=\"comment\">// TypeScript的配置文件</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>随着我们的开发目录也会越来越多，比如常用的还有下面三个目录。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- pages               <span class=\"comment\">// 开发的页面目录</span></span><br><span class=\"line\">- components          <span class=\"comment\">// 组件目录</span></span><br><span class=\"line\">- assets              <span class=\"comment\">// 静态资源目录</span></span><br><span class=\"line\">- layouts             <span class=\"comment\">// 项目布局目录</span></span><br></pre></td></tr></table></figure>\n\n<p>好了，现在我们对Nuxt3的基础目录了解后，接下来我们试着去作一个HelloWorld的程序。</p>\n<h3 id=\"编写Hello-World程序\"><a href=\"#编写Hello-World程序\" class=\"headerlink\" title=\"编写Hello World程序\"></a>编写Hello World程序</h3><p>通过上面的学习，我们知道了<code>App.vue</code> 这个文件是项目的入口文件。用VSCode打开文件，可以看到文件的基础结构。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">NuxtWelcome</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中<code>&lt;NuxtWelcom /&gt;</code> 就是一个框架自带的组件，我们直接删除就可以，不用纠结删除这个组件。删除后，在 <code>\\components</code> 目录下新建一个文件，叫做<code>HelloWorld.vue</code> 然后编写下面的代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123;&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后再回到<code>app.vue</code>文件中直接写入这个 <code>HelloWorld</code>组件.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hello-world</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打开VSCode的内置终端，然后输入 <code>npm run dev</code> 或 <code>yarn dev</code> 就可以启动调试服务了。 打开浏览器，在地址栏输入<code>[http://localhost:3000/](http://localhost:3000/)</code>就可以看到 HelloWord效果了。</p>\n<p>\\03. Nuxt3页面和约定路由的使用</p>\n<p>通过两节的学习，你已经知道了Nuxt3的基本目录结构和HelloWorld的写法了。这节课开始，我们学习一下如何新建一个页面和如何通过超链接的形式到达这个页面。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlyNHkxcDdDNg==\">视频教程地址 – 点击观看视频教程</span></li>\n</ul>\n<h3 id=\"Nuxt3创建页面\"><a href=\"#Nuxt3创建页面\" class=\"headerlink\" title=\"Nuxt3创建页面\"></a>Nuxt3创建页面</h3><p>Nuxt3的一个特点就是<strong>约定式开发</strong>，讲究的是约定大于配置。这种开发形式就是按照框架的约定进行开发。举个简单的例子，这就好比你去红浪漫，198元的套餐，就式按摩按脚，你不能有任何的非分之想。但是你说我发工资了，享受个998元的套餐，你就可以上二楼了。 例子虽然不太形象，但也能说明问题，就是你的开发模式都是事先说好的，你用Nuxt3就要遵守Nuxt3的规则一样，框架都已经为你做好各种配置了，你只要遵守规则就可以了。 当你了解什么是“约定式开发”后，再来看如何创建一个Nuxt3的页面。我们按照框架约定新建一个<code>pages</code> 的文件夹，然后新建一个文件<code>Demo1.vue</code> 。注意，上面这两个步骤，就是约定开发，你必须这么作，否则框架就不认为你是一个页面。</p>\n<h3 id=\"VSCode自定义代码片段\"><a href=\"#VSCode自定义代码片段\" class=\"headerlink\" title=\"VSCode自定义代码片段\"></a>VSCode自定义代码片段</h3><p>这里再分享一个小技巧，比如每次新建一个页面，都会有很多相同的代码，这时候就可以使用VSCode的<code>用户代码片段</code> 功能。这个功能可以在VSCode界面的左下角的齿轮图标中找到。 找到后新建一个Nuxt的片段就可以了。这个一般根据自己的需要进行编写，如果你是新手，没有太多的 配置，直接复制下面我的也是可以使用的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;nuxt&quot;:&#123;</span><br><span class=\"line\">    &quot;prefix&quot;:&quot;nuxt&quot;,</span><br><span class=\"line\">    &quot;body&quot;:[</span><br><span class=\"line\">        &quot;<span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>&quot;,</span><br><span class=\"line\">            &quot;  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>&quot;\\&quot;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&quot;,</span><br><span class=\"line\">        &quot;<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span>&quot;,</span><br><span class=\"line\">        &quot;&quot;,</span><br><span class=\"line\">        &quot;<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span>&quot;,</span><br><span class=\"line\">        &quot;import &#123;&#125; from &#x27;vue&#x27;&quot;,</span><br><span class=\"line\">        &quot;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>&quot;,</span><br><span class=\"line\">        &quot;&quot;,</span><br><span class=\"line\">        &quot;<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>&quot;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;description&quot;:&quot;nuxt3 Components&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新建好之后，我们再次回到VSCode中的<code>Demo1.vue</code>页面，直接输入 <code>nuxt</code> 回车后，就会生成一段代码了。</p>\n<blockquote>\n<p>友情提示：工作中巧用这个功能，可以大大加快开发效率。</p>\n</blockquote>\n<p>新的页面建好了，再补充一下页面内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Demo01<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样一个页面就建立好了。 这时候你可以喝口水，准备下面的学习了。</p>\n<h3 id=\"约定路由\"><a href=\"#约定路由\" class=\"headerlink\" title=\"约定路由\"></a>约定路由</h3><p>当一个页面建立好以后，如何能访问到这个页面 ? 也是一个不能忽视的问题。既然是约定开发，肯定是有一个约定的。 首先第一步，我们需要在项目根目录下的<code>app.vue</code>文件中，使用 <code>&lt;Nuxtpage&gt;</code> 标签，这就相当于路由的出口了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hello-world</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">NuxtPage</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">NuxtPage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>比如我们现在这个页面，想要访问到，其实只要在地址栏输入下面的地址就可以了。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http<span class=\"punctuation\">:</span><span class=\"comment\">//localhost:3000/demo1</span></span><br></pre></td></tr></table></figure>\n\n<p>但是如果你使用原来的<code>http://localhost:3000</code>就又访问，会显示404，这时候你可以新建一个 <code>index.vue</code> 页面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Index Page<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123;&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这时候在访问<code>http://localhost:3000</code>就可以访问到页面了。</p>\n<h3 id=\"NuxtLink标签的使用\"><a href=\"#NuxtLink标签的使用\" class=\"headerlink\" title=\"NuxtLink标签的使用\"></a>NuxtLink标签的使用</h3><p>Nuxt框架不鼓励我们使用<code>&lt;a&gt;</code> 标签进行跳转，而是使用<code>&lt;NuxtLink&gt;&lt;/NuxtLink&gt;</code>标签进行跳转。比如我们要从 <code>index.vue</code>页面跳转到<code>demo1.vue</code>页面，就可以使用下面的代码进行跳转。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Index Page<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/demo1&quot;</span>&gt;</span>Demo1.vue<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个页面写完后，可以到浏览器中预览一下效果。基本就可以看到NuxtLink标签的作用了。这节课我们学习了三个知识，我们进行总结一下。</p>\n<ol>\n<li>Nuxt3是约定大于配置的开发。</li>\n<li>VSCode 自定义用户代码片段的方法</li>\n<li>约定路由和<code>&lt;NuxtLink&gt;</code>标签的使用方法</li>\n</ol>\n<p>最后我还是要说一句，编程这东西，需要动手练习才能学会，你只看永远都学不会的。下节课我们学习一下Nuxt3的动态路由的相关知识。</p>\n<p>\\04. Nuxt3动态路由的使用</p>\n<p>上节课学习如何新建一个页面，然后又学习了静态路由的使用和跳转方法。这节课学习一下动态路由的使用 <code>Dynamic Routes</code>。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW1aNHkxMTdXSA==\">视频教程地址 – 点击观看视频教程</span></li>\n</ul>\n<h3 id=\"单参数的传递\"><a href=\"#单参数的传递\" class=\"headerlink\" title=\"单参数的传递\"></a>单参数的传递</h3><p>单参数的传递只要在页面的文件名中用<code>[ ]</code>扩起来就可以了。比如新建一个页面，叫做 <code>demo2-[id].vue</code>。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-| pages/</span><br><span class=\"line\">---| index.vue</span><br><span class=\"line\">---| demo2-<span class=\"punctuation\">[</span>id<span class=\"punctuation\">]</span>.vue</span><br></pre></td></tr></table></figure>\n\n<p>也就是说我们使用<code>[ ]</code>的形式就可以设置一个页面的传参。参数接收可以使用 <code>$route.params.id</code>的形式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>获取的id:&#123;&#123; $route.params.id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们去首页制作一个链接。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Index Page<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/demo1&quot;</span>&gt;</span>Demo1.vue<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/demo2-38&quot;</span>&gt;</span>Demo2.vue<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123;&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这时候再到浏览器预览一下，调整后能得到ID，可以了。</p>\n<h3 id=\"在script里获取参数\"><a href=\"#在script里获取参数\" class=\"headerlink\" title=\"在script里获取参数\"></a>在script里获取参数</h3><p>上面只是在页面中获取了参数，实际作用并不大。工作中获取参数后，都要进行业务逻辑的处理，所以在<code>&lt;script&gt;</code>标签里获取参数，才是真实的开发需求。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>获取的id:&#123;&#123; id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> route = <span class=\"title function_\">useRoute</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> id = <span class=\"title function_\">ref</span>(route.<span class=\"property\">params</span>.<span class=\"property\">id</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码通过<code>useRoute( )</code> 获得了 <code>route</code> 然后通过ref让<code>template</code>可用。</p>\n<h3 id=\"多参数的获取\"><a href=\"#多参数的获取\" class=\"headerlink\" title=\"多参数的获取\"></a>多参数的获取</h3><p>有人说是不是再写一个括号就可以传递多一个参数了，这种是不行的。如果你要传递是两个参数。你需要建立一个文件夹，然后在文件夹上使用<code>[ ]</code>来确定参数。比如我们要传递一个name的参数过来。就需要把目录和文件建立成这样。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-|  pages/</span><br><span class=\"line\">---| index.vue</span><br><span class=\"line\">---| goods-<span class=\"punctuation\">[</span>name<span class=\"punctuation\">]</span>/</span><br><span class=\"line\">-----| demo2-<span class=\"punctuation\">[</span>id<span class=\"punctuation\">]</span>.vue</span><br></pre></td></tr></table></figure>\n\n<p>然后修改一些<code>demo2-[id].vue</code>的文件，修改获取的参数。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>获取的id:&#123;&#123; id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>获取的name:&#123;&#123; name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> route = <span class=\"title function_\">useRoute</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> id = <span class=\"title function_\">ref</span>(route.<span class=\"property\">params</span>.<span class=\"property\">id</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> name = <span class=\"title function_\">ref</span>(route.<span class=\"property\">params</span>.<span class=\"property\">name</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>再到<code>index.vue</code> 修改链接，传递两个参数。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/goods-jspang/demo2-38&quot;</span>&gt;</span>Demo2.vue<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>完成后再到浏览器中查看结果，可以看到已经接收到了两个参数。 这节课主要学习了Nuxt3中的动态路由，包括：单参数的传递、多参数的传递和在Script标签里获取参数的方法。</p>\n<p>05.Nuxt3 嵌套路由的使用</p>\n<p>掌握了动态路由后，我们还需要对嵌套路由有所了解。嵌套路由就是路由是两级，但是程序员的页面是一个。也就是说有父级页面，也有子集页面。类似我们的页面嵌套。</p>\n<h3 id=\"如何建立一个嵌套路由\"><a href=\"#如何建立一个嵌套路由\" class=\"headerlink\" title=\"如何建立一个嵌套路由\"></a>如何建立一个嵌套路由</h3><p>嵌套路由的建立非常容易，用一句话解释为：目录和文件名同名，就制作了一个嵌套路由。<br>制作一个嵌套路由页面一般需要三步：</p>\n<ol>\n<li>建立嵌套路由的文件夹（约定大于配置）</li>\n<li>创建和文件夹相同名称的文件（父页面）</li>\n<li>在新建文件夹下任意创建子页面</li>\n</ol>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--pages</span><br><span class=\"line\">|----parent/</span><br><span class=\"line\">|------child.vue</span><br><span class=\"line\">|----parent.vue</span><br></pre></td></tr></table></figure>\n\n<p>视频中我会作演示，如果看不懂的，建议看一下视频教程。<br>先在<code>\\pages</code>目录下，新建一个文件夹 <code>parent</code> ，然后在pages目录下再建立一个<code>parent.vue</code>的文件。文件建立好之后，编写代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Parent Page<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 子页面的出口--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">NuxtChild</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">NuxtChild</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123;&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>&lt;NuxtChild&gt;</code>就是嵌套路由的出口，所以如果是嵌套路由，就必须要加上这个标签。这是Nuxt的一个内置组件。 有了父页面之后，在新建的<code>parent</code>文件夹下，再建立一个 <code>child.vue</code>子页面。然后编写代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Child Page<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123;&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后为了看到效果，我们还需要一个路由链接过来。直接到<code>index.uve</code>增加路由链接。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/parent/child&quot;</span>&gt;</span>/parent/child<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>做完这部，我们就可以到浏览器预览一下效果了。</p>\n<h3 id=\"多个子页面的制作\"><a href=\"#多个子页面的制作\" class=\"headerlink\" title=\"多个子页面的制作\"></a>多个子页面的制作</h3><p>这时候小伙伴可能会有疑问了，如果我有多个子页面要如何作那？方法其实和制作一个单页面是相同的。在<br><code>\\pages\\parent\\</code>文件夹下面再新建一个文件 <code>two.vue</code>。然后编写代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Two Page<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123;&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>写完后再到<code>index.vue</code>页面，增加导航路由。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/parent/two&quot;</span>&gt;</span>/parent/two<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后去浏览器查看结果。</p>\n<h3 id=\"文章总结\"><a href=\"#文章总结\" class=\"headerlink\" title=\"文章总结\"></a>文章总结</h3><p>这个视频讲解路由中的嵌套路由，其实看似我们学的是路由，但是我们再学路由的同时，也把对应的页面的创建也学完了。再次和小伙伴们说一下，一定要动手练习，不练习你永远都学不会的。别看现在的我们学的都很简单，以后上实战的时候，就会多出很多内容来了。</p>\n<p>\\06. Nuxt3布局模板 让开发高效起来</p>\n<p>布局模板的作用就是你先定义好一个布局页面，然后提取一些通用的UI或代码到可重用的模板中，提高代码复用性，从而降低代码的复杂度，让代码重用性提高。<br>简单说就是把一些通用的UI代码代码提出来，然后放在一个模板里，使用这个模板的每个页面都拥有这些代码UI了。</p>\n<h3 id=\"创建布局模板和使用模板\"><a href=\"#创建布局模板和使用模板\" class=\"headerlink\" title=\"创建布局模板和使用模板\"></a>创建布局模板和使用模板</h3><p>比如现在新建一个文件夹<code>\\layouts</code>然后再里边写编写一个 <code>defalut.vue</code>文件，代码如下。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    我是布局模板，default.vue</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上边这段代码就相当于你创建了一个布局模板。有了这个模板后，可以在任何你想要使用的页面中用<code>&lt;NuxtLayout&gt;</code>标签为页面赋予模板中的内容。比如我们想在每个页面中都赋予这个模板中的内容，就可以在 <code>app.vue</code> 页面中使用这个标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">NuxtLayout</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;default&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">hello-world</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">NuxtPage</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">NuxtPage</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">NuxtLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样每个页面都会有布局模板中的效果，因为<code>app.vue</code>是每个页面的出口。</p>\n<h3 id=\"增加多个插槽\"><a href=\"#增加多个插槽\" class=\"headerlink\" title=\"增加多个插槽\"></a>增加多个插槽</h3><p>修改<code>default.vue</code>布局模板，增加第二个插槽，一个叫做one，一个叫做two。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    我是布局模板，default.vue</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;one&quot;</span> /&gt;</span></span><br><span class=\"line\">    ---------</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;two&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样编写，一个模板中就有了两个插槽，你可以在页面中通过<code>&lt;template #xxx&gt;</code>的形式来指定对应的模板插槽。 在<code>index.vue</code>中使用多个 <code>&lt;template&gt;</code> 配合模板实现多插槽。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">NuxtLayout</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;default&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">one</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Index Page<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/demo1&quot;</span>&gt;</span>Demo1.vue<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/goods-jspang/demo2-38&quot;</span>&gt;</span>Demo2.vue<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/parent/child&quot;</span>&gt;</span>/parent/child<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/parent/two&quot;</span>&gt;</span>/parent/two<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">two</span>&gt;</span> 我是two中的内容 <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">NuxtLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123;&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意上面的页面就精确的对应了模板的插槽。如果你作的页面都非常相似，可以好好的利用这个模板布局。<br>这个插槽也可以是多个，只要名字对应正确就可以实现。</p>\n<h3 id=\"个人小感想\"><a href=\"#个人小感想\" class=\"headerlink\" title=\"个人小感想\"></a>个人小感想</h3><p>布局模板是非常好的一个创意，布局模板再加上组件化，可以大大提高代码的维护性和复用性。所以你想写出漂亮的代码，可以从这两方面多专研。下一节我们就学习一下Nuxt3中组件的使用。</p>\n<p>\\07. Nuxt3 组件的编写</p>\n<p>现在的前端开发，都离不开组件的开发，组件开发的质量也代表着一个前端人员的开发水平。这个视频我们就看一下Nuxt3中的组件编写。</p>\n<h3 id=\"Nuxt3中创建一个组件\"><a href=\"#Nuxt3中创建一个组件\" class=\"headerlink\" title=\"Nuxt3中创建一个组件\"></a>Nuxt3中创建一个组件</h3><p>Nuxt3的所有自定义组件，必须写在<code>components</code>目录下，写在这个目录下他会自动加载到页面中，而不用我们自己不断的重复引入到每个页面中。<br>比如现在要创建一个<code>&lt;TheFooter/&gt;</code> 的组件，我们在项目跟目录建立一个文件夹<code>components</code> ，然后建立一个文件<code>TheFooter.vue</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//目录结构</span><br><span class=\"line\">-|components</span><br><span class=\"line\">----|TheFooter.vue</span><br></pre></td></tr></table></figure>\n\n<p>然后在vscode中打开文件，编写下面的代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>The Footer Box<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这段代码只有一个<code>&lt;h1&gt;</code> 标签，在页面中显示出了 <code>The Footer Box</code> 。写好组件后，你可以到任何的页面（page）中进行使用。比如在首页使用他们。 打开<code>/pages/Index.vue</code>页面，然后在最下面加入这个组件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">NuxtLayout</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;default&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">one</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Index Page<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/demo1&quot;</span>&gt;</span>Demo1.vue<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/goods-jspang/demo2-38&quot;</span>&gt;</span>Demo2.vue<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/parent/child&quot;</span>&gt;</span>/parent/child<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">NuxtLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/parent/two&quot;</span>&gt;</span>/parent/two<span class=\"tag\">&lt;/<span class=\"name\">NuxtLink</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">two</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>我是two中的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">TheFooter</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">NuxtLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123;&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这时候你到浏览器中就可以看到我们刚写的<code>&lt;TheFooter/&gt;</code> 组件起作用了。</p>\n<h3 id=\"在布局模板中使用组件\"><a href=\"#在布局模板中使用组件\" class=\"headerlink\" title=\"在布局模板中使用组件\"></a>在布局模板中使用组件</h3><p>底部，其实是每个页面都需要包括的组件，拿我们可以直接把这个组件放到<code>布局模板</code>里是非常合适的选择。在布局模板中使用组件和在普通页面中使用组件没有太大的差别，直接使用就可以了。<br>这里我们就在<code>\\layouts\\default.vue</code>布局模板中使用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    我是布局模板，default.vue</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;one&quot;</span> /&gt;</span></span><br><span class=\"line\">    ---------<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;two&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TheFooter</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这时候每个使用了<code>default.vue</code>这个布局模板的页面就会有<code>&lt;TheFooter /&gt;</code>这个组件的存在了。</p>\n<h3 id=\"组件名称的约定\"><a href=\"#组件名称的约定\" class=\"headerlink\" title=\"组件名称的约定\"></a>组件名称的约定</h3><p>我说了很多会了Nuxt3是约定大于配置的开发模式，所以我们要了解Nuxt3框架对于组件名字的约定。比如按照以前的经验，这个<code>&lt;TheFooter/&gt;</code> 组件，习惯写成 <code>&lt;the-footer /&gt;</code> 我们测试一下，如果你这样写在页面里也是生效的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/layouts/default.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    我是布局模板，default.vue</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;one&quot;</span> /&gt;</span></span><br><span class=\"line\">    ---------<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;two&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TheFooter</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">the-footer</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是个人建议，你尽量使用大写，因为这样可以区分那些是自定义组件，那些是原生的HTML标签。<br>我说了这是个人建议，但不是必须的。你也可以编写一个<code>the-header.vue</code> 的组件，然后用 <code>&lt;the-header/&gt;</code> 的形式使用这个组件也是完全可以的。例如下面的两端代码。 在<code>/components</code>文件夹下面，新建一个页面 <code>the-header.vuer</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>The Header Box<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后回到layouts文件夹下的defalut.vue下使用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">the-header</span> /&gt;</span></span><br><span class=\"line\">    我是布局模板，default.vue</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;one&quot;</span> /&gt;</span></span><br><span class=\"line\">    ---------<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;two&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TheFooter</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">the-footer</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>也是完全可以使用的。由此看来Nuxt3对于组件的使用还是非常方便的，你只要符合自己的习惯就好。</p>\n<h3 id=\"小节总结：\"><a href=\"#小节总结：\" class=\"headerlink\" title=\"小节总结：\"></a>小节总结：</h3><p>好了，这节课我们主要简单学习了Nuxt3中组件的创建和使用方法。从学习中可以总结道Nuxt3的组件使用非常方便，不用重复的不断引入，可以使用在页面中，也可以使用在布局模板中。而且对于书写的名字也有很宽泛的随意性。</p>\n<p>08.Nuxt3-多层级组件、懒加载组件的使用</p>\n<p>这节继续学习Nuxt3中的组件的使用，上节课已经对最初级的组件有了基本认识。这节课将学习二个知识。</p>\n<ul>\n<li>多层级组件的引用方法</li>\n<li>组件的懒加载</li>\n</ul>\n<h3 id=\"多层级组件的引用\"><a href=\"#多层级组件的引用\" class=\"headerlink\" title=\"多层级组件的引用\"></a>多层级组件的引用</h3><p>多层级组件看似好像很复杂，也可能是我表述的不对，其实多层级组件就是把一个组件放在一个文件夹里。在实际工作中组件会非常多，所以会把组件分门别类的放置。那这种有层级的组件，我们要如何引用那。<br>比如在<code> components</code>文件夹下面，新建一个 <code>test</code>文件夹，然后在test文件夹下面再创建一个 <code>MyButton.vue</code>文件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>MyButton<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123;&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>写完这个组件后，最关键的一步，就是在页面里如何引用到这个组件。方法很简单，只要在这个页面的前面加上文件夹的名称就可以了。我们的目录结构如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--|components</span><br><span class=\"line\">----|test</span><br><span class=\"line\">------|MyButton.vue</span><br></pre></td></tr></table></figure>\n\n<p>那引用组件的方法就是这样的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TestMyButton</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果有很多层级，我们也依照这个规律，加入前缀就可以实现多层级组件的引用了。<br>这种设计的目的是让框架可以应对复杂项目和多组件的需求，让我们的组件更加有条例。</p>\n<h3 id=\"组件的懒加载\"><a href=\"#组件的懒加载\" class=\"headerlink\" title=\"组件的懒加载\"></a>组件的懒加载</h3><p>如果在组件名前面加上<code>Lazy</code>前缀，则可以按需懒加载该组件。懒加载组件的目的是在项目打包的时候包更小。简单理解可以理解为只有在组件显示在页面上时才进行加载。 比如我们现在要做一个文本，这个文本只有在<code> show</code>的值为 true的时候才会显示。然后其他时候他不显示。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">lazyText</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;show&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这时候我们就可以使用懒加载组件。如果不总是需要该组件，这将特别有用。<br>在<code>components</code>文件夹下，新建一个 <code>LazyText.vue</code>的文件，然后编写代码如下。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Lazy Text Content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123;&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>有了组件之后，我们在新建一个页面<code>demo2.vue</code>。然后用一个按钮来控制这个组件的显示和隐藏。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">lazyText</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;show&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handleClick&quot;</span>&gt;</span>显示/隐藏<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> show = <span class=\"title function_\">ref</span>(<span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> <span class=\"title function_\">handleClick</span> = (<span class=\"params\"></span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  show.<span class=\"property\">value</span> = show.<span class=\"property\">value</span> ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后到浏览器看一下效果，这种就是懒加载组件的使用。这种组件也可以用来优化页面的打开速度，比如你有一个几百行的长列表。直接加载会给服务器造成很大压力，如果在其他内容已经完成后，过1-2秒再加载这个长列表，就会给用户很好的体验。也会减少服务器的压力。<br>组件相关的内容还是挺多的，所以我们下节课还是学习Nuxt3组件相关的知识。</p>\n<p>09.Nuxt3 模块化代码 Composable文件夹的试用</p>\n<p>在开发中我们经常会有一些通用的业务逻辑代码，需要模块化管理，这时候就可以试用<code>Composable</code> 这个文件夹来编写。比如我们常用的显示当前时间，这种常用的通用代码，就可以编写成一个单独的代码段，然后在每个页面进行使用。</p>\n<h3 id=\"Composable中创建time-ts的编写\"><a href=\"#Composable中创建time-ts的编写\" class=\"headerlink\" title=\"Composable中创建time.ts的编写\"></a>Composable中创建time.ts的编写</h3><p>新建一个文件夹<code>composables</code> 然后在文件夹里边，新建一个文件<code>time.ts</code> ，然后编写下面的代码。这段代码你一定编写过，所以就不给大家讲解里边的具体含义了。你可以直接复制这段代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"keyword\">const</span> <span class=\"title function_\">getTime</span>=(<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> timezone = <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> offset_GMT = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTimezoneOffset</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nowDate = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> today = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(nowDate + offset_GMT * <span class=\"number\">60</span> * <span class=\"number\">1000</span> + timezone * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> date = today.<span class=\"title function_\">getFullYear</span>() + <span class=\"string\">&quot;-&quot;</span> + <span class=\"title function_\">twoDigits</span>(today.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>) + <span class=\"string\">&quot;-&quot;</span> + <span class=\"title function_\">twoDigits</span>(today.<span class=\"title function_\">getDate</span>());</span><br><span class=\"line\">  <span class=\"keyword\">const</span> time = <span class=\"title function_\">twoDigits</span>(today.<span class=\"title function_\">getHours</span>()) + <span class=\"string\">&quot;:&quot;</span> + <span class=\"title function_\">twoDigits</span>(today.<span class=\"title function_\">getMinutes</span>()) + <span class=\"string\">&quot;:&quot;</span> + <span class=\"title function_\">twoDigits</span>(today.<span class=\"title function_\">getSeconds</span>());</span><br><span class=\"line\">  <span class=\"keyword\">const</span> timeString =<span class=\"string\">&#x27;当前时间：&#x27;</span> + date + <span class=\"string\">&#x27;  &#x27;</span> + time;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> timeString;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">twoDigits</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">10</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span> + val;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写完之后，如何在页面中使用呢？在<code>pages</code> 文件夹下面，新建一个<code>\\pages\\demo3.vue</code> 的文件，然后你就可以直接在这个页面中使用刚才写的获得时间的方法了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>&#123;&#123; time &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> time = <span class=\"title function_\">ref</span>(<span class=\"title function_\">getTime</span>());</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器就可以获得当前时间了。 你可以把任何你在项目中经常使用的代码，封装到这个文件夹里，实现代码的复用。这个文件夹的功能和组件很相似，只是组件是UI部分的代码复用，而这个是业务逻辑代码的复用。</p>\n<h3 id=\"composables的引入规则\"><a href=\"#composables的引入规则\" class=\"headerlink\" title=\"composables的引入规则\"></a>composables的引入规则</h3><p><code>composables</code> 文件夹的引入规则是，<strong>只有顶层文件会被引入</strong>。也就是说我们如果在这个文件下再新建一个文件夹，是不会被引入到 页面中实现代码复用的。 比如下面的文件格式就没办法引入。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--|composables</span><br><span class=\"line\">----|test</span><br><span class=\"line\">------|test.ts</span><br></pre></td></tr></table></figure>\n\n<p>但是有一种是例外的，就是我们可以写成下面的这种形式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--|composables</span><br><span class=\"line\">----|test</span><br><span class=\"line\">------|index.ts</span><br></pre></td></tr></table></figure>\n\n<p>我们这里测试一下，新建一个<code>\\test</code> 文件夹，然后在它的下面再创建一个<code>index.ts</code> 文件。写入下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">test</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;jspang.com&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后回到<code>Demo3.vue</code> 页面使用<code>test( )</code> 方法，结果是可以使用这个方法的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>&#123;&#123; time &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> time = <span class=\"title function_\">ref</span>(<span class=\"title function_\">getTime</span>());</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">test</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们在<code>\\test</code> 文件夹下面，再新建一个<code>test.ts</code> 文件，然后编写代码，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">testTwo</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是技术胖&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你会发现，这种形式是不能直接引入到页面当中进行使用的，会直接报错<code>testTwo is not defined</code>.也就是找不到这个方法。</p>\n<h3 id=\"小节总结\"><a href=\"#小节总结\" class=\"headerlink\" title=\"小节总结\"></a>小节总结</h3><p>这节我们主要学习了Nuxt3中业务逻辑代码的复用。你可以把每个页面都使用的代码放在<code>composables</code> 文件夹中，然后按需使用就好。但是也要有个度，我虽然没有依据，如果这种方法多起来，会造成页面性能的下降。毕竟每个方法都会引导页面中。</p>\n<p>\\10. Nuxt3中的数据请求</p>\n<p>昨天群里有小伙伴问我，Nuxt3中还需要使用 <code>axios</code> 吗？看来他已经急切的想从后端获取数据，然后展示在页面上了。这节我们就学习如何获取数据，Nuxt3中提供了四种方法：<code>useAsyncData</code> 、<code>useFetch</code> 、<code>useLazyFetch</code> 、<code>useLazyAsyncData</code> 。提供的四个方法，都是获取后台数据的，但是使用场景和使用方法有所不同。</p>\n<blockquote>\n<p>本节练习使用的请求URL：<span class=\"exturl\" data-url=\"aHR0cDovLzEyMS4zNi44MS42MTo4MDAwL2dldFRlbkFydGljbGVMaXN0\">http://121.36.81.61:8000/getTenArticleList</span> （可以获得我博客上的10条文章目录）</p>\n</blockquote>\n<h3 id=\"useAsyncData的使用\"><a href=\"#useAsyncData的使用\" class=\"headerlink\" title=\"useAsyncData的使用\"></a>useAsyncData的使用</h3><p>使用<code>useAsyncData</code> 异步获取数据，它可以使用在页面中，组件和插件中。我们先通过这个方法来获取一下服务端的数据。 在pages文件夹下，新建一个页面，然后编写下面的代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123;&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">useAsyncData</span>(<span class=\"string\">&quot;getList&quot;</span>, <span class=\"function\">() =&gt;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  $fetch(<span class=\"string\">&quot;http://121.36.81.61:8000/getTenArticleList&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>$fetch( )方法是nuxt3提供的内置方法，我们直接可以使用。</p>\n</blockquote>\n<p>写完后，可以打开浏览器的调试面包，在<code>终端</code>里可以看到返回值是一个对象，对象里有四个属性。</p>\n<ul>\n<li>data: 返回的数据，我们需要的服务器数据就在这个属性里。</li>\n<li>error：是否存在错误，如果存在错误，可以在这个属性中获得，返回的是一个对象。</li>\n<li>pending：这次请求的状态，返回的是布尔值。</li>\n<li>refresh：这个返回的是一个函数，可以用来刷新 handler函数返回的数据。</li>\n</ul>\n<p>这个方法的一个特点是，它可以进行很多选项的配置，但是在真实开发中，其实我们用的不多。最常用的就是<code>lazy</code> 选项，比如我们设置成<code>true</code> 就是需要数据都返回后，才会显示出来 ，简单说就是会阻塞页面。默认是false。 比如要设置lazy为true，就可以这样写。因为我们的数据太少，所以基本看不出来效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">useAsyncData</span>(</span><br><span class=\"line\">  <span class=\"string\">&quot;getList&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\">() =&gt;</span> $fetch(<span class=\"string\">&quot;http://121.36.81.61:8000/getTenArticleList&quot;</span>),</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">lazy</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>这个可配置的选项<code>option</code> 其实还是挺多的，有七项。如果想详细了解的，可以到官方去看一下，我这里给出地址。</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92My5udXh0anMub3JnL2FwaS9jb21wb3NhYmxlcy91c2UtYXN5bmMtZGF0YQ==\">https://v3.nuxtjs.org/api/composables/use-async-data</span></p>\n</blockquote>\n<p>但这些选项在开发中很少被配置，一般都使用默认值。所以Nuxt3又提供了一个简单的方法<code>useFetch</code> 。</p>\n<h3 id=\"useFetch的使用\"><a href=\"#useFetch的使用\" class=\"headerlink\" title=\"useFetch的使用\"></a>useFetch的使用</h3><p><code>useFetch</code> 可以理解为所有的都选择默认配置的<code>useAsyncData</code> 方法。比如还是上面的请求，我们就可以写成下面的形式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">useFetch</span>(<span class=\"string\">&quot;http://121.36.81.61:8000/getTenArticleList&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这样我们依然可以获取数据，当然也是可以传递参数和配置请求方法的。比如我们要设置请求方法是get，传递id是1, 就可以写成下面的形式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">useFetch</span>(<span class=\"string\">&quot;http://121.36.81.61:8000/getTenArticleList&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&quot;get&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>现在我们要把获取到的数据，显示在页面上。修改一下程序，定义变量，然后用ref来赋值就可以了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>&#123;&#123; list &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">useFetch</span>(<span class=\"string\">&quot;http://121.36.81.61:8000/getTenArticleList&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> list = <span class=\"title function_\">ref</span>(res.<span class=\"property\">data</span>.<span class=\"property\">_rawValue</span>.<span class=\"property\">data</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样就可以在页面上看到这些从后端得到的数据了。在实际开发中，我们会把这个数组循环输出，并制作一个精美的列表。<br>当我们会使用了<code>useAsyncData</code> 和 <code>useFetch</code> 这两个方法后，<code>useLazyAsyncData</code> 和<code>useLazyFetch</code> 也自然会使用了。他们只是把配置选项中的<code>Lazy</code> 设置成了true， 也就是会阻塞页面。 我就不给小伙伴们重复演示这两个方法的使用了。</p>\n<p>\\11. Nuxt3 middleware路由中间件</p>\n<p>Nuxt3提供了路由中间件的概念，你可以在整个应用使用它，目的是在导航到某一个页面之前，执行一些代码。最常见的路由守卫就可以用这个实现。</p>\n<h3 id=\"中间件的基本格式\"><a href=\"#中间件的基本格式\" class=\"headerlink\" title=\"中间件的基本格式\"></a>中间件的基本格式</h3><p>我们先写一个最简单的中间件，就是在控制台打印<code>来的页面</code>，和<code>要去的页面</code>。目的是通过最简单的实例来了解中间件的基本格式。 在项目根目录，新建一个<code>middleware</code>的文件夹，然后在文件下边新建一个文件<code>default.global.ts</code> 的文件。其中的<code>.global</code>代表这个中间件是全局的，也就是在每次跳转都会执行下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineNuxtRouteMiddleware</span>(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;要去那个页面:&quot;</span>+to.<span class=\"property\">path</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;来自那个页面:&quot;</span>+<span class=\"keyword\">from</span>.<span class=\"property\">path</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>写完之后，我们可以到浏览器看一下效果。如果一切正常，你可以看到，这时候你在每次跳转时，都会在终端中打出结果。<br>当然我们可以继续编写代码，看看<code>to</code> 和<code>from</code>里到底都有什么属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineNuxtRouteMiddleware</span>(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;要去那个页面:&quot;</span>+to.<span class=\"property\">path</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(to)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;来自那个页面:&quot;</span>+<span class=\"keyword\">from</span>.<span class=\"property\">path</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">from</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到里边的内容是非常多的，特别是<code>to</code>的时候，你可以根据这些来进行编程。</p>\n<h3 id=\"通过中间件-设置路由守卫\"><a href=\"#通过中间件-设置路由守卫\" class=\"headerlink\" title=\"通过中间件 设置路由守卫\"></a>通过中间件 设置路由守卫</h3><p>当我们了解路由中间件的基本写法后，在增加一些难度，来模仿一下路由守卫。比如我们要访问的页面是<code>http://localhost:3000/demo1</code>，现在设置路由守卫，不允许访问，而是跳回到首页。那代码就可以写成下面的样子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineNuxtRouteMiddleware</span>(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.<span class=\"property\">path</span> === <span class=\"string\">&#x27;/demo1&#x27;</span>) &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;禁止访问这个页面&#x27;</span>)</span><br><span class=\"line\">     <span class=\"title function_\">abortNavigation</span>()  <span class=\"comment\">//停止当前导航，可以使用error进行报错</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span>  <span class=\"title function_\">navigateTo</span>(<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这时候再到浏览器访问<code>demo1</code> 页面，已经不能访问了，但其他页面是可以访问的。</p>\n<h3 id=\"只对一个页面起作用\"><a href=\"#只对一个页面起作用\" class=\"headerlink\" title=\"只对一个页面起作用\"></a>只对一个页面起作用</h3><p>上面都是对所有路由起作用的，如果只想中间件对一个特殊页面起作用，也是可以的。只要去掉<code>.global</code>的后缀就是可以的。 在<code>middleware</code> 文件夹下，新建一个页面，<code>default.ts</code>，并编写下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineNuxtRouteMiddleware</span>(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello JSPang.com&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这时候它对任何页面都是不起作用的，你需要再去对应的页面里注册一下。去<code>pages</code>文件夹，新建一个文件<code>demo7.vue</code>。然后需要注册这个页面使用这个中间件，代码如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Demo7 Page<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"title function_\">definePageMeta</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">middleware</span>: [<span class=\"string\">&quot;default&quot;</span>],</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"comment\">// or middleware: &#x27;auth&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>这样就对这个页面注册了一个专属的导航中间件。<br>我刚才看了一下，网上关于Nuxt3的导航中间件的文章不多，所以希望我的这篇文章可以帮助到你。</p>\n<p>\\12. 补充-Nuxt3 安装失败的时候如何处理</p>\n<p>今天我重新安装了公司的系统，系统安装完成后，准备再安装Nuxt3新目录，发现Nuxt3在挂了代理的情况下，依然无法安装成功，会出现下面的错误。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\Demo&gt;npx nuxi init nuxt-app</span><br><span class=\"line\">npm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead.</span><br><span class=\"line\">Need to install the following packages:</span><br><span class=\"line\">  nuxi</span><br><span class=\"line\">Ok to proceed? (y) y</span><br><span class=\"line\">Nuxt CLI v3.0.0-27398533.8edd481 </span><br><span class=\"line\"> WARN  could not fetch remote https://github.com/nuxt/starter                          </span><br><span class=\"line\"> WARN  Make sure you have installed git correctly</span><br></pre></td></tr></table></figure>\n\n<p>大概意思就是你没办法连接到<code>https://github.com/nuxt/starter</code>这个网址。我以前也遇到过这种情况，只要多安装几次就可以安装成功了，但是这次安装了一个多小时，依然无法安装成功。 我相信很多小伙伴也会存在我这个问题，所以我把我最终的解决方案录制成视频，希望可以帮助到更多的小伙伴学习。</p>\n<h3 id=\"下载Nuxt3的文件包\"><a href=\"#下载Nuxt3的文件包\" class=\"headerlink\" title=\"下载Nuxt3的文件包\"></a>下载Nuxt3的文件包</h3><p>在多次尝试失败的情况下，我决定先去Github打包下载Nuxt的基本文件，然后再用yarn命令进行安装。<br>于是我再Nuxt3的官方Github上找到了这样的网址。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/nuxt/starter/tree/v3</span><br></pre></td></tr></table></figure>\n\n<p>打开网址可以看到，这个就是最简单的Nuxt3项目的目录，这时候你可以Clone下来，但我发现Clone还是会报错，意思是无法找到仓库位置。那这时候我只能用最原始的下载ZIP（Download ZIP）的方式了。<br>下载完成后，再使用yarn命令进行安装。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn install</span><br></pre></td></tr></table></figure>\n\n<p>稍等一会，就可以安装成功了。安装成功以后，再使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn dev</span><br></pre></td></tr></table></figure>\n\n<p>开启服务后，再浏览器中输入 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDozMDAwLw==\">http://localhost:3000/</span> ,就可以看到结果了。 这样我们就解决了无法用官方给出的方法安装的问题了。本视频只是个补充视频，希望可以帮助到安装失败的用户，进行安装。</p>\n<p>\\13. Nuxt3 中SEO相关的配置</p>\n<p>使用Nuxt3框架解决的主要问题就是要对搜索引擎友好，比如你到百度上搜索“技术胖”，就可以搜到我的博客（额外说一下我的博客就是用Nuxt3作的）。那为什么搜索引擎可以搜到我的网站那？这要归功于HTML中的<code>Mate</code>标签和<code>title</code> 标签。</p>\n<h3 id=\"title-和-meta-标签的作用\"><a href=\"#title-和-meta-标签的作用\" class=\"headerlink\" title=\"title 和 meta 标签的作用\"></a>title 和 meta 标签的作用</h3><p><strong>title标签</strong>：主要是为了告诉搜索引擎我们的网站标题是什么，然后搜索引擎才会根据你提供的的title给你打上tag，用户在搜索的时候才会搜索到你。 <strong>meta标签</strong>：这个标签根据name的不同有很多中，和SEO相关的主要是<code>name=description</code> 和<code>name=keywords</code> 这两种，如果不设置这两个标签，对SEO的效果就会有所影响。 所以我们在开发需要SEO的网站时，对这两个标签一定要进行设置。当然你可以用两种方法对meta标签进行设置，这节我们就讲两个方法。 1.使用useHead( )方法 2.直接在模板中使用标签</p>\n<h3 id=\"Nuxt3中的useHead-和useMeta\"><a href=\"#Nuxt3中的useHead-和useMeta\" class=\"headerlink\" title=\"Nuxt3中的useHead 和useMeta\"></a>Nuxt3中的useHead 和useMeta</h3><p>Nuxt3中提供了 <code>useHead</code>方法来设置SEO需要的内容，用它可以设置HTML中Head的全部内容，所以这也包括meta标签的内容，基本的使用方法也是很简单。 上节课我们新建了一个Nuxt3的项目，这节我们就在上节课的项目中继续。在练习的根目录中下的 page文件夹下，新建一个文件<code>demo1.vue</code>，然后使用 <code>useHead( )</code>方法来设置头部信息。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Demo8 Page<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">useHead</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">title</span>: <span class=\"string\">&quot; JSPang.com 技术胖的博客&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">viewport</span>: <span class=\"string\">&quot;width=device-width,initial-scale=1,maximum-scale=1 &quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">charset</span>: <span class=\"string\">&quot;utf-8&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">meta</span>: [</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;description&quot;</span>, <span class=\"attr\">content</span>: <span class=\"string\">&quot;技术胖的前端免费视频博客&quot;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;keywords&quot;</span>, <span class=\"attr\">content</span>: <span class=\"string\">&quot;技术胖&quot;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你这时候报错，说明你按照的不是最新的Nuxt版本，可以直接安装最新的版本，我这里就在最新的版本上使用了<code>useHead( )</code> 方法。</p>\n<h3 id=\"使用template中的标签定义Head\"><a href=\"#使用template中的标签定义Head\" class=\"headerlink\" title=\"使用template中的标签定义Head\"></a>使用template中的标签定义Head</h3><p>除了使用<code>useHead( )</code> 方法外，你还可以直接使用<code>&lt;template&gt;</code> 中的的<code>&lt;head&gt;</code>来定义SEO相关的属性。<br>我们在<code>/pages</code> 文件夹下面，新建一个<code>demo1.vue</code> 的文件，然后编写下面的代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Head</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Title</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">Title</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">:content</span>=<span class=\"string\">&quot;title&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>技术胖的博客<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> title = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;技术胖的博客&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>从代码中可以看到，我们直接使用了<code>&lt;Head&gt;</code>标签，然后在里边还可以使用<code>&lt;Title&gt;</code>标签和<code>&lt;Meta&gt;</code>标签，可以设置这两个标签后，关于SEO的设置就都可以作了。 我们使用Nuxt的意义就在于可以有很好的SEO效果，所以在你开发的时候，一定要对页面进行标题、描述和关键词的设置和编写。 好了，这节的内容就是这些了，希望对你的学习有所帮助，下面你可以自己试试这个文章中的内容了。</p>\n<p>\\14. Nuxt3中Cookie的设置</p>\n<p>在网页制作时，经常需要临时保存一些信息到Cookie中，而不是全部都保存到数据库中，这样作能减轻服务器的压力。这节就学习一下Nuxt3中的Cookie操作。</p>\n<h3 id=\"cookie的作用\"><a href=\"#cookie的作用\" class=\"headerlink\" title=\"cookie的作用\"></a>cookie的作用</h3><p>先来了解一下Cookie的作用，Cookie最常见的开发作用就是临时记录用户个人信息，比如我们登录了一个网站，然后提醒下次记住信息，下次再浏览这个网站时，就不用登录了。<br>这就是cookie起的作用，当我们登录一次后，把登录信息记录在了cookie里，但是这个记录是有时效性的，通过属性可以进行设置。比如你连续7天没登录，那cookie就过期了，再浏览这个网站就需要重新登录了。</p>\n<h3 id=\"useCookie-方法的使用\"><a href=\"#useCookie-方法的使用\" class=\"headerlink\" title=\"useCookie( )方法的使用\"></a>useCookie( )方法的使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cookie = <span class=\"title function_\">useCookie</span>(name, options)</span><br></pre></td></tr></table></figure>\n\n<p>制作登录太复杂，我们这属于是入门的教程，所以就用Cookie制作一个计数器，让你了解Cookie的使用方法。这里要使用的函数就是<code>useCookie</code> ,代码如下。<br>在pages 文件夹下，新建一个页面<code>demo3.vue</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Counter:&#123;&#123; counter &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;reset&quot;</span>&gt;</span>Reset<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;add&quot;</span>&gt;</span>Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> counter = <span class=\"title function_\">useCookie</span>(<span class=\"string\">&quot;counter&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">counter.<span class=\"property\">value</span> = counter.<span class=\"property\">value</span> || <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> <span class=\"title function_\">reset</span> = (<span class=\"params\"></span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  counter.<span class=\"property\">value</span> = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> <span class=\"title function_\">add</span> = (<span class=\"params\"></span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  counter.<span class=\"property\">value</span> = counter.<span class=\"property\">value</span> + <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这段代码的意思，我创建了一个叫做counter的Cookie值，然后取得Cookie值，放到页面上，如果没有Cookie值的时候，就初始化Counter的Cookie值为0。然后我又作了两个按钮，一个是直接将Cookie值设置为0，一个是每点击一次Cookie加1。<br>代码编写完成后，可以到浏览器中查看一下效果，你也可以按F12打开浏览器的调试模式，找到<code>Application</code> 标签，再找到<code>Cookie</code> 选项，就可以看到里边的Cookie值了，这也很好的证明我们的Cookie值设置成功了。</p>\n<h3 id=\"常用的相关属性\"><a href=\"#常用的相关属性\" class=\"headerlink\" title=\"常用的相关属性\"></a>常用的相关属性</h3><p><code>useCookie( )</code>函数，第一个参数是设置Cookie值的名字，第二个参数为选项<code>option</code>,我们接着来看有那些可选择配置的Cookie参数。（注意：我这里只说两个常用的）</p>\n<ol>\n<li>maxAge/expires</li>\n</ol>\n<p>这两个参数都是设置Cookie的有效时长的，如果两个参数你都不设置，那Cookie的值在关闭浏览器的时候将会被清空。两个参数的不同是，maxAge的值是一个数字<code>Number</code>,而expires的值是一个日期对象<code>Date object</code>.<br>比如我们希望设置Cookie的过气时间是一个小时，也就是3600秒，那我们的配置就需要这样写。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> counter = <span class=\"title function_\">useCookie</span>(<span class=\"string\">&quot;counter&quot;</span>,&#123;</span><br><span class=\"line\">  <span class=\"attr\">maxAge</span>:<span class=\"number\">3600</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>\\2. httpOnly<br>这算是一个安全设置，如果把httpOnly设置为true，可以对最常见的XSS攻击起到防范作用。</p>\n<blockquote>\n<p>什么是HttpOnly？ HttpOnly是包含在http返回头Set-Cookiew里面的一个附件的flag，所以它是后端服务器对cookie设置的一个附件属性，在生成cookie时使用HttpOnly标志有助于减轻客户端脚本访问收保护cookie的风险。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> counter = <span class=\"title function_\">useCookie</span>(<span class=\"string\">&quot;counter&quot;</span>,&#123;</span><br><span class=\"line\">  <span class=\"attr\">htttpOnly</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>\\3. secure<br>这也是一个安全设置，如果你的网址不是<code>HTTPS</code>的，并且把<code>secure</code>的值设置为true，那Cookie的值就不会传递给服务端。总的来说还是一个为了服务器安全的设置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> counter = <span class=\"title function_\">useCookie</span>(<span class=\"string\">&quot;counter&quot;</span>,&#123;</span><br><span class=\"line\">  <span class=\"attr\">secure</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这个需要配置HTTPS 所以不太好演示，这里也就不演示了。<br>其余的还有<code>domain</code> ,<code>path</code> ,<code>sameSite</code> ,<code>encode</code>,<code>decode</code> 这些属性设置，其实都跟安全有关，因为Cookie的设置确实需要考虑安全性，所以根据服务端和app的需求，尽量设置多的安全性参数。<br>欢迎小伙伴们一起学习讨论，如果你有什么好的见解，欢迎评论区留言，技术胖会尽快回复。</p>\n<p>评论/留言</p>\n<p>发表评论</p>\n<p>文章目录</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jMA==\">00.视频目录</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jMQ==\">01. Nuxt3简介和环境搭建</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jMg==\">02. Nuxt3的基础目录结构</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jMw==\">03. Nuxt3页面和约定路由的使用</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jNA==\">04. Nuxt3动态路由的使用</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jNQ==\">05.Nuxt3 嵌套路由的使用</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jNg==\">06. Nuxt3布局模板 让开发高效起来</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jNw==\">07. Nuxt3 组件的编写</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jOA==\">08.Nuxt3-多层级组件、懒加载组件的使用</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jOQ==\">09.Nuxt3 模块化代码 Composable文件夹的试用</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jMTA=\">10. Nuxt3中的数据请求</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jMTE=\">11. Nuxt3 middleware路由中间件</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jMTI=\">12. 补充-Nuxt3 安装失败的时候如何处理</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jMTM=\">13. Nuxt3 中SEO相关的配置</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9jMTQ=\">14. Nuxt3中Cookie的设置</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iZWlhbi5taWl0Lmdvdi5jbi8jL0ludGVncmF0ZWQvcmVjb3JkUXVlcnk=\">吉ICP备11005377号-3</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvODYjdG9w\">GoTop</span></p>\n",
            "tags": [
                "nuxt"
            ]
        },
        {
            "id": "http://example.com/2023/08/22/TypeScript/",
            "url": "http://example.com/2023/08/22/TypeScript/",
            "title": "TypeScript",
            "date_published": "2023-08-22T04:33:52.000Z",
            "content_html": "<h1 id=\"Ts笔记\"><a href=\"#Ts笔记\" class=\"headerlink\" title=\"Ts笔记\"></a>Ts笔记</h1><a id=\"more\"></a>\n\n<p>基础类型：Boolean、Number、String、<code>null</code>、<code>undefined</code> 以及 ES6 的 <span class=\"exturl\" data-url=\"aHR0cDovL2VzNi5ydWFueWlmZW5nLmNvbS8jZG9jcy9zeW1ib2w=\">Symbol</span> 和 ES10 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQmlnSW50\">BigInt</span>。</p>\n<h1 id=\"一、-基本类型\"><a href=\"#一、-基本类型\" class=\"headerlink\" title=\"一、 基本类型\"></a>一、 基本类型</h1><h2 id=\"1-字符串类型\"><a href=\"#1-字符串类型\" class=\"headerlink\" title=\"1.字符串类型\"></a>1.字符串类型</h2><p>字符串是使用string定义的</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通声明</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//也可以使用es6的字符串模板</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str</span>: <span class=\"built_in\">string</span> = <span class=\"string\">`dddd<span class=\"subst\">$&#123;a&#125;</span>`</span></span><br></pre></td></tr></table></figure>\n\n<p>其中 ``` 用来定义 <span class=\"exturl\" data-url=\"aHR0cDovL2VzNi5ydWFueWlmZW5nLmNvbS8jZG9jcy9zdHJpbmclMjMlRTYlQTglQTElRTYlOUQlQkYlRTUlQUQlOTclRTclQUMlQTYlRTQlQjglQjI=\">ES6 中的模板字符串</span>，<code>$&#123;expr&#125;</code> 用来在模板字符串中嵌入表达式。</p>\n<h2 id=\"2-数字类型\"><a href=\"#2-数字类型\" class=\"headerlink\" title=\"2.数字类型\"></a>2.数字类型</h2><p>支持十六进制、十进制、八进制和二进制；</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">notANumber</span>: <span class=\"built_in\">number</span> = <span class=\"title class_\">NaN</span>;<span class=\"comment\">//Nan</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>: <span class=\"built_in\">number</span> = <span class=\"number\">123</span>;<span class=\"comment\">//普通数字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">infinityNumber</span>: <span class=\"built_in\">number</span> = <span class=\"title class_\">Infinity</span>;<span class=\"comment\">//无穷大</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">decimal</span>: <span class=\"built_in\">number</span> = <span class=\"number\">6</span>;<span class=\"comment\">//十进制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">hex</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0xf00d</span>;<span class=\"comment\">//十六进制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">binary</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0b1010</span>;<span class=\"comment\">//二进制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">octal</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0o744</span>;<span class=\"comment\">//八进制s</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-布尔类型\"><a href=\"#3-布尔类型\" class=\"headerlink\" title=\"3.布尔类型\"></a>3.布尔类型</h2><p>注意，使用构造函数 <code>Boolean</code> 创造的对象<strong>不是</strong>布尔值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let createdBoolean: boolean = new Boolean(1)</span><br><span class=\"line\"></span><br><span class=\"line\">//这样会报错 应为事实上 new Boolean() 返回的是一个 Boolean 对象 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>事实上 new Boolean() 返回的是一个 Boolean 对象 需要改成</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">createdBoolean</span>: <span class=\"title class_\">Boolean</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">booleand</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span> <span class=\"comment\">//可以直接使用布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">booleand2</span>: <span class=\"built_in\">boolean</span> = <span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>) <span class=\"comment\">//也可以通过函数返回布尔值</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-空值类型\"><a href=\"#4-空值类型\" class=\"headerlink\" title=\"4.空值类型\"></a>4.空值类型</h2><p>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 <code>void</code> 表示没有任何返回值的函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">voidFn</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test void&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>void</code> 类型的用法，主要是用在我们<strong>不希望</strong>调用者关心函数返回值的情况下，比如通常的<strong>异步回调函数</strong></p>\n<p><strong>void也可以定义undefined 和 null类型</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">u</span>: <span class=\"built_in\">void</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>: <span class=\"built_in\">void</span> = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-Null和undefined类型\"><a href=\"#5-Null和undefined类型\" class=\"headerlink\" title=\"5.Null和undefined类型\"></a>5.Null和undefined类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">u</span>: <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;<span class=\"comment\">//定义undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>: <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;<span class=\"comment\">//定义null</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"void-和-undefined-和-null-最大的区别\"><a href=\"#void-和-undefined-和-null-最大的区别\" class=\"headerlink\" title=\"void 和 undefined 和 null 最大的区别\"></a>void 和 undefined 和 null 最大的区别</h3><h3 id=\"与-void-的区别是，undefined-和-null-是所有类型的子类型。也就是说-undefined-类型的变量，可以赋值给-string-类型的变量：\"><a href=\"#与-void-的区别是，undefined-和-null-是所有类型的子类型。也就是说-undefined-类型的变量，可以赋值给-string-类型的变量：\" class=\"headerlink\" title=\"与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 string 类型的变量：\"></a>与 <code>void</code> 的区别是，<code>undefined</code> 和 <code>null</code> 是所有类型的子类型。也就是说 <code>undefined</code> 类型的变量，可以赋值给 string 类型的变量：</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这样写会报错 void类型不可以分给其他类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">test</span>: <span class=\"built_in\">void</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num2</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">num2 = test</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这样是没问题的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">test</span>: <span class=\"literal\">null</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num2</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">num2 = test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者这样的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">test</span>: <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num2</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">num2 = test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIPS-注意：\"><a href=\"#TIPS-注意：\" class=\"headerlink\" title=\"TIPS 注意：\"></a>TIPS 注意：</h2><p>如果你配置了tsconfig.json 开启了严格模式</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;compilerOptions&quot;</span>:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&quot;strict&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"null-不能-赋予-void-类型\"><a href=\"#null-不能-赋予-void-类型\" class=\"headerlink\" title=\" *null 不能 赋予 void 类型*\"></a><img data-src=\"https://img-blog.csdnimg.cn/28e31a2f9fc44427a067e29ccee485bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"> <em><strong>*null 不能 赋予 void 类型*</strong></em></h3><blockquote>\n<p>摘自  <span class=\"exturl\" data-url=\"aHR0cHM6Ly94aWFvbWFuLmJsb2cuY3Nkbi5uZXQvYXJ0aWNsZS9kZXRhaWxzLzEyMjE2NzE1NQ==\">学习TypeScrip1（基础类型）_小满 typescript_小满zs的博客-CSDN博客</span></p>\n</blockquote>\n<h1 id=\"二、任意类型\"><a href=\"#二、任意类型\" class=\"headerlink\" title=\"二、任意类型\"></a>二、任意类型</h1><h2 id=\"Any-类型-和-unknown-顶级类型\"><a href=\"#Any-类型-和-unknown-顶级类型\" class=\"headerlink\" title=\"Any 类型 和 unknown 顶级类型\"></a>Any 类型 和 unknown 顶级类型</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodejs 环境执行ts</span><br><span class=\"line\">npm i @types/node --save-dev （node环境支持的依赖必装）</span><br><span class=\"line\">npm i ts-node --g</span><br></pre></td></tr></table></figure>\n\n<p>1.没有强制限定哪种类型，随时切换类型都可以 我们可以对 any 进行任何操作，不需要检查类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">anys</span>:<span class=\"built_in\">any</span> = <span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\">anys = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">anys = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>2.声明变量的时候没有指定任意类型默认为any</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> anys;</span><br><span class=\"line\"></span><br><span class=\"line\">anys = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">anys = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>3.弊端如果使用any 就失去了TS类型检测的作用</p>\n<p>4.TypeScript 3.0中引入的 unknown 类型也被认为是 top type ，但它更安全。与 any 一样，所有类型都可以分配给unknown</p>\n<p>unknow unknow类型比any更加严格当你要使用any 的时候可以尝试使用unknow</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//unknown 可以定义任何类型的值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">value</span>: <span class=\"built_in\">unknown</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">value = <span class=\"literal\">true</span>;             <span class=\"comment\">// OK</span></span><br><span class=\"line\"></span><br><span class=\"line\">value = <span class=\"number\">42</span>;               <span class=\"comment\">// OK</span></span><br><span class=\"line\"></span><br><span class=\"line\">value = <span class=\"string\">&quot;Hello World&quot;</span>;    <span class=\"comment\">// OK</span></span><br><span class=\"line\"></span><br><span class=\"line\">value = [];               <span class=\"comment\">// OK</span></span><br><span class=\"line\"></span><br><span class=\"line\">value = &#123;&#125;;               <span class=\"comment\">// OK</span></span><br><span class=\"line\"></span><br><span class=\"line\">value = <span class=\"literal\">null</span>;             <span class=\"comment\">// OK</span></span><br><span class=\"line\"></span><br><span class=\"line\">value = <span class=\"literal\">undefined</span>;        <span class=\"comment\">// OK</span></span><br><span class=\"line\"></span><br><span class=\"line\">value = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;type&quot;</span>);   <span class=\"comment\">// OK</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这样写会报错unknow类型不能作为子类型只能作为父类型 any可以作为父类型和子类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//unknown类型不能赋值给其他类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">names</span>:<span class=\"built_in\">unknown</span> = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">names2</span>:<span class=\"built_in\">string</span> = names</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这样就没问题 any类型是可以的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">names</span>:<span class=\"built_in\">any</span> = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">names2</span>:<span class=\"built_in\">string</span> = names   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//unknown可赋值对象只有unknown 和 any</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">bbb</span>:<span class=\"built_in\">unknown</span> = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">aaa</span>:<span class=\"built_in\">any</span>= <span class=\"string\">&#x27;456&#x27;</span></span><br><span class=\"line\">aaa = bbb</span><br></pre></td></tr></table></figure>\n\n<p>区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果是any类型在对象没有这个属性的时候还在获取是不会报错的</span><br><span class=\"line\">let obj:any = &#123;b:1&#125;</span><br><span class=\"line\">obj.a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">如果是unknow 是不能调用属性和方法</span><br><span class=\"line\">let obj:unknown = &#123;b:1,ccc:():number=&gt;213&#125;</span><br><span class=\"line\">obj.b</span><br><span class=\"line\">obj.ccc()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>摘自 <span class=\"exturl\" data-url=\"aHR0cHM6Ly94aWFvbWFuLmJsb2cuY3Nkbi5uZXQvYXJ0aWNsZS9kZXRhaWxzLzEyMjE3MDYyNA==\">学习TypeScrip2（任意类型）_小满zs的博客-CSDN博客</span></p>\n</blockquote>\n<h1 id=\"三、-接口和对象类型\"><a href=\"#三、-接口和对象类型\" class=\"headerlink\" title=\"三、 接口和对象类型\"></a>三、 接口和对象类型</h1><h2 id=\"对象的类型\"><a href=\"#对象的类型\" class=\"headerlink\" title=\"对象的类型\"></a>对象的类型</h2><p>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/ZnJvbT1wY19ibG9nX2hpZ2hsaWdodCZxPXR5cGVzY3JpcHQ=\">typescript</span>中，我们定义对象的方式要用关键字<strong>interface</strong>（接口），我的理解是使用<strong>interface</strong>来定义一种约束，让数据的结构满足约束的格式。定义方式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这样写是会报错的 因为我们在person定义了a，b但是对象里面缺少b属性</span><br><span class=\"line\">//使用接口约束的时候不能多一个属性也不能少一个属性</span><br><span class=\"line\">//必须与接口保持一致</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    b:string,</span><br><span class=\"line\">    a:string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person:Person  = &#123;</span><br><span class=\"line\">    a:&quot;213&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">// 重名interface  可以合并</span><br><span class=\"line\">interface A&#123;name:string&#125;</span><br><span class=\"line\">interface A&#123;age:number&#125;</span><br><span class=\"line\">var x:A=&#123;name:&#x27;xx&#x27;,age:20&#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">//继承</span><br><span class=\"line\">interface A&#123;</span><br><span class=\"line\">    name:string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface B extends A&#123;</span><br><span class=\"line\">    age:number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let obj:B = &#123;</span><br><span class=\"line\">    age:18,</span><br><span class=\"line\">    name:&quot;string&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"可选属性-使用-操作符\"><a href=\"#可选属性-使用-操作符\" class=\"headerlink\" title=\"可选属性 使用?操作符\"></a>可选属性 使用?操作符</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可选属性的含义是该属性可以不存在</span><br><span class=\"line\"></span><br><span class=\"line\">//所以说这样写也是没问题的</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">  b?:string,</span><br><span class=\"line\">    a:string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person:Person  = &#123;</span><br><span class=\"line\">    a:&quot;213&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"任意属性-propName-string\"><a href=\"#任意属性-propName-string\" class=\"headerlink\" title=\"任意属性 [propName: string]\"></a>任意属性 [propName: string]</h2><p>需要注意的是，<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在这个例子当中我们看到接口中并没有定义C但是并没有报错</span><br><span class=\"line\">//应为我们定义了[propName: string]: any;</span><br><span class=\"line\">//允许添加新的任意属性</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    b?:string,</span><br><span class=\"line\"></span><br><span class=\"line\">    a:string,</span><br><span class=\"line\">     // 注意当key是string的时候，那么确定属性和可选属性的类型必须是它的属性的子集。</span><br><span class=\"line\">    // eg：[key: string]: string | number;</span><br><span class=\"line\">    [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person:Person  = &#123;</span><br><span class=\"line\">    a:&quot;213&quot;,</span><br><span class=\"line\">    c:&quot;123&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"只读属性-readonly\"><a href=\"#只读属性-readonly\" class=\"headerlink\" title=\"只读属性 readonly\"></a>只读属性 readonly</h2><p>readonly 只读属性是不允许被赋值的只能读取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这样写是会报错的</span><br><span class=\"line\">//应为a是只读的不允许重新赋值</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    b?: string,</span><br><span class=\"line\"></span><br><span class=\"line\">    readonly a: string,</span><br><span class=\"line\"></span><br><span class=\"line\">    [propName: string]: any;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person: Person = &#123;</span><br><span class=\"line\">    a: &quot;213&quot;,</span><br><span class=\"line\">    c: &quot;123&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">person.a = 123</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加函数\"><a href=\"#添加函数\" class=\"headerlink\" title=\"添加函数\"></a>添加函数</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    b?: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> <span class=\"attr\">a</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    <span class=\"attr\">cb</span>:<span class=\"function\">()=&gt;</span><span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">person</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">&quot;213&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"string\">&quot;123&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">cb</span>:<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四、数组\"><a href=\"#四、数组\" class=\"headerlink\" title=\"四、数组\"></a>四、数组</h1><p>1.类型[ ] </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//类型加中括号</span><br><span class=\"line\">let arr:number[] = [123]</span><br><span class=\"line\">//这样会报错定义了数字类型出现字符串是不允许的</span><br><span class=\"line\">let arr:number[] = [1,2,3,&#x27;1&#x27;]</span><br><span class=\"line\">//操作方法添加也是不允许的</span><br><span class=\"line\"></span><br><span class=\"line\">let arr:number[] = [1,2,3,]</span><br><span class=\"line\">arr.unshift(&#x27;1&#x27;)</span><br><span class=\"line\">var arr: number[] = [1, 2, 3]; //数字类型的数组</span><br><span class=\"line\">var arr2: string[] = [&quot;1&quot;, &quot;2&quot;]; //字符串类型的数组</span><br><span class=\"line\">var arr3: any[] = [1, &quot;2&quot;, true]; //任意类型的数组</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组泛型\"><a href=\"#数组泛型\" class=\"headerlink\" title=\"数组泛型\"></a>数组泛型</h2><p>规则 Array&lt;类型&gt;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr:Array&lt;number&gt; = [1,2,3,4,5]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用接口表示数组\"><a href=\"#用接口表示数组\" class=\"headerlink\" title=\"用接口表示数组\"></a>用接口表示数组</h2><p>一般用来描述类数组 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface NumberArray &#123;</span><br><span class=\"line\">    [index: number]: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let fibonacci: NumberArray = [1, 1, 2, 3, 5];</span><br><span class=\"line\"></span><br><span class=\"line\">//表示：只要索引的类型是数字时，那么值的类型必须是数字。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h2><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let data:number[][] = <span class=\"string\">[[1,2], [3,4]]</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"arguments类数组\"><a href=\"#arguments类数组\" class=\"headerlink\" title=\"arguments类数组\"></a>arguments类数组</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Arr(...args:any): void &#123;</span><br><span class=\"line\">    console.log(arguments)</span><br><span class=\"line\">  //错误的arguments 是类数组不能这样定义</span><br><span class=\"line\">    let arr:number[] = arguments</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Arr(111, 222, 333)</span><br><span class=\"line\">function Arr(...args:any): void &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(arguments) </span><br><span class=\"line\"></span><br><span class=\"line\">    //ts内置对象IArguments 定义</span><br><span class=\"line\">    let arr:IArguments = arguments</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Arr(111, 222, 333)</span><br><span class=\"line\">其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是：</span><br><span class=\"line\"></span><br><span class=\"line\">interface IArguments &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">[index: number]: any;</span><br><span class=\"line\"></span><br><span class=\"line\">length: number;</span><br><span class=\"line\"></span><br><span class=\"line\">callee: Function;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"any-在数组中的应用\"><a href=\"#any-在数组中的应用\" class=\"headerlink\" title=\"any 在数组中的应用\"></a>any 在数组中的应用</h2><p>一个常见的例子数组中可以存在任意类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let list: any[] = [&#x27;test&#x27;, 1, [],&#123;a:1&#125;]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>五、 函数扩展</p>\n<h1 id=\"五、函数的类型\"><a href=\"#五、函数的类型\" class=\"headerlink\" title=\"五、函数的类型\"></a>五、函数的类型</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意，参数不能多传，也不能少传 必须按照约定的类型来</span><br><span class=\"line\">const fn = (name: string, age:number): string =&gt; &#123;</span><br><span class=\"line\">    return name + age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(&#x27;张三&#x27;,18)</span><br></pre></td></tr></table></figure>\n\n<p>函数的可选参数?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过?表示该参数为可选参数</span><br><span class=\"line\">const fn = (name: string, age?:number): string =&gt; &#123;</span><br><span class=\"line\">    return name + age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(&#x27;张三&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>函数参数的默认值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fn = (name: string = &quot;我是默认值&quot;): string =&gt; &#123;</span><br><span class=\"line\">    return name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n\n<p>接口定义函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义参数 num 和 num2  ：后面定义返回值的类型</span><br><span class=\"line\">interface Add &#123;</span><br><span class=\"line\">    (num:  number, num2: number): number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const fn: Add = (num: number, num2: number): number =&gt; &#123;</span><br><span class=\"line\">    return num + num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(5, 5)</span><br><span class=\"line\">interface User&#123;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getUserInfo(user: User): User &#123;</span><br><span class=\"line\">  return user</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义剩余参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fn = (array:number[],...items:any[]):any[] =&gt; &#123;</span><br><span class=\"line\">       console.log(array,items)</span><br><span class=\"line\">       return items</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let a:number[] = [1,2,3]</span><br><span class=\"line\">fn(a,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>函数重载</p>\n<p>重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</p>\n<p>如果参数类型不同，则参数类型应设置为 <strong>any</strong>。</p>\n<p>参数数量不同你可以将不同的参数设置为可选。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">params: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">void</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">params: <span class=\"built_in\">string</span>, params2: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">void</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">params: <span class=\"built_in\">any</span>, params2?: <span class=\"built_in\">any</span></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(params)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(params2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"string\">&#x27;123&#x27;</span>,<span class=\"number\">456</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"六、联合类型\"><a href=\"#六、联合类型\" class=\"headerlink\" title=\"六、联合类型\"></a>六、联合类型</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//例如我们的手机号通常是13XXXXXXX 为数字类型 这时候产品说需要支持座机</span><br><span class=\"line\">//所以我们就可以使用联合类型支持座机字符串</span><br><span class=\"line\">let myPhone: number | string  = &#x27;010-820&#x27;</span><br><span class=\"line\">//这样写是会报错的应为我们的联合类型只有数字和字符串并没有布尔值</span><br><span class=\"line\">let myPhone: number | string  = true</span><br></pre></td></tr></table></figure>\n\n<p>函数使用联合类型、</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fn = (something:number | boolean):boolean =&gt; &#123;</span><br><span class=\"line\">     return !!something</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"交叉类型\"><a href=\"#交叉类型\" class=\"headerlink\" title=\"交叉类型\"></a>交叉类型</h3><p>多种类型的集合，联合对象将具有所联合类型的所有成员</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface People &#123;</span><br><span class=\"line\">  age: number,</span><br><span class=\"line\">  height： number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">interface Man&#123;</span><br><span class=\"line\">  sex: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const xiaoman = (man: People &amp; Man) =&gt; &#123;</span><br><span class=\"line\">  console.log(man.age)</span><br><span class=\"line\">  console.log(man.height)</span><br><span class=\"line\">  console.log(man.sex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xiaoman(&#123;age: 18,height: 180,sex: &#x27;male&#x27;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：　　值 as 类型　　或　　&lt;类型&gt;值  value as string  &lt;string&gt;value</span><br><span class=\"line\">interface A &#123;</span><br><span class=\"line\">       run: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface B &#123;</span><br><span class=\"line\">       build: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const fn = (type: A | B): string =&gt; &#123;</span><br><span class=\"line\">       return type.run</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//这样写是有警告的应为B的接口上面是没有定义run这个属性的</span><br><span class=\"line\">interface A &#123;</span><br><span class=\"line\">       run: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface B &#123;</span><br><span class=\"line\">       build: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const fn = (type: A | B): string =&gt; &#123;</span><br><span class=\"line\">       return (type as A).run</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//可以使用类型断言来推断他传入的是A接口的值</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误：</p>\n<h3 id=\"使用any临时断言\"><a href=\"#使用any临时断言\" class=\"headerlink\" title=\"使用any临时断言\"></a>使用any临时断言</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.abc = 123</span><br><span class=\"line\">//这样写会报错因为window没有abc这个东西</span><br><span class=\"line\">(window as any).abc = 123</span><br><span class=\"line\">//可以使用any临时断言在 any 类型的变量上，访问任何属性都是允许的。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"as-const\"><a href=\"#as-const\" class=\"headerlink\" title=\"as const\"></a><code>as const</code></h3><p>是对字面值的<strong>断言</strong>，与const直接定义常量是有区别的</p>\n<p>如果是普通类型跟直接const 声明是一样的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const names = &#x27;小满&#x27;</span><br><span class=\"line\">names = &#x27;aa&#x27; //无法修改</span><br><span class=\"line\">let names2 = &#x27;小满&#x27; as const</span><br><span class=\"line\">names2 = &#x27;aa&#x27; //无法修改</span><br><span class=\"line\">// 数组</span><br><span class=\"line\">let a1 = [10, 20] as const;</span><br><span class=\"line\">const a2 = [10, 20];</span><br><span class=\"line\">a1.unshift(30); // 错误，此时已经断言字面量为[10, 20],数据无法做任何修改</span><br><span class=\"line\"></span><br><span class=\"line\">a2.unshift(30); // 通过，没有修改指针</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型断言是不具影响力的\"><a href=\"#类型断言是不具影响力的\" class=\"headerlink\" title=\"类型断言是不具影响力的\"></a>类型断言是不具影响力的</h3><p>在下面的例子中，将 something 断言为 boolean 虽然可以通过编译，但是并没有什么用 并不会影响结果, 因为编译过程中会删除类型断言</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toBoolean(something: any): boolean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return something as boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">toBoolean(1);</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回值为 1</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"七、内置对象-dom-bom\"><a href=\"#七、内置对象-dom-bom\" class=\"headerlink\" title=\"七、内置对象 dom bom\"></a>七、内置对象 dom bom</h1><p>JavaScript 中有很多<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHM=\">内置对象</span>，它们可以直接在 TypeScript 中当做定义好了的类型。</p>\n<h2 id=\"ECMAScript-的内置对象\"><a href=\"#ECMAScript-的内置对象\" class=\"headerlink\" title=\"ECMAScript 的内置对象\"></a>ECMAScript 的内置对象</h2><p><strong><code>Boolean</code>、Number、<code>string</code>、<code>RegExp</code>、<code>Date</code>、<code>Error</code></strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"title class_\">Boolean</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>: <span class=\"title class_\">Number</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">s</span>: <span class=\"title class_\">String</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;哔哩哔哩关注小满zs&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">d</span>: <span class=\"title class_\">Date</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">r</span>: <span class=\"title class_\">RegExp</span> = <span class=\"regexp\">/^1/</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">e</span>: <span class=\"title class_\">Error</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;error!&quot;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DOM-和-BOM-的内置对象\"><a href=\"#DOM-和-BOM-的内置对象\" class=\"headerlink\" title=\"DOM 和 BOM 的内置对象\"></a>DOM 和 BOM 的内置对象</h2><p><strong><code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code> 等</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let <span class=\"selector-tag\">body</span>: HTMLElement = document.body;</span><br><span class=\"line\">let allDiv: NodeList = document.<span class=\"built_in\">querySelectorAll</span>(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">//读取div 这种需要类型断言 或者加个判断应为读不到返回null</span><br><span class=\"line\"></span><br><span class=\"line\">let div:HTMLElement = document.<span class=\"built_in\">querySelector</span>(<span class=\"string\">&#x27;div&#x27;</span>) as HTMLDivElement</span><br><span class=\"line\">document.<span class=\"built_in\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, function (e: MouseEvent) &#123;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//dom元素的映射表</span><br><span class=\"line\">interface HTMLElementTagNameMap &#123;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">a</span>&quot;: HTMLAnchorElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">abbr</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">address</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;applet&quot;: HTMLAppletElement;</span><br><span class=\"line\">    &quot;area&quot;: HTMLAreaElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">article</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">aside</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">audio</span>&quot;: HTMLAudioElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">b</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;base&quot;: HTMLBaseElement;</span><br><span class=\"line\">    &quot;bdi&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;bdo&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">blockquote</span>&quot;: HTMLQuoteElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">body</span>&quot;: HTMLBodyElement;</span><br><span class=\"line\">    &quot;br&quot;: HTMLBRElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">button</span>&quot;: HTMLButtonElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">canvas</span>&quot;: HTMLCanvasElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">caption</span>&quot;: HTMLTableCaptionElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">cite</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">code</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;col&quot;: HTMLTableColElement;</span><br><span class=\"line\">    &quot;colgroup&quot;: HTMLTableColElement;</span><br><span class=\"line\">    &quot;data&quot;: HTMLDataElement;</span><br><span class=\"line\">    &quot;datalist&quot;: HTMLDataListElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">dd</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">del</span>&quot;: HTMLModElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">details</span>&quot;: HTMLDetailsElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">dfn</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;dialog&quot;: HTMLDialogElement;</span><br><span class=\"line\">    &quot;dir&quot;: HTMLDirectoryElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">div</span>&quot;: HTMLDivElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">dl</span>&quot;: HTMLDListElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">dt</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">em</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;embed&quot;: HTMLEmbedElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">fieldset</span>&quot;: HTMLFieldSetElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">figcaption</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">figure</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"attribute\">font</span>&quot;: HTMLFontElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">footer</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">form</span>&quot;: HTMLFormElement;</span><br><span class=\"line\">    &quot;frame&quot;: HTMLFrameElement;</span><br><span class=\"line\">    &quot;frameset&quot;: HTMLFrameSetElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">h1</span>&quot;: HTMLHeadingElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">h2</span>&quot;: HTMLHeadingElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">h3</span>&quot;: HTMLHeadingElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">h4</span>&quot;: HTMLHeadingElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">h5</span>&quot;: HTMLHeadingElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">h6</span>&quot;: HTMLHeadingElement;</span><br><span class=\"line\">    &quot;head&quot;: HTMLHeadElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">header</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">hgroup</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;hr&quot;: HTMLHRElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">html</span>&quot;: HTMLHtmlElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">i</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">iframe</span>&quot;: HTMLIFrameElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">img</span>&quot;: HTMLImageElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">input</span>&quot;: HTMLInputElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">ins</span>&quot;: HTMLModElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">kbd</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">label</span>&quot;: HTMLLabelElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">legend</span>&quot;: HTMLLegendElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">li</span>&quot;: HTMLLIElement;</span><br><span class=\"line\">    &quot;link&quot;: HTMLLinkElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">main</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;map&quot;: HTMLMapElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">mark</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;marquee&quot;: HTMLMarqueeElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">menu</span>&quot;: HTMLMenuElement;</span><br><span class=\"line\">    &quot;meta&quot;: HTMLMetaElement;</span><br><span class=\"line\">    &quot;meter&quot;: HTMLMeterElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">nav</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;noscript&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">object</span>&quot;: HTMLObjectElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">ol</span>&quot;: HTMLOListElement;</span><br><span class=\"line\">    &quot;optgroup&quot;: HTMLOptGroupElement;</span><br><span class=\"line\">    &quot;option&quot;: HTMLOptionElement;</span><br><span class=\"line\">    &quot;output&quot;: HTMLOutputElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">p</span>&quot;: HTMLParagraphElement;</span><br><span class=\"line\">    &quot;param&quot;: HTMLParamElement;</span><br><span class=\"line\">    &quot;picture&quot;: HTMLPictureElement;</span><br><span class=\"line\">    &quot;pre&quot;: HTMLPreElement;</span><br><span class=\"line\">    &quot;progress&quot;: HTMLProgressElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">q</span>&quot;: HTMLQuoteElement;</span><br><span class=\"line\">    &quot;rp&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;rt&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;ruby&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;s&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">samp</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;script&quot;: HTMLScriptElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">section</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;select&quot;: HTMLSelectElement;</span><br><span class=\"line\">    &quot;slot&quot;: HTMLSlotElement;</span><br><span class=\"line\">    &quot;small&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;source&quot;: HTMLSourceElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">span</span>&quot;: HTMLSpanElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">strong</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;style&quot;: HTMLStyleElement;</span><br><span class=\"line\">    &quot;sub&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">summary</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">sup</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">table</span>&quot;: HTMLTableElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">tbody</span>&quot;: HTMLTableSectionElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">td</span>&quot;: HTMLTableDataCellElement;</span><br><span class=\"line\">    &quot;template&quot;: HTMLTemplateElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">textarea</span>&quot;: HTMLTextAreaElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">tfoot</span>&quot;: HTMLTableSectionElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">th</span>&quot;: HTMLTableHeaderCellElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">thead</span>&quot;: HTMLTableSectionElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">time</span>&quot;: HTMLTimeElement;</span><br><span class=\"line\">    &quot;title&quot;: HTMLTitleElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">tr</span>&quot;: HTMLTableRowElement;</span><br><span class=\"line\">    &quot;track&quot;: HTMLTrackElement;</span><br><span class=\"line\">    &quot;u&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">ul</span>&quot;: HTMLUListElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">var</span>&quot;: HTMLElement;</span><br><span class=\"line\">    &quot;<span class=\"selector-tag\">video</span>&quot;: HTMLVideoElement;</span><br><span class=\"line\">    &quot;wbr&quot;: HTMLElement;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"定义Promise\"><a href=\"#定义Promise\" class=\"headerlink\" title=\"定义Promise\"></a>定义Promise</h1><p>如果我们不指定返回的类型TS是推断不出来返回的是什么类型</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/1027f6bee3a84aa58ea4d349a50f48e0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p>指定返回的类型</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/b4e56fb2426e4502a043d43642312cd8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"> 函数定义返回promise 语法规则:Promise<T> 类型 </p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/68d399594565403cb757e7000b1e9a4b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function promise():Promise&lt;number&gt;&#123;</span><br><span class=\"line\">   return new Promise&lt;number&gt;((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">       resolve(1)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">promise().then(res=&gt;&#123;</span><br><span class=\"line\">    console.log(res)</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"八、-class\"><a href=\"#八、-class\" class=\"headerlink\" title=\"八、 class\"></a>八、 class</h1><p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过<code>class</code>关键字，可以定义类。基本上，ES6的<code>class</code>可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的<code>class</code>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用ES6的“类”改写，就是下面这样。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    run () &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-ok！那我们在TS-是如何定义类的如下图\"><a href=\"#1-ok！那我们在TS-是如何定义类的如下图\" class=\"headerlink\" title=\"1.ok！那我们在TS 是如何定义类的如下图\"></a>1.ok！那我们在TS 是如何定义类的如下图</h2><p><img data-src=\"https://img-blog.csdnimg.cn/3acdefe6f1074aaea36bd7c9e06fe4d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p>在TypeScript是不允许直接在constructor 定义变量的 需要在constructor上面先声明</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/a5f9ca6e2bcc48738d59b816acf79b52.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p>这样引发了第二个问题你如果了定义了变量不用 也会报错 通常是给个默认值 或者 进行赋值</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/48c2c425bc1c47599557a8103ff30b83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/47d53797b01349d684bb973fd073673c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"> 恭喜你已经学会了在class中 如何定义变量</p>\n<h2 id=\"2-类的修饰符\"><a href=\"#2-类的修饰符\" class=\"headerlink\" title=\"2.类的修饰符\"></a>2.类的修饰符</h2><h3 id=\"总共有三个-public-private-protected\"><a href=\"#总共有三个-public-private-protected\" class=\"headerlink\" title=\"总共有三个 public private protected\"></a>总共有三个 public private protected</h3><p><img data-src=\"https://img-blog.csdnimg.cn/2eaca794296640b183cdcdddb221ee68.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p>使用public 修饰符 可以让你定义的变量 内部访问 也可以外部访问 如果不写默认就是public</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/a4a2499d7600474dac78dc9a3af3afa2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\">使用 private 修饰符 代表定义的变量私有的只能在内部访问 不能在外部访问</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/d64333f651ec4a799ca665cae11d0d72.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/5ac43616ad77488284bae4205db3f6c8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"> 使用 protected 修饰符 代表定义的变量私有的只能在内部和继承的子类中访问 不能在外部访问</p>\n<p>TIPS:代码</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">age</span>:<span class=\"built_in\">number</span> </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"attr\">some</span>:<span class=\"built_in\">any</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (<span class=\"attr\">name</span>:<span class=\"built_in\">string</span>,<span class=\"attr\">ages</span>:<span class=\"built_in\">number</span>,<span class=\"attr\">some</span>:<span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = ages</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">some</span> = some</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    run () &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">some</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    create () &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">some</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> xiaoman = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;小满&#x27;</span>,<span class=\"number\">18</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> man = <span class=\"keyword\">new</span> <span class=\"title class_\">Man</span>()</span><br><span class=\"line\">man.<span class=\"property\">some</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-static-静态属性-和-静态方法\"><a href=\"#3-static-静态属性-和-静态方法\" class=\"headerlink\" title=\"3. static 静态属性 和 静态方法\"></a>3. static 静态属性 和 静态方法</h2><p><img data-src=\"https://img-blog.csdnimg.cn/dd66b961270146ada29a9525d750feeb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p>我们用static 定义的属性 不可以通过this 去访问 只能通过类名去调用</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/0e398a1e6ad7452a8d607821e3969bdf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p>static 静态函数 同样也是不能通过this 去调用 也是通过类名去调用</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/a6bdc54f0e9140ebafdcb6b0568c164a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p>需注意： 如果两个函数都是static 静态的是可以通过this互相调用</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/77712c790646400ba121cb061994a762.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<h2 id=\"4-interface-定义-类\"><a href=\"#4-interface-定义-类\" class=\"headerlink\" title=\"4.interface 定义 类\"></a>4.interface 定义 类</h2><p><img data-src=\"https://img-blog.csdnimg.cn/fe05924183054a489cf8613feb579be7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p> ts interface 定义类 使用关键字 implements  后面跟interface的名字多个用逗号隔开 继承还是用extends</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PersonClass</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"attr\">type</span>: <span class=\"built_in\">boolean</span>): <span class=\"built_in\">boolean</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PersonClass2</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">set</span>():<span class=\"built_in\">void</span>,</span><br><span class=\"line\">    <span class=\"attr\">asd</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">A</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PersonClass</span>,<span class=\"title class_\">PersonClass2</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">asd</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">asd</span> = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"><span class=\"keyword\">type</span>:<span class=\"built_in\">boolean</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">type</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    set () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-抽象类\"><a href=\"#5-抽象类\" class=\"headerlink\" title=\"5.抽象类\"></a>5.抽象类</h2><p>应用场景如果你写的类实例化之后毫无用处此时我可以把他定义为抽象类</p>\n<p>或者你也可以把他作为一个基类-&gt; 通过继承一个派生类去实现基类的一些方法</p>\n<p>我们看例子</p>\n<p>下面这段代码会报错抽象类无法被实例化</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> name:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> A()</span><br></pre></td></tr></table></figure>\n\n<p>例子2</p>\n<p>我们在A类定义了 getName 抽象方法但为实现</p>\n<p>我们B类实现了A定义的抽象方法 如不实现就不报错 <strong>我们定义的抽象方法必须在派生类实现</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">   <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"title function_\">print</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"keyword\">abstract</span> <span class=\"title function_\">getName</span>(): <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">A</span> &#123;</span><br><span class=\"line\">   <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>(<span class=\"string\">&#x27;小满&#x27;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"title function_\">getName</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title function_\">B</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b.<span class=\"title function_\">getName</span>());</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"九、元组\"><a href=\"#九、元组\" class=\"headerlink\" title=\"九、元组\"></a>九、元组</h1><p>如果需要一个固定大小的不同类型值的集合，我们需要使用元组。 </p>\n<h3 id=\"元组就是数组的变种\"><a href=\"#元组就是数组的变种\" class=\"headerlink\" title=\"元组就是数组的变种\"></a>元组就是数组的变种</h3><p><strong>元组（Tuple）是固定数量的不同类型的元素的组合</strong>。</p>\n<p>元组与集合的不同之处在于，元组中的元素类型可以是不同的，而且数量固定。元组的好处在于可以把多个元素作为一个单元传递。如果一个方法需要返回多个值，可以把这多个值作为元组返回，而不需要创建额外的类来表示。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>:[<span class=\"built_in\">number</span>,<span class=\"built_in\">string</span>] = [<span class=\"number\">1</span>,<span class=\"string\">&#x27;string&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr2</span>: <span class=\"keyword\">readonly</span> [<span class=\"built_in\">number</span>,<span class=\"built_in\">boolean</span>,<span class=\"built_in\">string</span>,<span class=\"literal\">undefined</span>] = [<span class=\"number\">1</span>,<span class=\"literal\">true</span>,<span class=\"string\">&#x27;sring&#x27;</span>,<span class=\"literal\">undefined</span>]</span><br></pre></td></tr></table></figure>\n\n<p>当赋值或访问一个已知索引的元素时，会得到正确的类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr:[number,string] = [1,&#x27;string&#x27;]</span><br><span class=\"line\">arr[0].length //error</span><br><span class=\"line\">arr[1].length //success</span><br><span class=\"line\">//数字是没有length 的</span><br></pre></td></tr></table></figure>\n\n<p>元组类型还可以支持自定义名称和变为可选的</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:[<span class=\"attr\">x</span>:<span class=\"built_in\">number</span>,y?:<span class=\"built_in\">boolean</span>] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"越界元素\"><a href=\"#越界元素\" class=\"headerlink\" title=\"越界元素\"></a>越界元素</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr:[number,string] = [1,&#x27;string&#x27;]</span><br><span class=\"line\">arr.push(true)//error</span><br></pre></td></tr></table></figure>\n\n<p>对于越界的元素他的类型被限制为 联合类型（就是你在元组中定义的类型）如下图</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/29f23f5e7fdb43f69a6d19ee7c9c3df6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<h3 id=\"应用场景-例如定义excel返回的数据\"><a href=\"#应用场景-例如定义excel返回的数据\" class=\"headerlink\" title=\"应用场景 例如定义excel返回的数据\"></a><strong>应用场景 例如定义excel返回的数据</strong></h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">excel</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">string</span>][] = [</span><br><span class=\"line\">    [<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;123&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;123&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;123&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;123&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;123&#x27;</span>],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"十、枚举\"><a href=\"#十、枚举\" class=\"headerlink\" title=\"十、枚举\"></a>十、枚举</h1><p>在javaScript中是没有枚举的概念的TS帮我们定义了枚举这个类型</p>\n<h1 id=\"使用枚举-通过enum关键字定义我们的枚举\"><a href=\"#使用枚举-通过enum关键字定义我们的枚举\" class=\"headerlink\" title=\"使用枚举 通过enum关键字定义我们的枚举\"></a>使用枚举 通过enum关键字定义我们的枚举</h1><h2 id=\"1-数字枚举\"><a href=\"#1-数字枚举\" class=\"headerlink\" title=\"1.数字枚举\"></a>1.数字枚举</h2><p>例如 红绿蓝 Red = 0 Green = 1 Blue= 2 分别代表红色0 绿色为1 蓝色为2</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> Types&#123;</span><br><span class=\"line\">   Red,</span><br><span class=\"line\">  Green,</span><br><span class=\"line\">   BLue</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样写就可以实现应为ts定义的枚举中的每一个组员默认都是从0开始的所以也就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Types&#123;</span><br><span class=\"line\">   Red = 0,</span><br><span class=\"line\">   Green = 1,</span><br><span class=\"line\">   BLue = 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//默认就是从0开始的 可以不写值</span><br></pre></td></tr></table></figure>\n\n<p>增长枚举</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Types&#123;</span><br><span class=\"line\">   Red = 1,</span><br><span class=\"line\">   Green,</span><br><span class=\"line\">   BLue</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上，我们定义了一个数字枚举， Red使用初始化为 <code>1</code>。 其余的成员会从 <code>1</code>开始自动增长。 换句话说， Type<code>.Red</code>的值为 <code>1</code>， <code>Green</code>为 <code>2</code>， <code>Blue</code>为 <code>3</code>。</p>\n<h2 id=\"2-字符串枚举\"><a href=\"#2-字符串枚举\" class=\"headerlink\" title=\"2.字符串枚举\"></a>2.字符串枚举</h2><p>字符串枚举的概念很简单。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Types&#123;</span><br><span class=\"line\">   Red = &#x27;red&#x27;,</span><br><span class=\"line\">   Green = &#x27;green&#x27;,</span><br><span class=\"line\">   BLue = &#x27;blue&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。 换句话说，如果你正在调试并且必须要读一个数字枚举的运行时的值，这个值通常是很难读的 - 它并不能表达有用的信息，字符串枚举允许你提供一个运行时有意义的并且可读的值，独立于枚举成员的名字。</p>\n<h2 id=\"3-异构枚举\"><a href=\"#3-异构枚举\" class=\"headerlink\" title=\"3.异构枚举\"></a>3.异构枚举</h2><p>枚举可以混合字符串和数字成员</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Types&#123;</span><br><span class=\"line\">   No = &quot;No&quot;,</span><br><span class=\"line\">   Yes = 1,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-接口枚举\"><a href=\"#4-接口枚举\" class=\"headerlink\" title=\"4.接口枚举\"></a>4.接口枚举</h2><p>定义一个枚举Types 定义一个接口A 他有一个属性red 值为Types.yyds</p>\n<p>声明对象的时候要遵循这个规则</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Types &#123;</span><br><span class=\"line\">  yyds,</span><br><span class=\"line\">   dddd</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"selector-tag\">A</span> &#123;</span><br><span class=\"line\">   red:Types.yyds</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let obj:A = &#123;</span><br><span class=\"line\">   red:Types.yyds</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-const枚举\"><a href=\"#5-const枚举\" class=\"headerlink\" title=\"5.const枚举\"></a><code>5.const</code>枚举</h2><p>let 和 var 都是不允许的声明只能使用const</p>\n<p>大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用 <code>const</code>枚举。 常量枚举通过在枚举上使用 <code>const</code>修饰符来定义</p>\n<p>const 声明的枚举会被编译成常量</p>\n<p>普通声明的枚举编译完后是个对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const enum Types&#123;</span><br><span class=\"line\">   No = &quot;No&quot;,</span><br><span class=\"line\">   Yes = 1,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Const-声明编译之后\"><a href=\"#Const-声明编译之后\" class=\"headerlink\" title=\"Const 声明编译之后\"></a>Const 声明编译之后</h3><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img data-src=\"https://img-blog.csdnimg.cn/3ff5c0fc49664f42a652860339263559.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></h3><h3 id=\"普通声明编译之后\"><a href=\"#普通声明编译之后\" class=\"headerlink\" title=\"普通声明编译之后\"></a>普通声明编译之后</h3><p><img data-src=\"https://img-blog.csdnimg.cn/90f8768bb3114370b5cc9bcdcf002ee6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<h2 id=\"6-反向映射\"><a href=\"#6-反向映射\" class=\"headerlink\" title=\"6.反向映射\"></a>6.反向映射</h2><p>它包含了正向映射（ <code>name</code> -&gt; <code>value</code>）和反向映射（ <code>value</code> -&gt; <code>name</code>）</p>\n<p>要注意的是 <em>不会</em>为字符串枚举成员生成反向映射。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Enum</span> &#123;</span><br><span class=\"line\">   fall</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"title class_\">Enum</span>.<span class=\"property\">fall</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nameOfA = <span class=\"title class_\">Enum</span>[a]; </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nameOfA); <span class=\"comment\">//fall</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"十一、推论与断言\"><a href=\"#十一、推论与断言\" class=\"headerlink\" title=\"十一、推论与断言\"></a>十一、推论与断言</h1><h2 id=\"什么是类型推论\"><a href=\"#什么是类型推论\" class=\"headerlink\" title=\"什么是类型推论\"></a>什么是类型推论</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;小满zs&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>1.我声明了一个变量但是没有定义类型</p>\n<p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/1d631575a0084ec6a1c8d288665472fa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p>所以TS帮我推断出来这是一个string类型</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/a1de5ad7b2f944c5943c93e76598a665.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p>不能够在赋值给别的类型</p>\n<p>2.如果你声明变量没有定义类型也没有赋值这时候TS会推断成any类型可以进行任何操作</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/ac55d781b42d40e9a2864244147b60ed.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<h1 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h1><p>type 关键字（可以给一个类型定义一个名字）多用于复合类型</p>\n<p> 定义类型别名</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> str = <span class=\"built_in\">string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">s</span>:str = <span class=\"string\">&quot;我是小满&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s);</span><br></pre></td></tr></table></figure>\n\n<p> 定义函数别名</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> str = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">s</span>: str = <span class=\"function\">() =&gt;</span> <span class=\"string\">&quot;我是小满&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s);</span><br></pre></td></tr></table></figure>\n\n<p> 定义联合类型别名</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> str = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">s</span>: str = <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">s2</span>: str = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s,s2);</span><br></pre></td></tr></table></figure>\n\n<p>定义值的别名</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> value = <span class=\"built_in\">boolean</span> | <span class=\"number\">0</span> | <span class=\"string\">&#x27;213&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">s</span>:value = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//变量s的值  只能是上面value定义的值</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>type 和 interface 还是一些区别的 虽然都可以定义类型</strong></p>\n<p>1.interface可以继承 type 只能通过 &amp; 交叉类型合并</p>\n<p>2.type 可以定义 联合类型 和 可以使用一些操作符 interface不行</p>\n<p>3.interface 遇到重名的会合并 type 不行</p>\n<h1 id=\"十二、-泛型\"><a href=\"#十二、-泛型\" class=\"headerlink\" title=\"十二、 泛型\"></a>十二、 泛型</h1><h2 id=\"函数泛型\"><a href=\"#函数泛型\" class=\"headerlink\" title=\"函数泛型\"></a>函数泛型</h2><p>我写了两个函数一个是数字类型的函数，另一个是字符串类型的函数,其实就是类型不同，</p>\n<p>实现的功能是一样的，这时候我们就可以使用泛型来优化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function num (a:number,b:number) : Array&lt;number&gt; &#123;</span><br><span class=\"line\">    return [a ,b];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">num(1,2)</span><br><span class=\"line\">function str (a:string,b:string) : Array&lt;string&gt; &#123;</span><br><span class=\"line\">    return [a ,b];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">str(&#x27;独孤&#x27;,&#x27;求败&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>泛型优化</p>\n<p>语法为函数名字后面跟一个&lt;参数名&gt; 参数名可以随便写 例如我这儿写了T</p>\n<p>当我们使用这个函数的时候把参数的类型传进去就可以了 （也就是动态类型）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Add&lt;T&gt;(a: T, b: T): Array&lt;T&gt;  &#123;</span><br><span class=\"line\">    return [a,b]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Add&lt;number&gt;(1,2)</span><br><span class=\"line\">Add&lt;string&gt;(&#x27;1&#x27;,&#x27;2&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Sub&lt;T,U&gt;(a:T,b:U):Array&lt;T|U&gt; &#123;</span><br><span class=\"line\">    const params:Array&lt;T|U&gt; = [a,b]</span><br><span class=\"line\">    return params</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Sub&lt;Boolean,number&gt;(false,1)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定义泛型接口\"><a href=\"#定义泛型接口\" class=\"headerlink\" title=\"定义泛型接口\"></a>定义泛型接口</h2><p>声明接口的时候 在名字后面加一个&lt;参数&gt;</p>\n<p>使用的时候传递类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface MyInter&lt;T&gt; &#123;</span><br><span class=\"line\">   (arg: T): T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function fn&lt;T&gt;(arg: T): T &#123;</span><br><span class=\"line\">   return arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let result: MyInter&lt;number&gt; = fn</span><br><span class=\"line\">result(123)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象字面量泛型\"><a href=\"#对象字面量泛型\" class=\"headerlink\" title=\"对象字面量泛型\"></a>对象字面量泛型</h2><figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let foo<span class=\"operator\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"operator\">&lt;</span><span class=\"built_in\">T</span><span class=\"operator\">&gt;</span><span class=\"punctuation\">(</span>arg<span class=\"operator\">:</span> <span class=\"built_in\">T</span><span class=\"punctuation\">)</span><span class=\"operator\">:</span> <span class=\"built_in\">T</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">foo <span class=\"operator\">=</span> <span class=\"keyword\">function</span> <span class=\"operator\">&lt;</span><span class=\"built_in\">T</span><span class=\"operator\">&gt;</span><span class=\"punctuation\">(</span>arg<span class=\"operator\">:</span><span class=\"built_in\">T</span><span class=\"punctuation\">)</span><span class=\"operator\">:</span><span class=\"built_in\">T</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">   <span class=\"built_in\">return</span> arg</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">foo<span class=\"punctuation\">(</span><span class=\"number\">123</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束</h2><p>我们期望在一个泛型的变量上面，获取其<code>length</code>参数，但是，有的数据类型是没有<code>length</code>属性的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getLegnth&lt;T&gt;(arg:T) &#123;</span><br><span class=\"line\">  return arg.length</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"https://img-blog.csdnimg.cn/7457446b9f3e48728ef7d97c585f1403.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"> 这时候我们就可以使用泛型约束</p>\n<p>于是，我们就得对使用的泛型进行约束，我们约束其为具有<code>length</code>属性的类型，这里我们会用到<code>interface</code>,代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Len &#123;</span><br><span class=\"line\">   length:number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getLegnth&lt;T extends Len&gt;(arg:T) &#123;</span><br><span class=\"line\">  return arg.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getLegnth&lt;string&gt;(&#x27;123&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用keyof-约束对象\"><a href=\"#使用keyof-约束对象\" class=\"headerlink\" title=\"使用keyof 约束对象\"></a>使用keyof 约束对象</h2><p>其中使用了TS泛型和泛型约束。首先定义了T类型并使用extends关键字继承object类型的子类型，然后使用keyof操作符获取T类型的所有键，它的返回 类型是联合 类型，最后利用extends关键字约束 K类型必须为keyof T联合类型的子类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function prop&lt;T, K extends keyof T&gt;(obj: T, key: K) &#123;</span><br><span class=\"line\">   return obj[key]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let o = &#123; a: 1, b: 2, c: 3 &#125;</span><br><span class=\"line\">prop(o, &#x27;a&#x27;) </span><br><span class=\"line\">prop(o, &#x27;d&#x27;) //此时就会报错发现找不到</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h2><p>声明方法跟函数类似名称后面定义&lt;类型&gt;</p>\n<p>使用的时候确定类型new Sub<number>()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Sub&lt;T&gt;&#123;</span><br><span class=\"line\">   attr: T[] = [];</span><br><span class=\"line\">   add (a:T):T[] &#123;</span><br><span class=\"line\">      return [a]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let s = new Sub&lt;number&gt;()</span><br><span class=\"line\">s.attr = [1,2,3]</span><br><span class=\"line\">s.add(123)</span><br><span class=\"line\">let str = new Sub&lt;string&gt;()</span><br><span class=\"line\">str.attr = [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br><span class=\"line\">str.add(&#x27;123&#x27;)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>全部摘取自 <span class=\"exturl\" data-url=\"aHR0cHM6Ly94aWFvbWFuLmJsb2cuY3Nkbi5uZXQvP3R5cGU9YmxvZw==\">小满zs_Vue3,typeScript,nest-js-CSDN博客</span></p>\n</blockquote>\n",
            "tags": [
                "TS,"
            ]
        },
        {
            "id": "http://example.com/2023/08/21/egg-js%E7%AC%94%E8%AE%B0/",
            "url": "http://example.com/2023/08/21/egg-js%E7%AC%94%E8%AE%B0/",
            "title": "egg.js笔记",
            "date_published": "2023-08-21T11:27:14.000Z",
            "content_html": "<h2 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1.基本使用\"></a>1.基本使用</h2><a id=\"more\"></a>\n\n<blockquote>\n<p>在app/controller/**.js 中编写逻辑，  在app/router.js中注册</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;use strict&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; Controller &#125; = require(&#x27;egg&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">class HomeController extends Controller &#123;</span><br><span class=\"line\">  async index() &#123;</span><br><span class=\"line\">    const &#123; ctx &#125; = this;</span><br><span class=\"line\">    ctx.body = &#x27;hi！！&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  async sayMin() &#123;</span><br><span class=\"line\">    const &#123; ctx &#125; = this;</span><br><span class=\"line\">    ctx.body = &#x27;hi！！&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = HomeController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注册</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;use strict&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;Egg.Application&#125; app - egg application</span><br><span class=\"line\"> */</span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\">  const &#123; router, controller &#125; = app;</span><br><span class=\"line\">  router.get(&#x27;/&#x27;, controller.home.index);</span><br><span class=\"line\">  router.get(&#x27;/my&#x27;, controller.home.sayMin);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-get-post-传参\"><a href=\"#2-get-post-传参\" class=\"headerlink\" title=\"2.get post 传参\"></a>2.get post 传参</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// get自由传参</span><br><span class=\"line\">  async index2 () &#123;</span><br><span class=\"line\">    const &#123; ctx &#125; = this;</span><br><span class=\"line\">    ctx.body = ctx.query</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  // get固定参数</span><br><span class=\"line\">  async index3 () &#123;</span><br><span class=\"line\">    const &#123; ctx &#125; = this;</span><br><span class=\"line\">    ctx.body = ctx.params</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  // post</span><br><span class=\"line\">  async index4 () &#123;</span><br><span class=\"line\">    const &#123; ctx &#125; = this;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">      state: 200,</span><br><span class=\"line\">      data: ctx.request.body</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>router.js 注册</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(&#x27;/mine2&#x27;, controller.mine.index2);</span><br><span class=\"line\">router.get(&#x27;/mine3/:name/:age&#x27;, controller.mine.index3);</span><br><span class=\"line\">router.post(&#x27;/mine4&#x27;, controller.mine.index4);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-service使用\"><a href=\"#3-service使用\" class=\"headerlink\" title=\"3.service使用\"></a>3.service使用</h2><blockquote>\n<p>用于编写业务逻辑层, 一般数据库操作</p>\n</blockquote>\n<p>app/service/***.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;use strict&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const Service = require(&quot;egg&quot;).Service</span><br><span class=\"line\"></span><br><span class=\"line\">class Mine extends Service &#123;</span><br><span class=\"line\">  async geta (id) &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      id: id,</span><br><span class=\"line\">      // 模拟数据库返回结果</span><br><span class=\"line\">      name: &#x27;jake&#x27;,</span><br><span class=\"line\">      age: 18</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = Mine</span><br></pre></td></tr></table></figure>\n\n<p>app/controller/ ***.js使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// servies</span><br><span class=\"line\">async index5 () &#123;</span><br><span class=\"line\">  const &#123; ctx &#125; = this;</span><br><span class=\"line\">  const res = await ctx.service.mine.geta(&#x27;255&#x27;)</span><br><span class=\"line\">  ctx.body = res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>app/router.js注册</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(&#x27;/mine5&#x27;, controller.mine.index5);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-EJS模板引擎\"><a href=\"#4-EJS模板引擎\" class=\"headerlink\" title=\"4. EJS模板引擎\"></a>4. EJS模板引擎</h2><blockquote>\n<p>对 SEO 非常友好</p>\n<p>SPA实现不了的某些内容 模板引擎可以</p>\n</blockquote>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i egg-view-ejs --save</span><br></pre></td></tr></table></figure>\n\n<p>2.配置</p>\n<p>cofig/plugin.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;use strict&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.ejs = &#123;</span><br><span class=\"line\">  // 开启</span><br><span class=\"line\">  enable: true,</span><br><span class=\"line\">  // 目录</span><br><span class=\"line\">  package: &quot;egg-view-ejs&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>config/config.default.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ejs配置</span><br><span class=\"line\">config.view = &#123;</span><br><span class=\"line\">  mapping: &#123;</span><br><span class=\"line\">    &quot;.html&quot;: &quot;ejs&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">config.ejs = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.使用</p>\n<blockquote>\n<p>ctx.render(‘’)引用的文件必须放在 app/view/***.html中</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ejs</span><br><span class=\"line\">async index6 () &#123;</span><br><span class=\"line\">  const &#123; ctx &#125; = this;</span><br><span class=\"line\">  await ctx.render(&#x27;m1.html&#x27;) // ./app/view/*.html</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li>语法使用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">传递数据 &lt;%= **%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">循环渲染</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% for(var i=0; i&lt;canDo.length; i++)&#123;%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">循环体</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在第二个参数写上要传递的参数</span><br><span class=\"line\">  // ejs</span><br><span class=\"line\">  async index6 () &#123;</span><br><span class=\"line\">    const &#123; ctx &#125; = this;</span><br><span class=\"line\">    await ctx.render(&#x27;m1.html&#x27;, &#123;</span><br><span class=\"line\">      name: &#x27;jake&#x27;,</span><br><span class=\"line\">      age: 18,</span><br><span class=\"line\">      canDo: [</span><br><span class=\"line\">        &#x27;aaa&#x27;,</span><br><span class=\"line\">        &#x27;bbb&#x27;,</span><br><span class=\"line\">        &#x27;ccc&#x27;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// M1.html</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;h1&gt;啊啊啊&lt;/h1&gt;</span><br><span class=\"line\">  &lt;h2&gt;姓名： &lt;%= name%&gt;&lt;/h2&gt;</span><br><span class=\"line\">  &lt;h2&gt;年龄： &lt;%= age%&gt;&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;% for(var i=0; i&lt;canDo.length; i++)&#123;%&gt;</span><br><span class=\"line\">      &lt;li&gt;&lt;%= canDo[i] %&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;%&#125;%&gt;</span><br><span class=\"line\">  &lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>引入公用代码片段</p>\n<p>&lt;%-include(“***.html”) %&gt;</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%-include(&quot;header.html&quot;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引入css样式 和 js</p>\n</blockquote>\n<p>1.将 css js 文件定义到 app/public 中 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在页面文件中正常引入</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./public/css/a.css&quot;&gt;</span><br><span class=\"line\">&lt;script src=&quot;../public/js/a.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-cookie\"><a href=\"#5-cookie\" class=\"headerlink\" title=\"5.cookie\"></a>5.cookie</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvNzkjdG9jMzQ3\">对Cookie的简单了解</span></p>\n<blockquote>\n<p>HTTP请求是无状态的，但是在开发时，有些情况是需要知道请求的人是谁的。为了解决这个问题，HTTP协议设计了一个特殊的请求头：<code>Cookie</code>。服务端可以通过响应头（set-cookie）将少量数据响应给客户端，浏览器会遵循协议将数据保留，并在下一次请求同一个服务的时候带上。</p>\n</blockquote>\n<p>简单来说，就相当于你去上班，给你发了一个工牌，这样你就可以进出办公大楼了。你也可以想象成，你去红浪漫，办了一张VIP卡。每次去拿出卡，可以打9折一样。</p>\n<p><a href=\"https://jspang.com/article/79#toc348\"><strong>编写前基本准备</strong></a></p>\n<p>你初步了解Cookie后，我们来进行实际操作。</p>\n<p>我们先来了解在Egg下，如何实现Cookie的增删改查，这也是最基本的操作。（提示，在实际开发中Cookie的操作应该放在服务端，而不是用客户端的JS操作。）</p>\n<p>在讲解之前，我们还是要作一些提前的代码编写，比如设置好对应的按钮、Controller方法和路由。</p>\n<p>我们先来到上节课的<code>/app/view/jspang.html</code>模板中，编写四个按钮，分别是<code>增加Cookie</code>、<code>删除Cookie</code>、<code>修改Cookie</code>和<code>查看Cookie</code>。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;add()&quot;</span>&gt;</span>增加Cookie<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;del()&quot;</span>&gt;</span>删除Cookie<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;editor()&quot;</span>&gt;</span>修改Cookie<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;show()&quot;</span>&gt;</span>查看Cookie<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>写完按钮后，增加对应的方法JavaScript。</p>\n<p>可以先写一个方法（function），然后其它的复制后进行修改。就可以快速写出这些代码了。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;/add&quot;</span>,&#123;</span><br><span class=\"line\">            <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">headers</span>:&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;Content-type&quot;</span>:<span class=\"string\">&quot;application/json&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">del</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;/del&quot;</span>,&#123;</span><br><span class=\"line\">            <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">headers</span>:&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;Content-type&quot;</span>:<span class=\"string\">&quot;application/json&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">editor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;/editor&quot;</span>,&#123;</span><br><span class=\"line\">            <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">headers</span>:&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;Content-type&quot;</span>:<span class=\"string\">&quot;application/json&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">show</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;/show&quot;</span>,&#123;</span><br><span class=\"line\">            <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">headers</span>:&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;Content-type&quot;</span>:<span class=\"string\">&quot;application/json&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再去<code>/app/controller/jspang.js</code>文件下，增加这四个对应的方法。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">add</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">del</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">editor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">show</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后再到<code>/app/router.js</code>中配置对应的路由</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/add&#x27;</span>, controller.<span class=\"property\">jspang</span>.<span class=\"property\">add</span>);</span><br><span class=\"line\">router.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/del&#x27;</span>, controller.<span class=\"property\">jspang</span>.<span class=\"property\">del</span>);</span><br><span class=\"line\">router.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/editor&#x27;</span>, controller.<span class=\"property\">jspang</span>.<span class=\"property\">editor</span>);</span><br><span class=\"line\">router.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/show&#x27;</span>, controller.<span class=\"property\">jspang</span>.<span class=\"property\">show</span>);</span><br></pre></td></tr></table></figure>\n\n<p>作完上面这四步，我们的基本结构就有了，剩下就可以好好的学习Cookie的基本操作了。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvNzkjdG9jMzQ5\">Cookie的增加操作</span></p>\n<p>先到<code>/app/controller/jspang.js</code>文件的<code>add( )</code>方法里编写代码。其实egg已经为我们准备好了操作Cookie的方法。直接使用就可以了。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">add</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span></span><br><span class=\"line\">  ctx.<span class=\"property\">cookies</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;user&quot;</span>,<span class=\"string\">&quot;jspang.com&quot;</span>)</span><br><span class=\"line\">  ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:<span class=\"string\">&#x27;Cookie添加成功&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这部分代码写完后，就可以可以在终端中开启服务，输入<code>yarn dev</code>开启。</p>\n<p>来到页面点击<code>增加Cookie</code>按钮，然后按<code>F12</code>打开调试模式，找到<code>Application</code>，可以看到<code>Cookie</code>值已经被加入进来了。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvNzkjdG9jMzUw\">Cookie的删除操作</span></p>\n<p>再来看一下Cookie的删除操作，再来到<code>/app/controller/jspang.js</code>文件。修改<code>del( )</code>方法。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">del</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span></span><br><span class=\"line\">  ctx.<span class=\"property\">cookies</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;user&quot;</span>,<span class=\"literal\">null</span>)</span><br><span class=\"line\">  ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:<span class=\"string\">&#x27;Cookie删除成功&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写好后，直接到浏览器中点击删除，就可以删除<code>Cookie</code>了。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvNzkjdG9jMzUx\">Cookie的修改操作</span></p>\n<p>修改操作和删除和增加一样。直接修改值就可以了。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">editor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span></span><br><span class=\"line\">  ctx.<span class=\"property\">cookies</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;user&quot;</span>,<span class=\"string\">&#x27;bilibili&#x27;</span>)</span><br><span class=\"line\">  ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:<span class=\"string\">&#x27;Cookie修改成功&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvNzkjdG9jMzUy\">Cookie的显示</span></p>\n<p>显示Cookie要使用<code>ctx.cookies.get( )</code>方法。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">show</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> user=ctx.<span class=\"property\">cookies</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(user)</span><br><span class=\"line\">  ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:<span class=\"string\">&#x27;Cookie显示成功&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击按钮后，可以在VSCode的终端中显示出结果。你可以试着让它显示在页面上。</p>\n<h2 id=\"6-cookie配置与加密\"><a href=\"#6-cookie配置与加密\" class=\"headerlink\" title=\"6.cookie配置与加密\"></a>6.cookie配置与加密</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvNzkjdG9jMzU0\">Cookie时效设置</span></p>\n<p><code>ctx.cookies.set( )</code> 方法是有三个参数的，第一个参数是key，第二个参数是value，第三个参数就可以进行配置。比如你需要配置Cookie的有效时间，可以使用<code>maxAge</code>属性。(这个时间是毫秒。)</p>\n<p>比如现在我们到<code>/app/controller/jspang.js</code>文件里，修改<code>add( )</code>方法，把<code>maxAge</code>设置为两秒，在添加Cookie两秒后，这个Cookie就会自己失效。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">add</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span></span><br><span class=\"line\">  ctx.<span class=\"property\">cookies</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;user&quot;</span>,<span class=\"string\">&quot;jspang.com&quot;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">maxAge</span>:<span class=\"number\">1000</span>*<span class=\"number\">2</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:<span class=\"string\">&#x27;Cookie添加成功&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc3BhbmcuY29tL2FydGljbGUvNzkjdG9jMzU1\">HttpOnly的设置</span></p>\n<p>伪造Cookie来绕过登录是黑客经常使用的一种手段，所以为了安全，Egg.js默认设置只允许服务端来操作Cookie。</p>\n<p>比如现在你通过JS的方式<code>document.cookie</code>获取Cookie是不能获取的(需要在浏览器的控制台输入获取)。当我们想通过客户端操作Cookie时，可以通过下面的代码进行设置。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync <span class=\"title function_\">add</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = <span class=\"variable language_\">this</span>.<span class=\"property\">ctx</span></span><br><span class=\"line\">  ctx.<span class=\"property\">cookies</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;user&quot;</span>,<span class=\"string\">&quot;jspang.com&quot;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">maxAge</span>:<span class=\"number\">1000</span>*<span class=\"number\">60</span>,</span><br><span class=\"line\">    <span class=\"attr\">httpOnly</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:<span class=\"string\">&#x27;Cookie添加成功&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面设置了<code>httpOnly:false</code>，再次刷新页面，然后看浏览器控制台的<code>HttpOnly</code>就变成<code>false</code>属性了。</p>\n<p>中文问题</p>\n<p>加密只要在第三个参数中，加入<code>encrypt:true</code>，就可以加密成功。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"property\">cookies</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;user&quot;</span>,<span class=\"string\">&quot;技术胖&quot;</span>,&#123;</span><br><span class=\"line\">  <span class=\"attr\">encrypt</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "egg.js"
            ]
        },
        {
            "id": "http://example.com/2023/08/21/egg-js%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/",
            "url": "http://example.com/2023/08/21/egg-js%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/",
            "title": "egg.js介绍与安装",
            "date_published": "2023-08-21T03:51:24.000Z",
            "content_html": "<h1 id=\"egg-js\"><a href=\"#egg-js\" class=\"headerlink\" title=\"egg.js\"></a>egg.js</h1><a id=\"more\"></a>\n\n<h2 id=\"1-egg-是什么？\"><a href=\"#1-egg-是什么？\" class=\"headerlink\" title=\"1.egg 是什么？\"></a>1.egg 是什么？</h2><p>egg 是阿里出品的一款 node.js 后端 企业级 web 基础框架，基于 koa 封装，并做了一些约定。</p>\n<h2 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2.安装\"></a>2.安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init egg --type=simple //安装</span><br><span class=\"line\"></span><br><span class=\"line\">npm i //安装依赖</span><br><span class=\"line\"></span><br><span class=\"line\">npm run dev // 运行调试</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:7001 // 地址</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-目录结构\"><a href=\"#3-目录结构\" class=\"headerlink\" title=\"3.目录结构\"></a>3.目录结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egg-project</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── app.js (可选)</span><br><span class=\"line\">├── agent.js (可选)</span><br><span class=\"line\">├── app</span><br><span class=\"line\">|   ├── router.js</span><br><span class=\"line\">│   ├── controller</span><br><span class=\"line\">│   |   └── home.js</span><br><span class=\"line\">│   ├── service (可选)</span><br><span class=\"line\">│   |   └── user.js</span><br><span class=\"line\">│   ├── middleware (可选)</span><br><span class=\"line\">│   |   └── response_time.js</span><br><span class=\"line\">│   ├── schedule (可选)</span><br><span class=\"line\">│   |   └── my_task.js</span><br><span class=\"line\">│   ├── public (可选)</span><br><span class=\"line\">│   |   └── reset.css</span><br><span class=\"line\">│   ├── view (可选)</span><br><span class=\"line\">│   |   └── home.tpl</span><br><span class=\"line\">│   └── extend (可选)</span><br><span class=\"line\">│       ├── helper.js (可选)</span><br><span class=\"line\">│       ├── request.js (可选)</span><br><span class=\"line\">│       ├── response.js (可选)</span><br><span class=\"line\">│       ├── context.js (可选)</span><br><span class=\"line\">│       ├── application.js (可选)</span><br><span class=\"line\">│       └── agent.js (可选)</span><br><span class=\"line\">├── config</span><br><span class=\"line\">|   ├── plugin.js</span><br><span class=\"line\">|   ├── config.default.js</span><br><span class=\"line\">│   ├── config.prod.js</span><br><span class=\"line\">|   ├── config.test.js (可选)</span><br><span class=\"line\">|   ├── config.local.js (可选)</span><br><span class=\"line\">|   └── config.unittest.js (可选)</span><br><span class=\"line\">└── <span class=\"built_in\">test</span></span><br><span class=\"line\">    ├── middleware</span><br><span class=\"line\">    |   └── response_time.test.js</span><br><span class=\"line\">    └── controller</span><br><span class=\"line\">        └── home.test.js</span><br></pre></td></tr></table></figure>\n\n<p>如上，由框架约定的目录：</p>\n<ul>\n<li><code>app/router.js</code> 用于配置 URL 路由规则，具体参见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWdnanMub3JnL3poLUNOL2Jhc2ljcy9yb3V0ZXI=\">Router</span>。</li>\n<li><code>app/controller/**</code> 用于解析用户的输入，处理后返回相应的结果，具体参见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWdnanMub3JnL3poLUNOL2Jhc2ljcy9jb250cm9sbGVy\">Controller</span>。</li>\n<li><code>app/service/**</code> 用于编写业务逻辑层，可选，建议使用，具体参见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWdnanMub3JnL3poLUNOL2Jhc2ljcy9zZXJ2aWNl\">Service</span>。</li>\n<li><code>app/middleware/**</code> 用于编写中间件，可选，具体参见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWdnanMub3JnL3poLUNOL2Jhc2ljcy9taWRkbGV3YXJl\">Middleware</span>。</li>\n<li><code>app/public/**</code> 用于放置静态资源，可选，具体参见内置插件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VnZ2pzL2VnZy1zdGF0aWM=\">egg-static</span>。</li>\n<li><code>app/extend/**</code> 用于框架的扩展，可选，具体参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWdnanMub3JnL3poLUNOL2Jhc2ljcy9leHRlbmQ=\">框架扩展</span>。</li>\n<li><code>config/config.&#123;env&#125;.js</code> 用于编写配置文件，具体参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWdnanMub3JnL3poLUNOL2Jhc2ljcy9jb25maWc=\">配置</span>。</li>\n<li><code>config/plugin.js</code> 用于配置需要加载的插件，具体参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWdnanMub3JnL3poLUNOL2Jhc2ljcy9wbHVnaW4=\">插件</span>。</li>\n<li><code>test/**</code> 用于单元测试，具体参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWdnanMub3JnL3poLUNOL2NvcmUvdW5pdHRlc3Q=\">单元测试</span>。</li>\n<li><code>app.js</code> 和 <code>agent.js</code> 用于自定义启动时的初始化工作，可选，具体参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWdnanMub3JnL3poLUNOL2Jhc2ljcy9hcHAtc3RhcnQ=\">启动自定义</span>。关于<code>agent.js</code>的作用参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWdnanMub3JnL3poLUNOL2NvcmUvY2x1c3Rlci1hbmQtaXBjI2FnZW50LSVFNiU5QyVCQSVFNSU4OCVCNg==\">Agent 机制</span>。</li>\n</ul>\n<p>由内置插件约定的目录：</p>\n<ul>\n<li><code>app/public/**</code> 用于放置静态资源，可选，具体参见内置插件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VnZ2pzL2VnZy1zdGF0aWM=\">egg-static</span>。</li>\n<li><code>app/schedule/**</code> 用于定时任务，可选，具体参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWdnanMub3JnL3poLUNOL2Jhc2ljcy9zY2hlZHVsZQ==\">定时任务</span>。</li>\n</ul>\n<p><strong>若需自定义自己的目录规范，参见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lZ2dqcy5vcmcvemgtY24vYWR2YW5jZWQvbG9hZGVyLmh0bWw=\">Loader API</span></strong></p>\n<ul>\n<li><code>app/view/**</code> 用于放置模板文件，可选，由模板插件约定，具体参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWdnanMub3JnL3poLUNOL2NvcmUvdmlldw==\">模板渲染</span>。</li>\n<li><code>app/model/**</code> 用于放置领域模型，可选，由领域类相关插件约定，如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VnZ2pzL2VnZy1zZXF1ZWxpemU=\">egg-sequelize</span>。</li>\n</ul>\n",
            "tags": [
                "egg.js"
            ]
        },
        {
            "id": "http://example.com/2023/08/18/diff%E7%AE%97%E6%B3%95/",
            "url": "http://example.com/2023/08/18/diff%E7%AE%97%E6%B3%95/",
            "title": "diff算法",
            "date_published": "2023-08-18T04:47:09.000Z",
            "content_html": "<h1 id=\"简单实现diff方法\"><a href=\"#简单实现diff方法\" class=\"headerlink\" title=\"简单实现diff方法\"></a>简单实现diff方法</h1><a id=\"more\"></a>\n\n<h3 id=\"一、是什么diff算法\"><a href=\"#一、是什么diff算法\" class=\"headerlink\" title=\"一、是什么diff算法\"></a>一、是什么diff算法</h3><p>先来一句概念：</p>\n<blockquote>\n<p>diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方，最后用patch记录的消息去局部更新Dom。</p>\n</blockquote>\n<p>换句人话</p>\n<blockquote>\n<p>diff的过程就是调用名为patch的函数，比较新旧节点，一边比较一边给真实的DOM打补丁</p>\n</blockquote>\n<p><strong>其有两个特点：</strong></p>\n<ul>\n<li>比较只会在同层级进行, 不会跨层级比较</li>\n<li>在diff比较的过程中，循环从两边向中间比较</li>\n</ul>\n<h3 id=\"Diff算法的步骤：\"><a href=\"#Diff算法的步骤：\" class=\"headerlink\" title=\"Diff算法的步骤：\"></a>Diff算法的步骤：</h3><ul>\n<li>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文 档当中</li>\n<li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较(diff)，记录两棵树差异</li>\n<li>把第二棵树所记录的差异应用到第一棵树所构建的真正的DOM树上(patch)，视图就更新了</li>\n</ul>\n<h3 id=\"二、比较方式\"><a href=\"#二、比较方式\" class=\"headerlink\" title=\"二、比较方式\"></a>二、比较方式</h3><p>diff整体策略为：深度优先，同层比较</p>\n<h3 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1.数据\"></a>1.数据</h4><blockquote>\n<p>vDom用于模拟更新前dom， vDom1用于模拟更新后dom</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// dom类</span><br><span class=\"line\">class Element &#123;</span><br><span class=\"line\">    constructor(type,props,children)&#123;</span><br><span class=\"line\">        this.type = type</span><br><span class=\"line\">        this.props = props</span><br><span class=\"line\">        this.children = children</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">function createElement(type,props,children)&#123;</span><br><span class=\"line\">    return new Element(type,props,children)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 虚拟dom</span><br><span class=\"line\">const vDom = createElement(&#x27;ul&#x27;, &#123;</span><br><span class=\"line\">    class:&#x27;list&#x27;,</span><br><span class=\"line\">    style: &#x27;width: 300px; height: 300px; background-color: orange&#x27;</span><br><span class=\"line\">   &#125;, </span><br><span class=\"line\">   [</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 0</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第一个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 1</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第2个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第3个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),        </span><br><span class=\"line\">   ])</span><br><span class=\"line\">// 用于寻找补丁的dom</span><br><span class=\"line\">const vDom1 = createElement(&#x27;ul&#x27;, &#123;</span><br><span class=\"line\">    class:&#x27;list-wrap&#x27;,</span><br><span class=\"line\">    style: &#x27;width: 300px; height: 300px; background-color: orange&#x27;</span><br><span class=\"line\">   &#125;, </span><br><span class=\"line\">   [</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 0</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text1&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;特殊列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 1</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;title&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第2个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;div&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第3个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),        </span><br><span class=\"line\">   ])</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-渲染器\"><a href=\"#2-渲染器\" class=\"headerlink\" title=\"2.渲染器\"></a>2.渲染器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// render渲染器</span><br><span class=\"line\">    let render = (vsnode,el)=&gt;&#123;</span><br><span class=\"line\">        // 创建最外层dom元素</span><br><span class=\"line\">        const vel = document.createElement(vsnode.type)</span><br><span class=\"line\">        for(key in vsnode.props)&#123;</span><br><span class=\"line\">            if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">                vel.addEventListener(</span><br><span class=\"line\">                    key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;else if(key == &#x27;class&#x27;) &#123;//添加类名</span><br><span class=\"line\">                vel.className=vsnode.props[key]</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                // vel.</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 如果children是字符串 则创建节点追加到vel</span><br><span class=\"line\">        if(typeof vsnode.children == &#x27;string&#x27;)&#123;</span><br><span class=\"line\">            const text = document.createTextNode(vsnode.children)</span><br><span class=\"line\">            vel.appendChild(text)</span><br><span class=\"line\">            // 如果是数组 递归</span><br><span class=\"line\">        &#125;else if(Array.isArray(vsnode.children))&#123;</span><br><span class=\"line\">            vsnode.children.forEach(chil =&gt; &#123;</span><br><span class=\"line\">                render(chil,vel)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        el.appendChild(vel)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-diff函数\"><a href=\"#3-diff函数\" class=\"headerlink\" title=\"3.diff函数\"></a>3.diff函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// diff</span><br><span class=\"line\">let types = &#123;ATTR:&#x27;ATTE&#x27;,TEXT:&#x27;TEXT&#x27;,REPLACE:&#x27;REPLACE&#x27;,REMOVE:&#x27;REMOVE&#x27;&#125;//模拟补丁类型</span><br><span class=\"line\">// 用于寻找补丁</span><br><span class=\"line\">let patches = &#123;&#125; //找到的补丁</span><br><span class=\"line\">let vnIndex = 0</span><br><span class=\"line\">const domDiff = (oldVDom, newVDom)=&gt;&#123;</span><br><span class=\"line\">    let index = 0</span><br><span class=\"line\">    vNodeWalk(oldVDom, newVDom,index)//寻找节点的补丁</span><br><span class=\"line\">    return patches</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const vNodeWalk = (oldNode, newNode, index)=&gt;&#123;</span><br><span class=\"line\">    let vnPatch = [] //本节点的补丁</span><br><span class=\"line\">    if(!newNode)&#123;//判断newnode是否被删除</span><br><span class=\"line\">        vnPatch.push(&#123;</span><br><span class=\"line\">            type: types.REMOVE,</span><br><span class=\"line\">            index:index</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;else if (typeof oldNode === &#x27;string&#x27; &amp;&amp; typeof newNode === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">        if(oldNode != newNode)&#123;//判断文本节点是否改变</span><br><span class=\"line\">            vnPatch.push(&#123;</span><br><span class=\"line\">                type:types.TEXT,</span><br><span class=\"line\">                text:newNode</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;else if (oldNode.type === newNode.type) &#123;</span><br><span class=\"line\">        const attrPatch = attrsWalk(oldNode.props, newNode.props)//用于判断两个节点的属性</span><br><span class=\"line\">        if(Object.keys(attrPatch).length&gt;0)&#123;</span><br><span class=\"line\">            vnPatch.push(&#123;</span><br><span class=\"line\">                type:types.ATTR,</span><br><span class=\"line\">                attrs: attrPatch</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 寻找子节点补丁</span><br><span class=\"line\">    childWalk(oldNode.children, newNode.children,vnIndex)</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        vnPatch.push(&#123;</span><br><span class=\"line\">            type: types.REPLACE,</span><br><span class=\"line\">            newNode</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(vnPatch.length &gt; 0)&#123;</span><br><span class=\"line\">        patches[index] = vnPatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//用于判断两个节点的属性</span><br><span class=\"line\">const attrsWalk = (oldAttrs, newAttrs)=&gt;&#123;</span><br><span class=\"line\">    let attrPatch = &#123;&#125;;</span><br><span class=\"line\">    // 修改属性</span><br><span class=\"line\">    for (key in oldAttrs) &#123;</span><br><span class=\"line\">        if(oldAttrs[key] != newAttrs[key])&#123;</span><br><span class=\"line\">            attrPatch[key] = newAttrs[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 新增属性</span><br><span class=\"line\">    for(key in newAttrs)&#123;</span><br><span class=\"line\">        if(!oldAttrs.hasOwnProperty(key))&#123;</span><br><span class=\"line\">            attrPatch[key] = newAttrs[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return attrPatch</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// // 寻找子节点补丁</span><br><span class=\"line\">const childWalk = (oldChildren, newChildren)=&gt;&#123;</span><br><span class=\"line\">    oldChildren.map((c,idx)=&gt;&#123;</span><br><span class=\"line\">        vNodeWalk(c, newChildren[idx], ++vnIndex)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">domDiff(vDom,vDom1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-打补丁\"><a href=\"#4-打补丁\" class=\"headerlink\" title=\"4.打补丁\"></a>4.打补丁</h4>",
            "tags": [
                "vue3"
            ]
        },
        {
            "id": "http://example.com/2023/08/17/Set-Map/",
            "url": "http://example.com/2023/08/17/Set-Map/",
            "title": "Set,Map",
            "date_published": "2023-08-17T14:35:04.000Z",
            "content_html": "<h1 id=\"Set、Map、WeakSet、WeakMap\"><a href=\"#Set、Map、WeakSet、WeakMap\" class=\"headerlink\" title=\"Set、Map、WeakSet、WeakMap\"></a>Set、Map、WeakSet、WeakMap</h1><a id=\"more\"></a>\n\n<blockquote>\n<p>引用自 <span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTclQjElQkIlRTUlOUUlOEIlRTclOUElODQlRTglQkQlQUMlRTYlOEQlQTI=\">Set、Map、WeakSet、WeakMap | Vue3 (vue3js.cn)</span></p>\n</blockquote>\n<p>如果要用一句来描述，我们可以说 <strong>Set是一种叫做集合的数据结构，Map是一种叫做字典的数据结构</strong></p>\n<p>那什么是集合？什么又是字典呢？</p>\n<ul>\n<li>集合</li>\n</ul>\n<blockquote>\n<p>集合，是由一堆无序的、相关联的，且不重复的内存结构【数学中称为元素】组成的组合</p>\n</blockquote>\n<ul>\n<li>字典</li>\n</ul>\n<blockquote>\n<p>字典（dictionary）是一些元素的集合。每个元素有一个称作key 的域，不同元素的key 各不相同</p>\n</blockquote>\n<p>那么集合和字典又有什么区别呢？</p>\n<ul>\n<li>共同点：集合、字典都可以存储不重复的值</li>\n<li>不同点：集合是以[值，值]的形式存储元素，字典是以[键，值]的形式存储</li>\n</ul>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"#背景\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTglODMlOEMlRTYlOTklQUY=\">#</span>背景</h2><p>大多数主流编程语言都有多种内置的数据集合。例如<code>Python</code>拥有列表（<code>list</code>）、元组（<code>tuple</code>）和字典（<code>dictionary</code>）,Java有列表（<code>list</code>）、集合（<code>set</code>)、队列（<code>queue</code>）</p>\n<p>然而 <code>JavaScript</code> 直到<code>ES6</code>的发布之前，只拥有数组（<code>array</code>）和对象（<code>object</code>）这两个内建的数据集合</p>\n<p>在 <code>ES6</code> 之前,我们通常使用内置的 <code>Object</code> 模拟Map</p>\n<p>但是这样模拟出来的<code>map</code>会有一些缺陷，如下:</p>\n<ol>\n<li><code>Object</code>的属性键是<code>String</code>或<code>Symbol</code>，这限制了它们作为不同数据类型的键/值对集合的能力</li>\n<li><code>Object</code>不是设计来作为一种数据集合，因此没有直接有效的方法来确定对象具有多少属性</li>\n</ol>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"#Set\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCNzZXQ=\">#</span>Set</h2><blockquote>\n<p>定义: <code>Set</code> 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用，<code>Set</code>对象是值的集合，你可以按照插入的顺序迭代它的元素。 <code>Set</code>中的元素只会出现一次，即 <code>Set</code> 中的元素是唯一的</p>\n</blockquote>\n<p><code>Set</code>本身是一个构造函数，用来生成 <code>Set</code> 数据结构</p>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"#基本使用\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTUlOUYlQkElRTYlOUMlQUMlRTQlQkQlQkYlRTclOTQlQTg=\">#</span>基本使用</h3><ul>\n<li>语法<br><code>new Set([iterable])</code> 接收一个数组（或者具有 iterable 接口的其他数据结构）, 返回一个新的<code>Set</code>对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(set) <span class=\"comment\">// &#123;1,2&#125; </span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码可以看出 <code>Set</code> 是可以去除数组中的重复元素</p>\n<h3 id=\"属性及方法\"><a href=\"#属性及方法\" class=\"headerlink\" title=\"#属性及方法\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTUlQjElOUUlRTYlODAlQTclRTUlOEYlOEElRTYlOTYlQjklRTYlQjMlOTU=\">#</span>属性及方法</h3><p><strong>属性</strong></p>\n<ul>\n<li>size: 返回集合中所包含的元素的数量</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]).<span class=\"property\">size</span>) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>操作方法</strong></p>\n<ul>\n<li>add(value): 向集合中添加一个新的项</li>\n<li>delete(value): 从集合中删除一个值</li>\n<li>has(value): 如果值在集合中存在，返回ture, 否则返回false</li>\n<li>clear(): 移除集合中的所有项</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">set.<span class=\"title function_\">add</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">set.<span class=\"title function_\">add</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">set.<span class=\"title function_\">add</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">set.<span class=\"title function_\">add</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(set) <span class=\"comment\">// &#123;1,2,3&#125;</span></span><br><span class=\"line\">set.<span class=\"title function_\">has</span>(<span class=\"number\">2</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">set.<span class=\"title function_\">delete</span>(<span class=\"number\">2</span>)  </span><br><span class=\"line\">set.<span class=\"title function_\">has</span>(<span class=\"number\">2</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">set.<span class=\"title function_\">clear</span>() </span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>遍历方法</strong></p>\n<ul>\n<li>keys(): 返回键名的遍历器</li>\n<li>values(): 返回键值的遍历器</li>\n<li>entries(): 返回键值对的遍历器</li>\n<li>forEach(): 使用回调函数遍历每个成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由于set只有键值，没有键名，所以keys() values()行为完全一致</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(set.<span class=\"title function_\">keys</span>())) <span class=\"comment\">// [1,2,3,4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(set.<span class=\"title function_\">values</span>())) <span class=\"comment\">// [1,2,3,4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(set.<span class=\"title function_\">entries</span>())) <span class=\"comment\">//  [[1,1],[2,2],[3,3],[4,4]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">set.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item)&#125;) <span class=\"comment\">// 1,2,3,4</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"#应用场景\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTUlQkElOTQlRTclOTQlQTglRTUlOUMlQkElRTYlOTklQUY=\">#</span>应用场景</h3><p>因为 <code>Set</code> 结构的值是唯一的，我们可以很轻松的实现以下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组去重</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> unique = [... <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 并集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> union = [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([...a, ...b])]; <span class=\"comment\">// [1,2,3,4]</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 交集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> intersect = [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([...a].<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> b.<span class=\"title function_\">has</span>(x)))]; [<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 差集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> difference = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([...a].<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> !b.<span class=\"title function_\">has</span>(x)))); [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"WeakSet\"><a href=\"#WeakSet\" class=\"headerlink\" title=\"#WeakSet\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCN3ZWFrc2V0\">#</span>WeakSet</h2><blockquote>\n<p>WeakSet 对象是一些对象值的集合, 并且其中的每个对象值都只能出现一次。在WeakSet的集合中是唯一的</p>\n</blockquote>\n<p><code>WeakSet</code> 的出现主要解决弱引用对象存储的场景, 其结构与<code>Set</code>类似</p>\n<p>与<code>Set</code>的区别</p>\n<ul>\n<li>与Set相比，WeakSet 只能是对象的集合，而不能是任何类型的任意值</li>\n<li>WeakSet集合中对象的引用为弱引用。 如果没有其他的对WeakSet中对象的引用，那么这些对象会被当成垃圾回收掉。 这也意味着WeakSet中没有存储当前对象的列表。 正因为这样，WeakSet 是不可枚举的</li>\n</ul>\n<p><code>WeakSet</code> 的属性跟操作方法与 <code>Set</code> 一致，不同的是 <code>WeakSet</code> 没有遍历方法，因为其成员都是弱引用，弱引用随时都会消失，遍历机制无法保证成员的存在</p>\n<p><strong>上面一直有提到弱引用，那弱引用到底是指什么呢？</strong></p>\n<blockquote>\n<p>弱引用是指不能确保其引用的对象不会被垃圾回收器回收的引用，换句话说就是可能在任意时间被回收</p>\n</blockquote>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"#Map\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCNtYXA=\">#</span>Map</h2><blockquote>\n<p>Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者原始值) 都可以作为一个键或一个值。一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个 for…of 循环在每次迭代后会返回一个形式为[key，value]的数组</p>\n</blockquote>\n<h3 id=\"基本使用-1\"><a href=\"#基本使用-1\" class=\"headerlink\" title=\"#基本使用\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTUlOUYlQkElRTYlOUMlQUMlRTQlQkQlQkYlRTclOTQlQTgtMg==\">#</span>基本使用</h3><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Map([iterable])` `Iterable` 可以是一个数组或者其他 `iterable` 对象，其元素为键值对(两个元素的数组，例如: [[ 1, &#x27;one&#x27; ],[ 2, &#x27;two&#x27; ]])。 每个键值对都会添加到新的 `Map</span><br><span class=\"line\">let map = new Map()</span><br><span class=\"line\">map.set(&#x27;name&#x27;, &#x27;vuejs.cn&#x27;);</span><br><span class=\"line\">console.log(map.get(&#x27;name&#x27;))</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"属性及方法-1\"><a href=\"#属性及方法-1\" class=\"headerlink\" title=\"#属性及方法\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTUlQjElOUUlRTYlODAlQTclRTUlOEYlOEElRTYlOTYlQjklRTYlQjMlOTUtMg==\">#</span>属性及方法</h3><p>基本跟 <code>Set</code> 类似，同样具有如下方法 <strong>属性</strong></p>\n<ul>\n<li>size: 返回 Map 结构的元素总数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;vuejs.cn&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map.<span class=\"property\">size</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([[<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;vue3js.cn&#x27;</span>], [<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"string\">&#x27;18&#x27;</span>]]).<span class=\"property\">size</span>) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>操作方法</strong></p>\n<ul>\n<li>set(key, value): 向 Map 中加入或更新键值对</li>\n<li>get(key): 读取 key 对用的值，如果没有，返回 undefined</li>\n<li>has(key): 某个键是否在 Map 对象中，在返回 true 否则返回 false</li>\n<li>delete(key): 删除某个键，返回 true, 如果删除失败返回 false</li>\n<li>clear(): 删除所有元素</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;vue3js.cn&#x27;</span>)</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"string\">&#x27;18&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map) <span class=\"comment\">// Map &#123;&quot;name&quot; =&gt; &quot;vuejs.cn&quot;, &quot;age&quot; =&gt; &quot;18&quot;&#125;</span></span><br><span class=\"line\">map.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;name&#x27;</span>) <span class=\"comment\">// vue3js.cn </span></span><br><span class=\"line\">map.<span class=\"title function_\">has</span>(<span class=\"string\">&#x27;name&#x27;</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">map.<span class=\"title function_\">delete</span>(<span class=\"string\">&#x27;name&#x27;</span>)  </span><br><span class=\"line\">map.<span class=\"title function_\">has</span>(name) <span class=\"comment\">// false</span></span><br><span class=\"line\">map.<span class=\"title function_\">clear</span>() <span class=\"comment\">// Map &#123;&#125; </span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>遍历方法</strong></p>\n<ul>\n<li>keys()：返回键名的遍历器</li>\n<li>values()：返回键值的遍历器</li>\n<li>entries()：返回所有成员的遍历器</li>\n<li>forEach()：遍历 Map 的所有成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;vue3js.cn&#x27;</span>)</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"string\">&#x27;18&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([...map.<span class=\"title function_\">keys</span>()])  <span class=\"comment\">// [&quot;name&quot;, &quot;age&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([...map.<span class=\"title function_\">values</span>()])  <span class=\"comment\">// [&quot;vue3js.cn&quot;, &quot;18&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([...map.<span class=\"title function_\">entries</span>()]) <span class=\"comment\">// [[&#x27;name&#x27;,&#x27;vue3js.cn&#x27;], [&#x27;age&#x27;,&#x27;18&#x27;]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// name vuejs.cn</span></span><br><span class=\"line\"><span class=\"comment\">// age 18</span></span><br><span class=\"line\">map.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value, key</span>) =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key, value)&#125;) </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"#应用场景\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTUlQkElOTQlRTclOTQlQTglRTUlOUMlQkElRTYlOTklQUYtMg==\">#</span>应用场景</h3><p><code>Map</code> 会保留所有元素的顺序, 是在基于可迭代的基础上构建的，如果考虑到元素迭代或顺序保留或键值类型丰富的情况下都可以使用，下面摘抄自 <code>vue3</code> 源码中依赖收集的核心实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> depsMap = targetMap.<span class=\"title function_\">get</span>(target)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!depsMap) &#123;</span><br><span class=\"line\">  targetMap.<span class=\"title function_\">set</span>(target, (depsMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dep = depsMap.<span class=\"title function_\">get</span>(key)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dep) &#123;</span><br><span class=\"line\">  depsMap.<span class=\"title function_\">set</span>(key, (dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dep.<span class=\"title function_\">has</span>(activeEffect)) &#123;</span><br><span class=\"line\">  dep.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">  activeEffect.<span class=\"property\">deps</span>.<span class=\"title function_\">push</span>(dep)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"#WeakMap\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCN3ZWFrbWFw\">#</span>WeakMap</h2><blockquote>\n<p>WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的</p>\n</blockquote>\n<p>与<code>Map</code>的区别</p>\n<ul>\n<li>Map 的键可以是任意类型，WeakMap 的键只能是对象类型</li>\n<li>WeakMap 键名所指向的对象，不计入垃圾回收机制</li>\n</ul>\n<p><code>WeakMap</code> 的属性跟操作方法与 <code>Map</code> 一致，同 <code>WeakSet</code> 一样，因为是弱引用，所以 <code>WeakMap</code> 也没有遍历方法</p>\n<h2 id=\"类型的转换\"><a href=\"#类型的转换\" class=\"headerlink\" title=\"#类型的转换\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTclQjElQkIlRTUlOUUlOEIlRTclOUElODQlRTglQkQlQUMlRTYlOEQlQTI=\">#</span>类型的转换</h2><ul>\n<li><code>Map</code> 转为 <code>Array</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解构</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([[<span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">3</span>]])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([...map])    <span class=\"comment\">// [[1, 1], [2, 2], [3, 3]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array.from()</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([[<span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">3</span>]])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(map))    <span class=\"comment\">// [[1, 1], [2, 2], [3, 3]]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>Array</code> 转为 <code>Map</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([[<span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">3</span>]])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map)    <span class=\"comment\">// Map &#123;1 =&gt; 1, 2 =&gt; 2, 3 =&gt; 3&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>Map</code> 转为 <code>Object</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非字符串键名会被转换为字符串</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapToObj</span>(<span class=\"params\">map</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">        obj[key] = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>().<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;vue3js.cn&#x27;</span>).<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;18&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">mapToObj</span>(map)  <span class=\"comment\">// &#123;name: &quot;vue3js.cn&quot;, age: &quot;18&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>Object</code> 转为 <code>Map</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"string\">&quot;a&quot;</span>:<span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>:<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(obj))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"#总结\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTYlODAlQkIlRTclQkIlOTM=\">#</span>总结</h2><ul>\n<li>Set、Map、WeakSet、WeakMap、都是一种集合的数据结构</li>\n<li>Set、WeakSet 是[值,值]的集合，且具有唯一性</li>\n<li>Map 和 WeakMap 是一种[键,值]的集合，Map 的键可以是任意类型，WeakMap 的键只能是对象类型</li>\n<li>Set 和 Map 有遍历方法，WeakSet 和 WeakMap 属于弱引用不可遍历</li>\n</ul>\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/08/17/%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C%E7%9A%8414%E7%A7%8D%E6%96%B9%E6%B3%95/",
            "url": "http://example.com/2023/08/17/%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C%E7%9A%8414%E7%A7%8D%E6%96%B9%E6%B3%95/",
            "title": "对象操作的14种方法",
            "date_published": "2023-08-17T14:20:36.000Z",
            "content_html": "<h1 id=\"js–对象操作的14种方法\"><a href=\"#js–对象操作的14种方法\" class=\"headerlink\" title=\"js–对象操作的14种方法\"></a>js–对象操作的14种方法</h1><a id=\"more\"></a>\n\n<blockquote>\n<p>定义一个 obj 对象</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;a: 1, b: 2&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1、获取原型-GetPrototypeOf\"><a href=\"#1、获取原型-GetPrototypeOf\" class=\"headerlink\" title=\"1、获取原型 [[GetPrototypeOf]]\"></a>1、获取原型 [[GetPrototypeOf]]</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 以下 3 种方式都获取到了 obj 的原型，但是只有第一种是函数式方法，是 js 内置提供的方法，推荐使用第一种</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.getPrototypeOf(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj.__proto__)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.prototype)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、设置原型-SetPrototypeOf\"><a href=\"#2、设置原型-SetPrototypeOf\" class=\"headerlink\" title=\"2、设置原型 [[SetPrototypeOf]]\"></a>2、设置原型 [[SetPrototypeOf]]</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.setPrototypeOf(obj, &#123;c: 3&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.getPrototypeOf(obj)) // obj 的 __proto__ 设置成了 &#123;c: 3&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、判断是否可扩展-IsExtensible\"><a href=\"#3、判断是否可扩展-IsExtensible\" class=\"headerlink\" title=\"3、判断是否可扩展 [[IsExtensible]]\"></a>3、判断是否可扩展 [[IsExtensible]]</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Object.isExtensible(obj)) // true</span><br><span class=\"line\"></span><br><span class=\"line\">// 可扩展的意思是可以给对象添加属性</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、禁止扩展-PreventExtensions\"><a href=\"#4、禁止扩展-PreventExtensions\" class=\"headerlink\" title=\"4、禁止扩展 [[PreventExtensions]]\"></a>4、禁止扩展 [[PreventExtensions]]</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.preventExtensions(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.c = 3</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj) // &#123;a: 1, b: 2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.isExtensible(obj)) // false</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、获取自有属性-GetOwnProperty\"><a href=\"#5、获取自有属性-GetOwnProperty\" class=\"headerlink\" title=\"5、获取自有属性 [[GetOwnProperty]]\"></a>5、获取自有属性 [[GetOwnProperty]]</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.setPrototypeOf(obj, &#123;c: 3&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.getOwnPropertyNames(obj)) // [&quot;a&quot;, &quot;b&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">// 这里只能获取到 obj 的自有属性，会把原型链上的属性排除掉</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、判断是否是自有属性-HasProperty\"><a href=\"#6、判断是否是自有属性-HasProperty\" class=\"headerlink\" title=\"6、判断是否是自有属性 [[HasProperty]]\"></a>6、判断是否是自有属性 [[HasProperty]]</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(obj.hasOwnProperty(&#x27;a&#x27;)) // true</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj.hasOwnProperty(&#x27;c&#x27;)) // false</span><br><span class=\"line\"></span><br><span class=\"line\">Object.setPrototypeOf(obj, &#123;c: 3&#125;) // 设置原型属性</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj.hasOwnProperty(&#x27;c&#x27;)) // false</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7、拦截对象操作-DefineOwnProperty\"><a href=\"#7、拦截对象操作-DefineOwnProperty\" class=\"headerlink\" title=\"7、拦截对象操作 [[DefineOwnProperty]]\"></a>7、拦截对象操作 [[DefineOwnProperty]]</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj2 = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(obj2, &#x27;c&#x27;, &#123;</span><br><span class=\"line\">  set(value) &#123;</span><br><span class=\"line\">    console.log(&#x27;成功拦截了设置 c 属性的操作&#x27;)</span><br><span class=\"line\">    obj[&#x27;c&#x27;] = value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  get() &#123;</span><br><span class=\"line\">    console.log(&#x27;成功拦截了读取 c 属性的操作&#x27;)</span><br><span class=\"line\">    return obj[&#x27;c&#x27;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">obj2.c = 3</span><br><span class=\"line\">console.log(obj2.c)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8、获取-GET\"><a href=\"#8、获取-GET\" class=\"headerlink\" title=\"8、获取 [[GET]]\"></a>8、获取 [[GET]]</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.setPrototypeOf(obj, &#123;c: 3&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj.a) // 1</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj.c) // 3</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#x27;c&#x27; in obj) // true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9、设置-SET\"><a href=\"#9、设置-SET\" class=\"headerlink\" title=\"9、设置 [[SET]]\"></a>9、设置 [[SET]]</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.a = 4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">obj[&#x27;b&#x27;] = 5</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj) // &#123;a: 4, b: 5&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10、删除-Delete\"><a href=\"#10、删除-Delete\" class=\"headerlink\" title=\"10、删除 [[Delete]]\"></a>10、删除 [[Delete]]</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete obj.a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj) // &#123;b: 2&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11、枚举-Enumerate\"><a href=\"#11、枚举-Enumerate\" class=\"headerlink\" title=\"11、枚举 [[Enumerate]]\"></a>11、枚举 [[Enumerate]]</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.setPrototypeOf(obj, &#123;c: 3&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for (var property in obj) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  console.log(property + &#x27;: &#x27; + obj[property])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 可以把原型链上的属性也枚举出来</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12、获取键集合-OwnPropertyKeys\"><a href=\"#12、获取键集合-OwnPropertyKeys\" class=\"headerlink\" title=\"12、获取键集合 [[OwnPropertyKeys]]\"></a>12、获取键<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTklOUIlODYlRTUlOTAlODgmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">集合</span> [[OwnPropertyKeys]]</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.setPrototypeOf(obj, &#123;c: 3&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.keys(obj)) // [&quot;a&quot;, &quot;b&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 只能获取自有键，不能获取原型链上的键</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13、调用函数\"><a href=\"#13、调用函数\" class=\"headerlink\" title=\"13、调用函数\"></a>13、调用函数</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">obj.test = function () &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">obj.test()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14、实例化对象\"><a href=\"#14、实例化对象\" class=\"headerlink\" title=\"14、实例化对象\"></a>14、实例化对象</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Test() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new Test()</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/08/16/%E8%99%9A%E6%8B%9Fdom%E5%8F%8Arender%E6%B8%B2%E6%9F%93%E5%99%A8/",
            "url": "http://example.com/2023/08/16/%E8%99%9A%E6%8B%9Fdom%E5%8F%8Arender%E6%B8%B2%E6%9F%93%E5%99%A8/",
            "title": "虚拟dom及render渲染器",
            "date_published": "2023-08-16T11:36:07.000Z",
            "content_html": "<h1 id=\"简单手写虚拟dom及渲染器\"><a href=\"#简单手写虚拟dom及渲染器\" class=\"headerlink\" title=\"简单手写虚拟dom及渲染器\"></a>简单手写虚拟dom及渲染器</h1><a id=\"more\"></a>\n\n<h2 id=\"1-虚拟dom\"><a href=\"#1-虚拟dom\" class=\"headerlink\" title=\"1.虚拟dom\"></a>1.虚拟dom</h2><blockquote>\n<p>虚拟DOM就是普通的js对象。是一个用来描述真实dom结构的js对象，因为它不是真实的dom，所以才叫做虚拟dom。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let dom = &#123;</span><br><span class=\"line\">    tag: &#x27;div&#x27;,</span><br><span class=\"line\">    props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">    children: &#x27;内容&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-render渲染器\"><a href=\"#2-render渲染器\" class=\"headerlink\" title=\"2.render渲染器\"></a>2.render渲染器</h2><blockquote>\n<p>render就是一个函数，用于将虚拟dom转为真实的dom</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function renderer (vnode, container) &#123; // vnode为要传入的虚拟dom对象， container为要挂载到的节点</span><br><span class=\"line\">    // 创建最外层元素</span><br><span class=\"line\">    const el = document.createElement(vnode.tag)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 props</span><br><span class=\"line\">    for(key in vnode.props)&#123;</span><br><span class=\"line\">        if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">             el.addEventListener(</span><br><span class=\"line\">                  key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 children</span><br><span class=\"line\">    if(typeof vnode.children === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        const text = document.createTextElement(vnode.children)</span><br><span class=\"line\">        el.appendChild(text)</span><br><span class=\"line\">    &#125;else if(Array.isArray(vnode.children)) &#123;</span><br><span class=\"line\">        renderer(vnode.children, el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 渲染到要挂载的节点上</span><br><span class=\"line\">    container.appendChild(el)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-组件的渲染\"><a href=\"#3-组件的渲染\" class=\"headerlink\" title=\"3.组件的渲染\"></a>3.组件的渲染</h2><blockquote>\n<p>组件就是一组 DOM 元素的封装，这组 DOM 元素就是组件要渲染的内容，因此我们可以定义一个函数来代表组件，而函数的返回值就代表组件要渲染的内容</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方法形式</span><br><span class=\"line\">function MyComponent () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        tag: &#x27;div&#x27;,</span><br><span class=\"line\">        props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">        children: &#x27;内容&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 对象形式</span><br><span class=\"line\">let MyComponent = &#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return:&#123;</span><br><span class=\"line\">            tag: &#x27;div&#x27;,</span><br><span class=\"line\">            props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">            children: &#x27;内容&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">///</span><br><span class=\"line\">const vnode = &#123;</span><br><span class=\"line\">    tag: MyComponent</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>现在需要renderer渲染的有两部分，一个属组件 一个是虚拟dom对象 所以需要判断， 若 vnode.tag 类型为string 则是标签，若为object，则是组件 </p>\n</blockquote>\n<h3 id=\"分别创建渲染组件和标签的方法\"><a href=\"#分别创建渲染组件和标签的方法\" class=\"headerlink\" title=\"分别创建渲染组件和标签的方法\"></a>分别创建渲染组件和标签的方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 渲染标签的函数</span><br><span class=\"line\">function mountElement(vnode,container)&#123;</span><br><span class=\"line\">        // 创建最外层元素</span><br><span class=\"line\">    const el = document.createElement(vnode.tag)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 props</span><br><span class=\"line\">    for(key in vnode.props)&#123;</span><br><span class=\"line\">        if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">             el.addEventListener(</span><br><span class=\"line\">                  key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 children</span><br><span class=\"line\">    if(typeof vnode.children === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        const text = document.createTextElement(vnode.children)</span><br><span class=\"line\">        el.appendChild(text)</span><br><span class=\"line\">    &#125;else if(Array.isArray(vnode.children)) &#123;</span><br><span class=\"line\">        renderer(vnode.children, el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 渲染到要挂载的节点上</span><br><span class=\"line\">    container.appendChild(el)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 渲染组件的函数</span><br><span class=\"line\">function mountComponent(vnode,container)&#123;</span><br><span class=\"line\">    const subTree = vnode.tag()</span><br><span class=\"line\">    renderer(subTree,container)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 渲染器</span><br><span class=\"line\">function renderer(vnode,container)&#123;</span><br><span class=\"line\">    if(typeof vnode.tag === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        mountElement(vnode,container)</span><br><span class=\"line\">    &#125;else if(vnode.tag === &#x27;function&#x27;) &#123;</span><br><span class=\"line\">        mountComponent(vnode,container)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"当组件为对象格式\"><a href=\"#当组件为对象格式\" class=\"headerlink\" title=\"当组件为对象格式\"></a>当组件为对象格式</h3><blockquote>\n<p>对渲染组件的函数进行修改</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 渲染组件的函数</span><br><span class=\"line\">function mountComponent(vnode,container)&#123;</span><br><span class=\"line\">    const subTree = vnode.tag.render()</span><br><span class=\"line\">    renderer(subTree,container)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对渲染器进行修改</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function renderer(vnode,container)&#123;</span><br><span class=\"line\">    if(typeof vnode.tag === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        mountElement(vnode,container)</span><br><span class=\"line\">    &#125;else if(vnode.tag === &#x27;object&#x27;) &#123;</span><br><span class=\"line\">        mountComponent(vnode,container)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "vue3"
            ]
        },
        {
            "id": "http://example.com/2023/08/14/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/",
            "url": "http://example.com/2023/08/14/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/",
            "title": "js字符串方法",
            "date_published": "2023-08-14T13:49:10.000Z",
            "content_html": "<h1 id=\"js–字符串方法\"><a href=\"#js–字符串方法\" class=\"headerlink\" title=\"js–字符串方法\"></a>js–字符串方法</h1><a id=\"more\"></a>\n\n<blockquote>\n<h2 id=\"操作方法-转换方法-模板匹配方法\"><a href=\"#操作方法-转换方法-模板匹配方法\" class=\"headerlink\" title=\"操作方法 转换方法 模板匹配方法\"></a>操作方法 转换方法 模板匹配方法</h2></blockquote>\n<h2 id=\"一、操作方法\"><a href=\"#一、操作方法\" class=\"headerlink\" title=\"一、操作方法\"></a>一、操作方法</h2><p>我们也可将字符串常用的操作方法归纳为增、删、改、查，需要知道字符串的特点是一旦创建了，就不可变</p>\n<h3 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"#增\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sIyVFNSVBMiU5RQ==\">#</span>增</h3><p>这里增的意思并不是说直接增添内容，而是创建字符串的一个副本，再进行操作</p>\n<p>除了常用<code>+</code>以及<code>$&#123;&#125;</code>进行字符串拼接之外，还可通过<code>concat</code></p>\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"#concat\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI2NvbmNhdA==\">#</span>concat</h4><p>用于将一个或多个字符串拼接成一个新字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot;hello &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = stringValue.<span class=\"title function_\">concat</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// &quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue); <span class=\"comment\">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"#删\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sIyVFNSU4OCVBMA==\">#</span>删</h3><p>这里的删的意思并不是说删除原字符串的内容，而是创建字符串的一个副本，再进行操作</p>\n<p>常见的有：</p>\n<ul>\n<li>slice()</li>\n<li>substr()</li>\n<li>substring()</li>\n</ul>\n<p>这三个方法都返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>(<span class=\"number\">3</span>)); <span class=\"comment\">// &quot;lo world&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>(<span class=\"number\">3</span>)); <span class=\"comment\">// &quot;lo world&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>(<span class=\"number\">3</span>)); <span class=\"comment\">// &quot;lo world&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>(<span class=\"number\">3</span>, <span class=\"number\">7</span>)); <span class=\"comment\">// &quot;lo w&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>(<span class=\"number\">3</span>,<span class=\"number\">7</span>)); <span class=\"comment\">// &quot;lo w&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>(<span class=\"number\">3</span>, <span class=\"number\">7</span>)); <span class=\"comment\">// &quot;lo worl&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"#改\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sIyVFNiU5NCVCOQ==\">#</span>改</h3><p>这里改的意思也不是改变原字符串，而是创建字符串的一个副本，再进行操作</p>\n<p>常见的有：</p>\n<ul>\n<li>trim()、trimLeft()、trimRight()</li>\n<li>repeat()</li>\n<li>padStart()、padEnd()</li>\n<li>toLowerCase()、 toUpperCase()</li>\n</ul>\n<h4 id=\"trim-、trimLeft-、trimRight\"><a href=\"#trim-、trimLeft-、trimRight\" class=\"headerlink\" title=\"#trim()、trimLeft()、trimRight()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3RyaW0tJUUzJTgwJTgxdHJpbWxlZnQtJUUzJTgwJTgxdHJpbXJpZ2h0\">#</span>trim()、trimLeft()、trimRight()</h4><p>删除前、后或前后所有空格符，再返回新的字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot; hello world &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> trimmedStringValue = stringValue.<span class=\"title function_\">trim</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue); <span class=\"comment\">// &quot; hello world &quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(trimmedStringValue); <span class=\"comment\">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"#repeat()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3JlcGVhdA==\">#</span>repeat()</h4><p>接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot;na &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> copyResult = stringValue.<span class=\"title function_\">repeat</span>(<span class=\"number\">2</span>) <span class=\"comment\">// na na </span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"padEnd\"><a href=\"#padEnd\" class=\"headerlink\" title=\"#padEnd()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3BhZGVuZA==\">#</span>padEnd()</h4><p>复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">padStart</span>(<span class=\"number\">6</span>)); <span class=\"comment\">// &quot; foo&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">padStart</span>(<span class=\"number\">9</span>, <span class=\"string\">&quot;.&quot;</span>)); <span class=\"comment\">// &quot;......foo&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"toLowerCase-、-toUpperCase\"><a href=\"#toLowerCase-、-toUpperCase\" class=\"headerlink\" title=\"#toLowerCase()、 toUpperCase()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3RvbG93ZXJjYXNlLSVFMyU4MCU4MS10b3VwcGVyY2FzZQ==\">#</span>toLowerCase()、 toUpperCase()</h3><p>大小写转化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">// &quot;HELLO WORLD&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">toLowerCase</span>()); <span class=\"comment\">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"#查\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sIyVFNiU5RiVBNQ==\">#</span>查</h3><p>除了通过索引的方式获取字符串的值，还可通过：</p>\n<ul>\n<li>chatAt()</li>\n<li>indexOf()</li>\n<li>startWith()</li>\n<li>includes()</li>\n</ul>\n<h4 id=\"charAt\"><a href=\"#charAt\" class=\"headerlink\" title=\"#charAt()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI2NoYXJhdA==\">#</span>charAt()</h4><p>返回给定索引位置的字符，由传给方法的整数参数指定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">&quot;abcde&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message.<span class=\"title function_\">charAt</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// &quot;c&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"#indexOf()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI2luZGV4b2Y=\">#</span>indexOf()</h4><p>从字符串开头去搜索传入的字符串，并返回位置（如果没找到，则返回 -1 ）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;o&quot;</span>)); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"startWith-、includes\"><a href=\"#startWith-、includes\" class=\"headerlink\" title=\"#startWith()、includes()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3N0YXJ0d2l0aC0lRTMlODAlODFpbmNsdWRlcw==\">#</span>startWith()、includes()</h4><p>从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">&quot;foobarbaz&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;foo&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;bar&quot;</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;bar&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;qux&quot;</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二、转换方法\"><a href=\"#二、转换方法\" class=\"headerlink\" title=\"#二、转换方法\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sIyVFNCVCQSU4QyVFMyU4MCU4MSVFOCVCRCVBQyVFNiU4RCVBMiVFNiU5NiVCOSVFNiVCMyU5NQ==\">#</span>二、转换方法</h2><h3 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"#split\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3NwbGl0\">#</span>split</h3><p>把字符串按照指定的分割符，拆分成数组中的每一项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;12+23+34&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = str.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;+&quot;</span>) <span class=\"comment\">// [12,23,34]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三、模板匹配方法\"><a href=\"#三、模板匹配方法\" class=\"headerlink\" title=\"#三、模板匹配方法\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sIyVFNCVCOCU4OSVFMyU4MCU4MSVFNiVBOCVBMSVFNiU5RCVCRiVFNSU4QyVCOSVFOSU4NSU4RCVFNiU5NiVCOSVFNiVCMyU5NQ==\">#</span>三、模板匹配方法</h2><p>针对正则表达式，字符串设计了几个方法：</p>\n<ul>\n<li>match()</li>\n<li>search()</li>\n<li>replace()</li>\n</ul>\n<h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"#match()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI21hdGNo\">#</span>match()</h3><p>接收一个参数，可以是一个正则表达式字符串，也可以是一个<code>RegExp</code>对象，返回数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/.at/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> matches = text.<span class=\"title function_\">match</span>(pattern);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matches[<span class=\"number\">0</span>]); <span class=\"comment\">// &quot;cat&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"#search()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3NlYXJjaA==\">#</span>search()</h3><p>接收一个参数，可以是一个正则表达式字符串，也可以是一个<code>RegExp</code>对象，找到则返回匹配索引，否则返回 -1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pos = text.<span class=\"title function_\">search</span>(<span class=\"regexp\">/at/</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pos); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"#replace()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3JlcGxhY2U=\">#</span>replace()</h3><p>接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素（可用函数）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = text.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;at&quot;</span>, <span class=\"string\">&quot;ond&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// &quot;cond, bat, sat, fat&quot;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/08/14/jsthis%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2023/08/14/jsthis%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/",
            "title": "jsthis指向问题",
            "date_published": "2023-08-14T02:56:55.000Z",
            "content_html": "<h1 id=\"js–this指向问题\"><a href=\"#js–this指向问题\" class=\"headerlink\" title=\"js–this指向问题\"></a>js–this指向问题</h1><a id=\"more\"></a>\n\n<h2 id=\"1-普通\"><a href=\"#1-普通\" class=\"headerlink\" title=\"1.普通\"></a>1.普通</h2><blockquote>\n<p>this有三种指向 ，原则为谁调用指向谁。</p>\n</blockquote>\n<h3 id=\"1-普通函数\"><a href=\"#1-普通函数\" class=\"headerlink\" title=\"1.普通函数\"></a>1.普通函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = &#x27;window&#x27;</span><br><span class=\"line\">function sayName () &#123;</span><br><span class=\"line\">    console.log(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayName()// 指向window  打印window</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-new构造函数\"><a href=\"#2-new构造函数\" class=\"headerlink\" title=\"2.new构造函数\"></a>2.new构造函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = new Object()</span><br><span class=\"line\">a.name = &#x27;new&#x27;</span><br><span class=\"line\">a.say = sayName</span><br><span class=\"line\">console.log(a.say())// 打印new  this指向实例a</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-对象方法\"><a href=\"#3-对象方法\" class=\"headerlink\" title=\"3.对象方法\"></a>3.对象方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const people = &#123;</span><br><span class=\"line\">    name: &#x27;jake&#x27;,</span><br><span class=\"line\">    age: 18,</span><br><span class=\"line\">    say : sayName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">people.say() // this指向people 打印jake</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-箭头函数\"><a href=\"#2-箭头函数\" class=\"headerlink\" title=\"2.箭头函数\"></a>2.箭头函数</h2><blockquote>\n<p>箭头函数中没有this, 但是根据作用域链 会向上找。定义在哪里 就在那里的上一层找</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = &#x27;window&#x27;</span><br><span class=\"line\">const  sayName = ()=&gt;&#123;</span><br><span class=\"line\">    conlose.log(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayName() // 指向window, 打印 window</span><br><span class=\"line\"></span><br><span class=\"line\">const people = &#123;</span><br><span class=\"line\">    name: &#x27;jake&#x27;,</span><br><span class=\"line\">    age: 18,</span><br><span class=\"line\">    say : sayName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">people.say // 打印window</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/08/13/js%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/",
            "url": "http://example.com/2023/08/13/js%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/",
            "title": "js数组方法",
            "date_published": "2023-08-13T12:53:27.000Z",
            "content_html": "<h1 id=\"js–数组方法\"><a href=\"#js–数组方法\" class=\"headerlink\" title=\"js–数组方法\"></a>js–数组方法</h1><a id=\"more\"></a>\n\n<blockquote>\n<p>数组常见方法：操作方法 排序方法 转换方法 迭代方法，</p>\n</blockquote>\n<h2 id=\"1-操作方法\"><a href=\"#1-操作方法\" class=\"headerlink\" title=\"1.操作方法\"></a>1.操作方法</h2><blockquote>\n<p>增  删  改  查</p>\n</blockquote>\n<h3 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"#增\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjJUU1JUEyJTlF\">#</span>增</h3><p>下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响</p>\n<ul>\n<li>push()</li>\n<li>unshift()</li>\n<li>splice()</li>\n<li>concat()</li>\n</ul>\n<h4 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"#push()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjcHVzaA==\">#</span>push()</h4><p><code>push()</code>方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = []; <span class=\"comment\">// 创建一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = colors.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>); <span class=\"comment\">// 推入两项</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"#unshift()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjdW5zaGlmdA==\">#</span>unshift()</h4><p>unshift()在数组开头添加任意多个值，然后返回新的数组长度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(); <span class=\"comment\">// 创建一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = colors.<span class=\"title function_\">unshift</span>(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>); <span class=\"comment\">// 从数组开头推入两项</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(count); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"#splice\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc3BsaWNl\">#</span>splice</h4><p>传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> removed = colors.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors) <span class=\"comment\">// red,yellow,orange,green,blue</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(removed) <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"#concat()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjY29uY2F0\">#</span>concat()</h4><p>首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> colors2 = colors.<span class=\"title function_\">concat</span>(<span class=\"string\">&quot;yellow&quot;</span>, [<span class=\"string\">&quot;black&quot;</span>, <span class=\"string\">&quot;brown&quot;</span>]);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors); <span class=\"comment\">// [&quot;red&quot;, &quot;green&quot;,&quot;blue&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors2); <span class=\"comment\">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"#删\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjJUU1JTg4JUEw\">#</span>删</h3><p>下面三种都会影响原数组，最后一项不影响原数组：</p>\n<ul>\n<li>pop()</li>\n<li>shift()</li>\n<li>splice()</li>\n<li>slice()</li>\n</ul>\n<h4 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"#pop()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjcG9w\">#</span>pop()</h4><p><code>pop()</code> 方法用于删除数组的最后一项，同时减少数组的<code>length</code> 值，返回被删除的项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = colors.<span class=\"title function_\">pop</span>(); <span class=\"comment\">// 取得最后一项</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item) <span class=\"comment\">// green</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors.<span class=\"property\">length</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"#shift()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc2hpZnQ=\">#</span>shift()</h4><p><code>shift()</code>方法用于删除数组的第一项，同时减少数组的<code>length</code> 值，返回被删除的项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = colors.<span class=\"title function_\">shift</span>(); <span class=\"comment\">// 取得第一项</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item) <span class=\"comment\">// red</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors.<span class=\"property\">length</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"splice-1\"><a href=\"#splice-1\" class=\"headerlink\" title=\"#splice()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc3BsaWNlLTI=\">#</span>splice()</h4><p>传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> removed = colors.<span class=\"title function_\">splice</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>); <span class=\"comment\">// 删除第一项</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors); <span class=\"comment\">// green,blue</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(removed); <span class=\"comment\">// red，只有一个元素的数组</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"#slice()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc2xpY2U=\">#</span>slice()</h3><p>slice() 用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;purple&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> colors2 = colors.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> colors3 = colors.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors)   <span class=\"comment\">// red,green,blue,yellow,purple</span></span><br><span class=\"line\">concole.<span class=\"title function_\">log</span>(colors2); <span class=\"comment\">// green,blue,yellow,purple</span></span><br><span class=\"line\">concole.<span class=\"title function_\">log</span>(colors3); <span class=\"comment\">// green,blue,yellow</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"#改\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjJUU2JTk0JUI5\">#</span>改</h4><p>即修改原来数组的内容，常用<code>splice</code></p>\n<h4 id=\"splice-2\"><a href=\"#splice-2\" class=\"headerlink\" title=\"#splice()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc3BsaWNlLTM=\">#</span>splice()</h4><p>传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> removed = colors.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;purple&quot;</span>); <span class=\"comment\">// 插入两个值，删除一个元素</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors); <span class=\"comment\">// red,red,purple,blue</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(removed); <span class=\"comment\">// green，只有一个元素的数组</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"#查\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjJUU2JTlGJUE1\">#</span>查</h4><p>即查找元素，返回元素坐标或者元素值</p>\n<ul>\n<li>indexOf()</li>\n<li>includes()</li>\n<li>find()</li>\n</ul>\n<h4 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"#indexOf()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjaW5kZXhvZg==\">#</span>indexOf()</h4><p>返回要查找的元素在数组中的位置，如果没找到则返回 -1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">numbers.<span class=\"title function_\">indexOf</span>(<span class=\"number\">4</span>) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"#includes()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjaW5jbHVkZXM=\">#</span>includes()</h4><p>返回要查找的元素在数组中的位置，找到返回<code>true</code>，否则<code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">numbers.<span class=\"title function_\">includes</span>(<span class=\"number\">4</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"#find()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjZmluZA==\">#</span>find()</h4><p>返回第一个匹配的元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> people = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;Matt&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">27</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;Nicholas&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">29</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">people.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">element, index, array</span>) =&gt;</span> element.<span class=\"property\">age</span> &lt; <span class=\"number\">28</span>) <span class=\"comment\">// // &#123;name: &quot;Matt&quot;, age: 27&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-排序方法\"><a href=\"#2-排序方法\" class=\"headerlink\" title=\"2.排序方法\"></a>2.排序方法</h2><p>数组有两个方法可以用来对元素重新排序：</p>\n<ul>\n<li>reverse()</li>\n<li>sort()</li>\n</ul>\n<h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"#reverse()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjcmV2ZXJzZQ==\">#</span>reverse()</h3><p>顾名思义，将数组元素方向反转</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">values.<span class=\"title function_\">reverse</span>();</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(values); <span class=\"comment\">// 5,4,3,2,1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"#sort()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc29ydA==\">#</span>sort()</h3><p>sort()方法接受一个比较函数，用于判断哪个值应该排在前面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">compare</span>(<span class=\"params\">value1, value2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value1 &lt; value2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value1 &gt; value2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\">values.<span class=\"title function_\">sort</span>(compare);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(values); <span class=\"comment\">// 0,1,5,10,15</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-转换方法\"><a href=\"#3-转换方法\" class=\"headerlink\" title=\"3.转换方法\"></a>3.转换方法</h2><h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h3><p>join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(colors.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;,&quot;</span>)); <span class=\"comment\">// red,green,blue</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(colors.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;||&quot;</span>)); <span class=\"comment\">// red||green||blue</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-迭代方法\"><a href=\"#4-迭代方法\" class=\"headerlink\" title=\"4.迭代方法\"></a>4.迭代方法</h2><p>常用来迭代数组的方法（都不改变原数组）有如下：</p>\n<ul>\n<li>some()</li>\n<li>every()</li>\n<li>forEach()</li>\n<li>filter()</li>\n<li>map()</li>\n</ul>\n<h3 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"#some()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc29tZQ==\">#</span>some()</h3><p>对数组每一项都运行传入的测试函数，如果至少有1个元素返回 true ，则这个方法返回 true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> someResult = numbers.<span class=\"title function_\">some</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> item &gt; <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(someResult) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"#every()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjZXZlcnk=\">#</span>every()</h3><p>对数组每一项都运行传入的测试函数，如果所有元素都返回 true ，则这个方法返回 true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> everyResult = numbers.<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> item &gt; <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(everyResult) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"#forEach()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjZm9yZWFjaA==\">#</span>forEach()</h3><p>对数组每一项都运行传入的函数，没有返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">numbers.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行某些操作</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"#filter()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjZmlsdGVy\">#</span>filter()</h3><p>对数组每一项都运行传入的函数，函数返回 <code>true</code> 的项会组成数组之后返回</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> filterResult = numbers.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> item &gt; <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(filterResult); <span class=\"comment\">// 3,4,5,4,3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"#map()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjbWFw\">#</span>map()</h3><p>对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> mapResult = numbers.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> item * <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(mapResult) <span class=\"comment\">// 2,4,6,8,10,8,6,4,2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-数组扁平化\"><a href=\"#5-数组扁平化\" class=\"headerlink\" title=\"5.数组扁平化\"></a>5.数组扁平化</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1, [2, [3, 4]]];</span><br><span class=\"line\">function flatten(arr) &#123;</span><br><span class=\"line\">  return arr.flat(Infinity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(flatten(arr)); //  [1, 2, 3, 4，5]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-数组求和\"><a href=\"#6-数组求和\" class=\"headerlink\" title=\"6.数组求和\"></a>6.数组求和</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev,cur,index,arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,init)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>arr: 表示将要原数组</li>\n<li>prev:表示上一次调用回调时的返回值，或者初始值init</li>\n<li>cur:表示当前正在处理的数组元素</li>\n<li>index:表示正在处理的数组元素的索引，若提供init值，则索引为0，否则索引为1</li>\n<li>init: 表示初始值</li>\n</ul>\n<p>案例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制代码<span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre +cur</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/08/12/js%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE/",
            "url": "http://example.com/2023/08/12/js%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE/",
            "title": "js原型原型链",
            "date_published": "2023-08-12T11:38:23.000Z",
            "content_html": "<h1 id=\"js–原型-原型链\"><a href=\"#js–原型-原型链\" class=\"headerlink\" title=\"js–原型 原型链\"></a>js–原型 原型链</h1><a id=\"more\"></a>\n\n<blockquote>\n<p>每个函数都有一个prototype, 每个对象都有一个-proto- 指向其原型对象prototype</p>\n</blockquote>\n<h3 id=\"prototype：\"><a href=\"#prototype：\" class=\"headerlink\" title=\"prototype：\"></a>prototype：</h3><blockquote>\n<p>每个函数都有prototype属性 称之为原型， 因为这个属性的值是个对象，也成为原型对象</p>\n</blockquote>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><blockquote>\n<p>存放一些属性和方法</p>\n<p>实现继承</p>\n</blockquote>\n<h3 id=\"proto-：\"><a href=\"#proto-：\" class=\"headerlink\" title=\"-proto-_：\"></a>-proto-_：</h3><blockquote>\n<p>每个对象对象都有-proto-属性</p>\n</blockquote>\n<h4 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4><blockquote>\n<p>这个属性指向它的原型对象</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = new Array(1,2,3)</span><br><span class=\"line\">arr.__proto__ === Array.prototype // true</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/08/12/js%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "http://example.com/2023/08/12/js%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "js判断数据类型",
            "date_published": "2023-08-12T11:29:14.000Z",
            "content_html": "<h1 id=\"js–typeof与instanceof\"><a href=\"#js–typeof与instanceof\" class=\"headerlink\" title=\"js–typeof与instanceof\"></a>js–typeof与instanceof</h1><a id=\"more\"></a>\n\n<h2 id=\"js数据类型\"><a href=\"#js数据类型\" class=\"headerlink\" title=\"js数据类型\"></a>js数据类型</h2><ol>\n<li><code>undefined</code></li>\n<li><code>Null</code></li>\n<li><code>Boolean</code></li>\n<li><code>Number</code></li>\n<li><code>String</code></li>\n<li><code>Symbol</code></li>\n<li>引用数据类型</li>\n</ol>\n<h2 id=\"typeof主要用于判断基本数据类型\"><a href=\"#typeof主要用于判断基本数据类型\" class=\"headerlink\" title=\"typeof主要用于判断基本数据类型\"></a>typeof主要用于判断基本数据类型</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Numbers </span><br><span class=\"line\">typeof 37 === &#x27;number&#x27;;</span><br><span class=\"line\">// Strings </span><br><span class=\"line\">typeof &quot;&quot; === &#x27;string&#x27;;</span><br><span class=\"line\">// Booleans </span><br><span class=\"line\">typeof true === &#x27;boolean&#x27;;</span><br><span class=\"line\">// Symbols </span><br><span class=\"line\">typeof Symbol(&#x27;foo&#x27;) === &#x27;symbol&#x27;;</span><br><span class=\"line\">// Undefined </span><br><span class=\"line\">typeof undefined === &#x27;undefined&#x27;; </span><br><span class=\"line\">typeof blabla === &#x27;undefined&#x27;; // 一个未定义的变量,或者一个定义了却未赋初值的变量</span><br><span class=\"line\">// Objects </span><br><span class=\"line\">typeof &#123;a:1&#125; === &#x27;object&#x27;;</span><br><span class=\"line\">type [1,2,3] = &#x27;object&#x27;</span><br><span class=\"line\">------------------------&#x27;下面是不是有点奇怪？&#x27;--------------------------</span><br><span class=\"line\">// 函数</span><br><span class=\"line\">typeof function()&#123;&#125; === &#x27;function&#x27;;</span><br><span class=\"line\">// Null</span><br><span class=\"line\">typeof null === &#x27;object&#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"instanceof判断该对象是谁的实例\"><a href=\"#instanceof判断该对象是谁的实例\" class=\"headerlink\" title=\"instanceof判断该对象是谁的实例\"></a>instanceof判断该对象是谁的实例</h2><blockquote>\n<p><code>instanceof</code>的判断就是根据原型链进行搜寻，在对象obj1的原型链上如果存在另一个对象obj2的原型属性，那么表达式（<code>obj1 instanceof obj2</code>）返回值为true；否则返回false。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Parent()&#123;&#125;;</span><br><span class=\"line\">function Child()&#123;&#125;;</span><br><span class=\"line\">function Other()&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype = new Parent();</span><br><span class=\"line\">let child = new Child();</span><br><span class=\"line\"></span><br><span class=\"line\">child instanceof Child; // true</span><br><span class=\"line\">child instanceof Parent; // true</span><br><span class=\"line\">child instanceof Object; // true</span><br><span class=\"line\">child instanceof Other; // false</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"typeof与instanceof都是判断数据类型的方法，区别如下：\"><a href=\"#typeof与instanceof都是判断数据类型的方法，区别如下：\" class=\"headerlink\" title=\"typeof与instanceof都是判断数据类型的方法，区别如下：\"></a>typeof与instanceof都是判断数据类型的方法，区别如下：</h2><ol>\n<li>typeof会返回一个变量的基本类型，instanceof返回的是一个布尔值</li>\n<li>instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</li>\n<li>而typeof 也存在弊端，它虽然可以判断基础数据类型（null 除外），但是引用数据类型中，除了function 类型以外，其他的也无法判断</li>\n</ol>\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "http://example.com/2023/08/11/vue3/",
            "url": "http://example.com/2023/08/11/vue3/",
            "title": "vue3",
            "date_published": "2023-08-11T14:10:03.000Z",
            "content_html": "<h1 id=\"VUE3学习\"><a href=\"#VUE3学习\" class=\"headerlink\" title=\"VUE3学习\"></a><p class=\"color-blue\">VUE3学习</p></h1><a id=\"more\"></a>\n\n<h1 id=\"1-使用vite创建项目\"><a href=\"#1-使用vite创建项目\" class=\"headerlink\" title=\"1.使用vite创建项目\"></a>1.使用vite创建项目</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm create vite@latest 《项目名称》 --template vue</span><br><span class=\"line\">到文件夹中npm install</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-模板语法\"><a href=\"#2-模板语法\" class=\"headerlink\" title=\"2.模板语法\"></a>2.模板语法</h1><h2 id=\"1-v-once\"><a href=\"#1-v-once\" class=\"headerlink\" title=\"1.v-once\"></a>1.v-once</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-once&gt;  &#123;&#123; uname &#125;&#125; &lt;/p&gt;</span><br><span class=\"line\">当改变uname时，插值不会更新</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态参数\"><a href=\"#2-动态参数\" class=\"headerlink\" title=\"2.动态参数\"></a>2.动态参数</h2><p>1.动态属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=&#x27;color&#x27;</span><br><span class=\"line\">&lt;div :[id]=&#x27;red&#x27;&gt;填充文字&lt;/div&gt;</span><br><span class=\"line\">&lt;button @click=&quot;id=&#x27;backgroundColor&#x27;&quot;&gt;点击改变id&lt;/button&gt;</span><br><span class=\"line\">当点击按钮时 背景颜色会变为红色 而不是文字颜色</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.动态事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">met=&#x27;click&#x27;</span><br><span class=\"line\">&lt;div v-on:[met]=&#x27;count++&#x27;&gt;填充文字&lt;/div&gt;</span><br><span class=\"line\">&lt;button @click=&quot;met=mouseover&quot;&gt;点击改变事件&lt;/button&gt;</span><br><span class=\"line\">原本点击div count才会加1 点击完按钮后，鼠标经过就会加1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-视图更新\"><a href=\"#3-视图更新\" class=\"headerlink\" title=\"3.视图更新\"></a>3.视图更新</h1><p>在vue2中，改变数组中的某个元素不会使视图更新，而在vue3中可以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.arr[2]=&#x27;  &#x27;,会更新视图</span><br></pre></td></tr></table></figure>\n\n<p>所以数组的一些方法也可以用来更新视图</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.push()</span><br><span class=\"line\">arr.pop()</span><br><span class=\"line\">arr.shift()</span><br><span class=\"line\">arr.unshift()</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice()</span><br><span class=\"line\">arr.sort()</span><br><span class=\"line\">arr.reverse()</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"ref-isRef\"><a href=\"#ref-isRef\" class=\"headerlink\" title=\"ref  isRef\"></a>ref  isRef</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a= ref(0) // 使元素变为响应式</span><br><span class=\"line\">ifRef(a) === true //判断元素是否为响应式</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const b = reactive(&#123;arr:[]&#125;) //使对象 数组等变为响应式</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"toRef-toRefs-toRaw\"><a href=\"#toRef-toRefs-toRaw\" class=\"headerlink\" title=\"toRef   toRefs   toRaw\"></a>toRef   toRefs   toRaw</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">    name:1</span><br><span class=\"line\">    age:2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const state = toRef(obj, name)//将name转为响应式</span><br><span class=\"line\">const staet = toRefs(obj) // 批量追加为响应式</span><br><span class=\"line\">const newState = toRaw(state)// 将响应式转换为普通对象</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; computed, reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">let price = ref(0)//$0</span><br><span class=\"line\"> </span><br><span class=\"line\">let m = computed&lt;string&gt;(()=&gt;&#123;</span><br><span class=\"line\">   return `$` + price.value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch(message, (newVal, oldVal) =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27;新的值----&#x27;, newVal);</span><br><span class=\"line\">    console.log(&#x27;旧的值----&#x27;, oldVal);</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    immediate:true,</span><br><span class=\"line\">    deep:true //可以检测到对象中属性的变化</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"watchEffect\"><a href=\"#watchEffect\" class=\"headerlink\" title=\"watchEffect\"></a>watchEffect</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</span><br><span class=\"line\">如果用到message 就只会监听message 就是用到几个监听几个 而且是非惰性 会默认调用一次</span><br><span class=\"line\">const stop =  watchEffect((oninvalidate) =&gt; &#123;</span><br><span class=\"line\">    //console.log(&#x27;message&#x27;, message.value);</span><br><span class=\"line\">    oninvalidate(()=&gt;&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(&#x27;message2&#x27;, message2.value);</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    flush:&quot;post&quot;,</span><br><span class=\"line\">    onTrigger () &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">stop()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"父子传值\"><a href=\"#父子传值\" class=\"headerlink\" title=\"父子传值\"></a>父子传值</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父传</span><br><span class=\"line\">&lt;Menu v-bind:data=&quot;data&quot;  title=&quot;我是标题&quot;&gt;&lt;/Menu&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">子接1</span><br><span class=\"line\">defineProps&lt;&#123;</span><br><span class=\"line\">    title:string,</span><br><span class=\"line\">    data:number[]</span><br><span class=\"line\">&#125;&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">子接2</span><br><span class=\"line\">//withDefaults是个函数也是无须引入开箱即用接受一个props函数第二个参数是一个对象设置默认值</span><br><span class=\"line\">type Props = &#123;</span><br><span class=\"line\">    title?: string,</span><br><span class=\"line\">    data?: number[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class=\"line\">    title: &quot;张三&quot;,</span><br><span class=\"line\">    data: () =&gt; [1, 2, 3]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">子传</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;menu&quot;&gt;</span><br><span class=\"line\">        &lt;button @click=&quot;clickTap&quot;&gt;派发给父组件&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const list = reactive&lt;number[]&gt;([4, 5, 6])</span><br><span class=\"line\"> </span><br><span class=\"line\">const emit = defineEmits([&#x27;on-click&#x27;])</span><br><span class=\"line\"> </span><br><span class=\"line\">//如果用了ts可以这样两种方式</span><br><span class=\"line\">// const emit = defineEmits&lt;&#123;</span><br><span class=\"line\">//     (e: &quot;on-click&quot;, name: string): void</span><br><span class=\"line\">// &#125;&gt;()</span><br><span class=\"line\">const clickTap = () =&gt; &#123;</span><br><span class=\"line\">    emit(&#x27;on-click&#x27;, list)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">父接</span><br><span class=\"line\">&lt;Menu @on-click=&quot;getList&quot;&gt;&lt;/Menu&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">const getList = (list: number[]) =&gt; &#123;</span><br><span class=\"line\">    console.log(list,&#x27;父组件接受子组件&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keepAlive&gt;</span><br><span class=\"line\">    import a from &#x27;&#x27;</span><br><span class=\"line\">    import b from &#x27;&#x27;</span><br><span class=\"line\">    &lt;component :is=&quot;a&quot;&gt;&lt;/component&gt;</span><br><span class=\"line\">&lt;/keepAlive&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"异步组件\"><a href=\"#异步组件\" class=\"headerlink\" title=\"异步组件\"></a>异步组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const sync = defineAsyncComponent(() =&gt; import(&#x27;@/components/SYNC.vue&#x27;))</span><br><span class=\"line\">加载异步组件</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Suspense&gt;</span><br><span class=\"line\">    &lt;template #default&gt;</span><br><span class=\"line\">      &lt;sync&gt;&lt;/sync&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">    &lt;template #fallback&gt;</span><br><span class=\"line\">      &lt;!-- &lt;h1&gt;1111&lt;/h1&gt; --&gt;</span><br><span class=\"line\">      &lt;sync1&gt;&lt;/sync1&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/Suspense&gt;</span><br><span class=\"line\">  配合suspense使用</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync.vue</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;异步组件&lt;/h1&gt;</span><br><span class=\"line\">    &lt;!-- 异步组件 模拟数据在public/syncData.json--&gt;</span><br><span class=\"line\">    &lt;h1&gt;&#123;&#123; myData.name &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h1&gt;&#123;&#123; myData.age &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">interface t &#123;</span><br><span class=\"line\">  name:string,</span><br><span class=\"line\">  age:number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const myData = reactive&lt;t&gt;(&#123;</span><br><span class=\"line\">  name: &#x27;&#x27;,</span><br><span class=\"line\">  age: 0</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const &#123; data &#125; = await axios.get&lt;t&gt;(&#x27;./syncData.json&#x27;)</span><br><span class=\"line\">const gets = () =&gt; &#123;</span><br><span class=\"line\">  myData.name = data.name</span><br><span class=\"line\">  myData.age = data.age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"传送组件\"><a href=\"#传送组件\" class=\"headerlink\" title=\"传送组件\"></a>传送组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Teleport to=&quot;body&quot;&gt;</span><br><span class=\"line\">    &lt;te&gt;&lt;/te&gt;</span><br><span class=\"line\">  &lt;/Teleport&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\"> 将一个组件传送值指定位置</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"transition组件\"><a href=\"#transition组件\" class=\"headerlink\" title=\"transition组件\"></a>transition组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Transition enter-active-class=&quot;animate__animated animate__flip&quot; leave-active-class=&quot;animate__animated animate__fadeOutBottomLeft&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;inner&quot; v-if=&quot;isShow&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/Transition&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">控制组件显示隐藏时的动画效果</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以与 animate.css 联合使用 </span><br></pre></td></tr></table></figure>\n\n<p>生命周期</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;Transition</span><br><span class=\"line\">   enter-active-class=&quot;animate__animated animate__flip&quot; leave-active-class=&quot;animate__animated animate__fadeOutBottomLeft&quot;</span><br><span class=\"line\">   @before-enter = &quot;beEnter&quot;</span><br><span class=\"line\">   @enter = &quot;enter&quot;</span><br><span class=\"line\">   @after-enter = &quot;afterEnter&quot;</span><br><span class=\"line\">   @enter-cancelled = &quot;enterCancelled&quot;</span><br><span class=\"line\">   @before-leave = &quot;beLeave&quot;</span><br><span class=\"line\">   @leave = &quot;leave&quot;</span><br><span class=\"line\">   @after-leava = &quot;afterLeave&quot;</span><br><span class=\"line\">   @leave-cancelled = &quot;leaveCancelled&quot;</span><br><span class=\"line\">   &gt;</span><br><span class=\"line\">     &lt;!-- 生命周期 --&gt;</span><br><span class=\"line\">     &lt;div class=&quot;inner&quot; v-if=&quot;isShow&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">   &lt;/Transition&gt;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   const enter = (el:Element, done:any) =&gt; &#123;</span><br><span class=\"line\">         console.log(&#x27;已经出现~~&#x27;)</span><br><span class=\"line\">         setTimeout(() =&gt; &#123; done() &#125;, 5000) //五miao后完成</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>gsap</p>\n<p>  appear</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appear-active-class=&quot;animate__animated animate__fadeInTopLeft&quot;</span><br><span class=\"line\">页面加载完毕 帮助执行一次</span><br><span class=\"line\">可以与 animate.css 联合使用 </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"transition-group\"><a href=\"#transition-group\" class=\"headerlink\" title=\"transition-group\"></a>transition-group</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TransitionGroup enter-active-class=&quot;animate__animated animate__jackInTheBox&quot; leave-active-                       class=&quot;animate__animated animate__hinge&quot;&gt; </span><br><span class=\"line\">  &lt;div v-for=&quot;item in list&quot; :key=&quot;item&quot; class=&quot;item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;/TransitionGroup&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">对内部所有 加 过度</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"transition-group-amp-Lodash-平滑移动\"><a href=\"#transition-group-amp-Lodash-平滑移动\" class=\"headerlink\" title=\"transition-group &amp; Lodash 平滑移动\"></a>transition-group &amp; Lodash 平滑移动</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;button @click=&quot;doChange&quot;&gt;变换&lt;/button&gt;</span><br><span class=\"line\">  &lt;div id=&quot;out&quot;&gt;</span><br><span class=\"line\">    &lt;TransitionGroup name=&quot;list&quot;&gt;</span><br><span class=\"line\">      &lt;div v-for=&quot;item in arr&quot; :key=&quot;item.id&quot; class=&quot;item&quot;&gt;&#123;&#123; item.index &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/TransitionGroup&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import _ from &#x27;lodash&#x27;</span><br><span class=\"line\">// 创建一个81个元素的空数组</span><br><span class=\"line\">const arr = ref(Array.apply(null, &#123; length: 81 &#125; as number[]).map((item, index) =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    id: index,</span><br><span class=\"line\">    index: index % 9 + 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">const doChange = () =&gt; &#123;</span><br><span class=\"line\">  arr.value = _.shuffle(arr.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  #out &#123;</span><br><span class=\"line\">    margin: 50px;</span><br><span class=\"line\">    width: calc(50px * 9 + 18px);</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-wrap: wrap;</span><br><span class=\"line\">    .item &#123;</span><br><span class=\"line\">      width: 50px;</span><br><span class=\"line\">      height: 50px;</span><br><span class=\"line\">      border: 1px solid black;</span><br><span class=\"line\">      background-color: aliceblue;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">      line-height: 50px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // group 中元素的移动过</span><br><span class=\"line\">  .list-move, /* 对移动中的元素应用的过渡 */</span><br><span class=\"line\">.list-enter-active,</span><br><span class=\"line\">.list-leave-active &#123;</span><br><span class=\"line\">  transition: all 0.5s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.list-enter-from,</span><br><span class=\"line\">.list-leave-to &#123;</span><br><span class=\"line\">  opacity: 0;</span><br><span class=\"line\">  transform: translateX(30px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Lodash—javascript原生库\"><a href=\"#Lodash—javascript原生库\" class=\"headerlink\" title=\"Lodash—javascript原生库\"></a>Lodash—javascript原生库</h1><h1 id=\"Gsap-—-动画库\"><a href=\"#Gsap-—-动画库\" class=\"headerlink\" title=\"Gsap — 动画库\"></a>Gsap — 动画库</h1><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"==============\"></a>==============</h1><h1 id=\"bind-apply-call\"><a href=\"#bind-apply-call\" class=\"headerlink\" title=\"bind apply  call\"></a>bind apply  call</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p1 = &#123;</span><br><span class=\"line\">  name: &#x27;jake&#x27;,</span><br><span class=\"line\">  phone: 60,</span><br><span class=\"line\">  addP (num1, num2) &#123;</span><br><span class=\"line\">    this.phone += (num1 + num2)</span><br><span class=\"line\">    console.log(this.name + &#x27;---&gt;&#x27; + this.phone);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const p2 = &#123;</span><br><span class=\"line\">  name: &#x27;stevn&#x27;,</span><br><span class=\"line\">  phone: 50,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// console.log(p1.phone);60</span><br><span class=\"line\">// p1.addP(30)</span><br><span class=\"line\">// console.log(p1.phone);90</span><br><span class=\"line\">// p1.addP.call(p2, 30, 10) call直接传入</span><br><span class=\"line\">// p1.addP.apply(p2, [30, 10]) //apply 接收数组</span><br><span class=\"line\">const stevnAddp = p1.addP.bind(p2) //bind返回一个方法 需要手动调用</span><br><span class=\"line\">stevnAddp(30, 10)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"es6-–-gt-from-fill\"><a href=\"#es6-–-gt-from-fill\" class=\"headerlink\" title=\"es6 –&gt; from fill\"></a>es6 –&gt; from fill</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</span><br><span class=\"line\">const array1 = [1, 2, 3, 4];</span><br><span class=\"line\"> </span><br><span class=\"line\">// fill with 0 from position 2 until position 4</span><br><span class=\"line\">console.log(array1.fill(0, 2, 4));</span><br><span class=\"line\">// expected output: [1, 2, 0, 0]</span><br><span class=\"line\"> </span><br><span class=\"line\">// fill with 5 from position 1</span><br><span class=\"line\">console.log(array1.fill(5, 1));</span><br><span class=\"line\">// expected output: [1, 5, 5, 5]</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(array1.fill(6));</span><br><span class=\"line\">// expected output: [6, 6, 6, 6]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.from() 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</span><br><span class=\"line\">console.log(Array.from(&#x27;foo&#x27;));</span><br><span class=\"line\">// expected output: Array [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(Array.from([1, 2, 3], x =&gt; x + x));</span><br><span class=\"line\">// expected output: Array [2, 4, 6]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"es6-–-gt-map\"><a href=\"#es6-–-gt-map\" class=\"headerlink\" title=\"es6 –&gt; map\"></a>es6 –&gt; map</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map()方法定义在JavaScript的Array中，它返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。</span><br><span class=\"line\">map()不会对空数组进行检测</span><br><span class=\"line\">map()不会改变原始数组</span><br><span class=\"line\"></span><br><span class=\"line\">array.map(function(currentValue, index, arr), thisIndex)</span><br><span class=\"line\">currentValue：必须。当前元素的的值。</span><br><span class=\"line\">index：可选。当前元素的索引。</span><br><span class=\"line\">arr：可选。当前元素属于的数组对象。</span><br><span class=\"line\">thisValue：可选。对象作为该执行回调时使用，传递给函数，用作&quot;this&quot;的值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let array = [1, 2, 3, 4, 5];</span><br><span class=\"line\"></span><br><span class=\"line\">let newArray = array.map((item) =&gt; &#123;</span><br><span class=\"line\">    return item * item;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(newArray)  // [1, 4, 9, 16, 25]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"=============\"></a>=============</h1><h1 id=\"provide-inject\"><a href=\"#provide-inject\" class=\"headerlink\" title=\"provide inject\"></a>provide inject</h1><h1 id=\"mitt\"><a href=\"#mitt\" class=\"headerlink\" title=\"mitt\"></a>mitt</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import i mitt -S</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>两种使用方法 1 main.ts 全局配置  2 单独抽成文件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mitt from &#x27;mitt&#x27;</span><br><span class=\"line\">const mit = mitt()</span><br><span class=\"line\">// TypeScript注册</span><br><span class=\"line\">// 由于必须要拓展ComponentCustomProperties类型才能获得类型提示</span><br><span class=\"line\">declare module &#x27;vue&#x27; &#123;</span><br><span class=\"line\">  export interface ComponentCustomProperties &#123;</span><br><span class=\"line\">      $Bus: typeof mit</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const app = createApp(App)</span><br><span class=\"line\">app.config.globalProperties.$Bus = mit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用</span><br><span class=\"line\">由于v3没有 this 所有 import &#123; getCurrentInstance &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const instance = getCurrentInstance()</span><br><span class=\"line\">instance?.proxy?.$Bus.emit(&#x27;&#x27;, )</span><br><span class=\"line\">instance?.proxy?.$Bus.on(&#x27;&#x27;, ()=&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h1><blockquote>\n<p>vue3 传给组建的v-model 需要子组件 defineProps接收 defineEmits修改</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父亲 ： &lt;vmodel v-model=&quot;show&quot; v-model:name=&quot;name&quot;&gt;&lt;/vmodel&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">子</span><br><span class=\"line\">// 接收传来的值 :绑定的用 :后的名字接收 直接绑定的用 modelValue接收</span><br><span class=\"line\">defineProps&lt;&#123;</span><br><span class=\"line\">  modelValue: boolean,</span><br><span class=\"line\">  name:string</span><br><span class=\"line\">&#125;&gt;()</span><br><span class=\"line\">// 修改传来的值 update:名字 修改的固定写法</span><br><span class=\"line\">const emit = defineEmits([&#x27;update:modelValue&#x27;, &#x27;update:name&#x27;])</span><br><span class=\"line\">const change = () =&gt; &#123;</span><br><span class=\"line\">  emit(&#x27;update:modelValue&#x27;, false)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// inputing</span><br><span class=\"line\">const inputing = (e:Event) =&gt; &#123;</span><br><span class=\"line\">  const val = e.target as HTMLInputElement</span><br><span class=\"line\">  emit(&#x27;update:name&#x27;, val.value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">名字应为 v开头</span><br><span class=\"line\">const vMove：Directive = &#123;</span><br><span class=\"line\">  created () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; created&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeMount () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; beforeMount&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted (e:HTMLElement, binding:object, vnode:object) &#123;// e 当前dom元素 binding各种值  vnode虚拟dom </span><br><span class=\"line\">    e.focus()</span><br><span class=\"line\">    console.log(e, binding, vnode)</span><br><span class=\"line\">    console.log(&#x27;===&gt; mounted&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeUpdate () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; beforeUpdate&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  updated () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; updated&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeUnmount () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; updated&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  unmounted () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; unmounted&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const app = creatApp(app)</span><br><span class=\"line\">得到app后</span><br><span class=\"line\">app.config.globalProperties.$[名字] = ...[&#123;&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">app.config.globalProperties.$dev = &#x27;dev&#x27;</span><br><span class=\"line\">app.config.globalProperties.$filter = &#123;</span><br><span class=\"line\">  format&lt;T&gt; (str:T):string &#123;</span><br><span class=\"line\">    return &#x27;jake&#x27; + str</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// TypeScript注册</span><br><span class=\"line\">// 由于必须要拓展ComponentCustomProperties类型才能获得类型提示</span><br><span class=\"line\">type filter = &#123;</span><br><span class=\"line\">  format&lt;T&gt; (str:T):string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">declare module &#x27;vue&#x27; &#123;</span><br><span class=\"line\">  export interface ComponentCustomProperties &#123;</span><br><span class=\"line\">      $dev:string,</span><br><span class=\"line\">      $filter: filter</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 在js中使用</span><br><span class=\"line\">import &#123; ref, getCurrentInstance &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const instance = getCurrentInstance()</span><br><span class=\"line\">const data = instance?.proxy?.$dev</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"样式穿透\"><a href=\"#样式穿透\" class=\"headerlink\" title=\"样式穿透\"></a>样式穿透</h1><p>/deep/ .input {color = black}  —–&gt;  :deep(.input) { color = black }</p>\n<h1 id=\"Css新特性\"><a href=\"#Css新特性\" class=\"headerlink\" title=\"Css新特性\"></a>Css新特性</h1><ol>\n<li><p>插槽中 修改父传来的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:slotted(属性名) &#123;</span><br><span class=\"line\">    css....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>全局样式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:global(标签) &#123;</span><br><span class=\"line\">    css.....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>3.v-bind绑定css</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const color = ref(&#x27;red&#x27;)</span><br><span class=\"line\">style&#123;</span><br><span class=\"line\">    .input&#123;</span><br><span class=\"line\">        backgroundColor: v-bind(color)// 如果是对象格式 改为 v-bind( &#x27;~~~&#x27; )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.css  module</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p :class=&quot;$style.类名&quot;&gt;1111&lt;/p&gt;</span><br><span class=\"line\">// 多个写成</span><br><span class=\"line\">&lt;p :class=&quot;[$style.a, $style.b]&quot;&gt;1111&lt;/p&gt;</span><br><span class=\"line\">style</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    .a &#123;</span><br><span class=\"line\">    color:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .b &#123;</span><br><span class=\"line\">    fontsize:...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style module=&quot;zs&quot;&gt;</span><br><span class=\"line\">module中的值可以把$style 替换 </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Event-Loop\"><a href=\"#Event-Loop\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h1><p>同步任务<br>代码从上到下按顺序执行</p>\n<p>异步任务<br>1.宏任务<br>script(整体代码)、setTimeout、setInterval、UI交互事件、postMessage、Ajax</p>\n<p>2.微任务<br>Promise.then catch finally、MutaionObserver、process.nextTick(Node.js 环境)</p>\n<p>运行机制</p>\n<p>所有的同步任务都是在主进程执行的形成一个执行栈，主线程之外，还存在一个”任务队列”，异步任务执行队列中先执行宏任务，然后清空当次宏任务中的所有微任务，然后进行下一个tick如此形成循环。</p>\n<p>nextTick 就是创建一个异步任务，那么它自然要等到同步任务执行完成后才执行。</p>\n<h1 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"nextTick\"></a>nextTick</h1><h1 id=\"Proxy代理解决跨域\"><a href=\"#Proxy代理解决跨域\" class=\"headerlink\" title=\"Proxy代理解决跨域\"></a>Proxy代理解决跨域</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vite.config.js ===</span><br><span class=\"line\"></span><br><span class=\"line\">server: &#123;</span><br><span class=\"line\">      proxy: &#123;</span><br><span class=\"line\">        &#x27;/api&#x27;: &#123;   ’/api‘名字自起 一般是 /api</span><br><span class=\"line\">          target: &#x27;http://localhost:9999&#x27;, //要代理的地址</span><br><span class=\"line\">          rewrite: (path) =&gt; path.replace(/^\\/api/, &#x27;&#x27;)  // 截掉api</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  与 plugins同级</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"=======================\"></a>=======================</h1><h1 id=\"pinia\"><a href=\"#pinia\" class=\"headerlink\" title=\"pinia\"></a>pinia</h1><h1 id=\"1-引入注册\"><a href=\"#1-引入注册\" class=\"headerlink\" title=\"1.引入注册\"></a>1.引入注册</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App.vue&#x27;</span><br><span class=\"line\">import &#123;createPinia&#125; from &#x27;pinia&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">const store = createPinia()</span><br><span class=\"line\">let app = createApp(App)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">app.use(store)</span><br><span class=\"line\"> </span><br><span class=\"line\">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-初始化\"><a href=\"#2-初始化\" class=\"headerlink\" title=\"2.初始化\"></a>2.初始化</h1><blockquote>\n<p><strong>1.新建一个文件夹Store</strong></p>\n<p><strong>2.新建文件[name].ts</strong></p>\n<p><strong>3.定义仓库Store</strong></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; defineStore &#125; from &#x27;pinia&#x27;</span><br><span class=\"line\">import &#123; Names &#125; from &#x27;./store-namespce&#x27; //名字</span><br><span class=\"line\"> </span><br><span class=\"line\">export const useTestStore = defineStore(Names.Test, &#123;</span><br><span class=\"line\">     state:()=&gt;&#123;</span><br><span class=\"line\">         return &#123;</span><br><span class=\"line\">             current:1</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     //类似于computed 可以帮我们去修饰我们的值</span><br><span class=\"line\">     getters:&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     //可以操作异步 和 同步提交state</span><br><span class=\"line\">     actions:&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-state\"><a href=\"#3-state\" class=\"headerlink\" title=\"3.state\"></a>3.state</h1><h2 id=\"1-在需要使用的文件夹导入\"><a href=\"#1-在需要使用的文件夹导入\" class=\"headerlink\" title=\"1.在需要使用的文件夹导入\"></a>1.在需要使用的文件夹导入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;useTestStore&#125; from &#x27;....&#x27;</span><br><span class=\"line\">const store = userTestStore()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"修改值的五种方法\"><a href=\"#修改值的五种方法\" class=\"headerlink\" title=\"修改值的五种方法\"></a>修改值的五种方法</h2><h3 id=\"1-直接store-current\"><a href=\"#1-直接store-current\" class=\"headerlink\" title=\"1. 直接store.current++\"></a>1. 直接store.current++</h3><h2 id=\"2-批量修改state\"><a href=\"#2-批量修改state\" class=\"headerlink\" title=\"2.批量修改state\"></a>2.批量修改state</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对象</span><br><span class=\"line\">store.$path(&#123;</span><br><span class=\"line\">    current:1</span><br><span class=\"line\">    name: &#x27;jake&#x27;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-批量修改函数格式\"><a href=\"#3-批量修改函数格式\" class=\"headerlink\" title=\"3.批量修改函数格式\"></a>3.批量修改函数格式</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以进行一些判断  接收一个state参数 </span><br><span class=\"line\">store.$paht((state)=&gt;&#123;</span><br><span class=\"line\">    if(....)&#123;</span><br><span class=\"line\">        state.current++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><h2 id=\"5-通过Actions修改\"><a href=\"#5-通过Actions修改\" class=\"headerlink\" title=\"5.通过Actions修改\"></a>5.通过Actions修改</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions:&#123;</span><br><span class=\"line\">       setCurrent () &#123;</span><br><span class=\"line\">           this.current++</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-解构store\"><a href=\"#6-解构store\" class=\"headerlink\" title=\"6.解构store\"></a>6.解构store</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">const Test = useTestStore()</span><br><span class=\"line\"> </span><br><span class=\"line\">const &#123; current, name &#125; = storeToRefs(Test)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-Actions\"><a href=\"#4-Actions\" class=\"headerlink\" title=\"4.Actions\"></a>4.Actions</h1><h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">        increment() &#123;</span><br><span class=\"line\">            this.counter++</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        randomizeCounter() &#123;</span><br><span class=\"line\">            this.counter = Math.round(100 * Math.random())</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class=\"line\">import &#123;useTestStore&#125; from &#x27;./store&#x27;</span><br><span class=\"line\">const Test = useTestStore()</span><br><span class=\"line\">const Add = () =&gt; &#123;</span><br><span class=\"line\">     Test.randomizeCounter()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结合-async-await\"><a href=\"#结合-async-await\" class=\"headerlink\" title=\"结合 async  await\"></a>结合 async  await</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">        async getLoginInfo() &#123;</span><br><span class=\"line\">            const result = await Login()</span><br><span class=\"line\">            this.user = result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多个actions-互相调用\"><a href=\"#多个actions-互相调用\" class=\"headerlink\" title=\"多个actions 互相调用\"></a>多个actions 互相调用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">       async getLoginInfo() &#123;</span><br><span class=\"line\">           const result = await Login()</span><br><span class=\"line\">           this.user = result;</span><br><span class=\"line\">           this.setName(result.name)</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       setName (name:string) &#123;</span><br><span class=\"line\">           this.name = name;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-getter\"><a href=\"#5-getter\" class=\"headerlink\" title=\"5.getter\"></a>5.getter</h1><blockquote>\n<p> 使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTclQUUlQUQlRTUlQTQlQjQlRTUlODclQkQlRTYlOTUlQjAmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">箭头函数</span>不能使用this this指向已经改变指向undefined 修改值请用state</p>\n<p> 主要作用类似于computed 数据修饰并且有缓存</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters:&#123;</span><br><span class=\"line\">      newCurrent ():number &#123;</span><br><span class=\"line\">          return ++this.current</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>相互调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters:&#123;</span><br><span class=\"line\">   newCurrent ():number | string &#123;</span><br><span class=\"line\">       return ++this.current + this.newName</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   newName ():string &#123;</span><br><span class=\"line\">       return `$-$&#123;this.name&#125;`</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-reset\"><a href=\"#6-reset\" class=\"headerlink\" title=\"6.$reset()\"></a>6.$reset()</h1><p>通过实例调用 $reset() 可以将 state重置为初始内容</p>\n<h1 id=\"7-subscribe\"><a href=\"#7-subscribe\" class=\"headerlink\" title=\"7.$subscribe()\"></a>7.$subscribe()</h1><blockquote>\n<p>在每个 state变化时 都会自动调用这个api</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过实例调用 $subscribe()</span><br><span class=\"line\">store.$subscribe( (args,state)=&gt;&#123;</span><br><span class=\"line\">    // args 包括新值 旧值 实例名 等</span><br><span class=\"line\">    // state 为state    </span><br><span class=\"line\">&#125; , &#123; detached:true &#125;)//设置为true 当组件销毁 一九可以监听</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-onAction\"><a href=\"#8-onAction\" class=\"headerlink\" title=\"8.$onAction()\"></a>8.$onAction()</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.$onAction( (args)=&gt;&#123;</span><br><span class=\"line\">    当触发事件时调用</span><br><span class=\"line\">&#125;, true )</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"=================\"></a>=================</h1><h1 id=\"vue3组件通信\"><a href=\"#vue3组件通信\" class=\"headerlink\" title=\"vue3组件通信\"></a>vue3组件通信</h1><h2 id=\"1-props\"><a href=\"#1-props\" class=\"headerlink\" title=\"1. props\"></a>1. props</h2><h2 id=\"2-自定义事件-emit\"><a href=\"#2-自定义事件-emit\" class=\"headerlink\" title=\"2.自定义事件 emit\"></a>2.自定义事件 emit</h2><h2 id=\"3-mitt兄弟传值\"><a href=\"#3-mitt兄弟传值\" class=\"headerlink\" title=\"3.mitt兄弟传值\"></a>3.mitt兄弟传值</h2><p>1.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save mitt</span><br></pre></td></tr></table></figure>\n\n<p>2.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在main.js中挂载到全局</span><br><span class=\"line\"></span><br><span class=\"line\">////</span><br><span class=\"line\">// 标准的ES模块化引入方式</span><br><span class=\"line\">import mitt from &#x27;mitt&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const app = createApp(App)</span><br><span class=\"line\"></span><br><span class=\"line\">// vue3.x的全局实例，要挂载在config.globalProperties上</span><br><span class=\"line\">app.config.globalProperties.$EventBus = new mitt()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2/1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">或者封装一个模块</span><br><span class=\"line\"></span><br><span class=\"line\">import mitt from &#x27;mitt&#x27;</span><br><span class=\"line\">export default new mitt()</span><br></pre></td></tr></table></figure>\n\n<p>3.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//发送</span><br><span class=\"line\">$bus.emit(&#x27;toBro&#x27;, car.value)</span><br><span class=\"line\"></span><br><span class=\"line\">// 接收</span><br><span class=\"line\">$bus.on(&#x27;toBro&#x27;, (val) =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27;getting&#x27; + val);</span><br><span class=\"line\">    theCar.value = val</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-v-model\"><a href=\"#4-v-model\" class=\"headerlink\" title=\"4.v-model\"></a>4.v-model</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父</span><br><span class=\"line\"> &lt;Son v-model:pageNum=&quot;num&quot;&gt;&lt;/Son&gt;</span><br><span class=\"line\">// 子</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;out&quot;&gt;</span><br><span class=\"line\">      &lt;h2&gt;接收到的值-&#123;&#123; pageNum &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">      &lt;button @click=&quot; emit(&#x27;update:pageNum&#x27;, prop.pageNum + 10)&quot;&gt;点击+10&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup &#123;emit&#125;&gt;</span><br><span class=\"line\">const prop = defineProps(&#123;</span><br><span class=\"line\">  pageNum: &#123;</span><br><span class=\"line\">    default: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const emit = defineEmits(&#123; &#x27;update:pageNum&#x27;: null &#125;) //对象格式 避免验证 不报警告</span><br><span class=\"line\">const addN = () =&gt; &#123;</span><br><span class=\"line\">  emit(&#x27;update:pageNum&#x27;, prop.pageNum + 10)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-useAttrs\"><a href=\"#5-useAttrs\" class=\"headerlink\" title=\"5.useAttrs\"></a>5.useAttrs</h2><p>可以获取到标签身上的属性和方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 父</span><br><span class=\"line\"> &lt;Son3 title=&quot;aaa&quot; @click=&quot;fun1&quot;&gt;&lt;/Son3&gt;</span><br><span class=\"line\"> // 子</span><br><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1 :title=&quot;$attr.title + &#x27;bbb&#x27;&quot; @click=&quot;aa&quot;&gt;son3&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import &#123; useAttrs &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">const $attr = useAttrs()</span><br><span class=\"line\">console.log($attr);</span><br><span class=\"line\">const aa = () =&gt; &#123;</span><br><span class=\"line\">  console.log(&quot;---&gt;&quot;);</span><br><span class=\"line\">  $attr.onClick</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-ref-与-parent\"><a href=\"#6-ref-与-parent\" class=\"headerlink\" title=\"6.ref 与 $parent\"></a>6.ref 与 $parent</h2><blockquote>\n<p>通过ref获取子组件属性方法</p>\n<p>通过$parent获取父组件属性和方法</p>\n</blockquote>\n<p>父</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;父值：&#123;&#123; faNum &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;获取到的子值：&#123;&#123; sonNum &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;getSon&quot;&gt;点击获取&lt;/button&gt;</span><br><span class=\"line\">    &lt;son ref=&quot;son1&quot;&gt;&lt;/son&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import son from &#x27;./Son4son.vue&#x27;</span><br><span class=\"line\">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const sonNum = ref()</span><br><span class=\"line\">const faNum = ref(100)</span><br><span class=\"line\">const son1 = ref()</span><br><span class=\"line\">const getSon = () =&gt; &#123;</span><br><span class=\"line\">  sonNum.value = son1.value.sonNum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">defineExpose(&#123; faNum &#125;)//允许外界访问</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;子值：&#123;&#123; sonNum &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;获取到的父值：&#123;&#123; faNum &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;getFa($parent)&quot;&gt;点击获取&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const sonNum = ref(200)</span><br><span class=\"line\">const faNum = ref()</span><br><span class=\"line\">const getFa = ($parent) =&gt; &#123;</span><br><span class=\"line\">  faNum.value = $parent.faNum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">defineExpose(&#123; sonNum &#125;)//允许外界访问</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-provide-inject\"><a href=\"#7-provide-inject\" class=\"headerlink\" title=\"7.provide inject\"></a>7.provide inject</h2>",
            "tags": [
                "vue3"
            ]
        },
        {
            "id": "http://example.com/2023/08/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/",
            "url": "http://example.com/2023/08/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/",
            "title": "第一篇文章",
            "date_published": "2023-08-10T14:38:21.000Z",
            "content_html": "<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><a>会逐步更新一些前端的笔记 面试题等</a></p>\n<a id=\"more\"></a>\n\n",
            "tags": [
                "测试"
            ]
        }
    ]
}