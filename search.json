[{"title":"Set,Map","url":"/2023/08/17/Set-Map/","content":"<h1 id=\"Set、Map、WeakSet、WeakMap\"><a href=\"#Set、Map、WeakSet、WeakMap\" class=\"headerlink\" title=\"Set、Map、WeakSet、WeakMap\"></a>Set、Map、WeakSet、WeakMap</h1><a id=\"more\"></a>\n\n<blockquote>\n<p>引用自 <span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTclQjElQkIlRTUlOUUlOEIlRTclOUElODQlRTglQkQlQUMlRTYlOEQlQTI=\">Set、Map、WeakSet、WeakMap | Vue3 (vue3js.cn)</span></p>\n</blockquote>\n<p>如果要用一句来描述，我们可以说 <strong>Set是一种叫做集合的数据结构，Map是一种叫做字典的数据结构</strong></p>\n<p>那什么是集合？什么又是字典呢？</p>\n<ul>\n<li>集合</li>\n</ul>\n<blockquote>\n<p>集合，是由一堆无序的、相关联的，且不重复的内存结构【数学中称为元素】组成的组合</p>\n</blockquote>\n<ul>\n<li>字典</li>\n</ul>\n<blockquote>\n<p>字典（dictionary）是一些元素的集合。每个元素有一个称作key 的域，不同元素的key 各不相同</p>\n</blockquote>\n<p>那么集合和字典又有什么区别呢？</p>\n<ul>\n<li>共同点：集合、字典都可以存储不重复的值</li>\n<li>不同点：集合是以[值，值]的形式存储元素，字典是以[键，值]的形式存储</li>\n</ul>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"#背景\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTglODMlOEMlRTYlOTklQUY=\">#</span>背景</h2><p>大多数主流编程语言都有多种内置的数据集合。例如<code>Python</code>拥有列表（<code>list</code>）、元组（<code>tuple</code>）和字典（<code>dictionary</code>）,Java有列表（<code>list</code>）、集合（<code>set</code>)、队列（<code>queue</code>）</p>\n<p>然而 <code>JavaScript</code> 直到<code>ES6</code>的发布之前，只拥有数组（<code>array</code>）和对象（<code>object</code>）这两个内建的数据集合</p>\n<p>在 <code>ES6</code> 之前,我们通常使用内置的 <code>Object</code> 模拟Map</p>\n<p>但是这样模拟出来的<code>map</code>会有一些缺陷，如下:</p>\n<ol>\n<li><code>Object</code>的属性键是<code>String</code>或<code>Symbol</code>，这限制了它们作为不同数据类型的键/值对集合的能力</li>\n<li><code>Object</code>不是设计来作为一种数据集合，因此没有直接有效的方法来确定对象具有多少属性</li>\n</ol>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"#Set\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCNzZXQ=\">#</span>Set</h2><blockquote>\n<p>定义: <code>Set</code> 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用，<code>Set</code>对象是值的集合，你可以按照插入的顺序迭代它的元素。 <code>Set</code>中的元素只会出现一次，即 <code>Set</code> 中的元素是唯一的</p>\n</blockquote>\n<p><code>Set</code>本身是一个构造函数，用来生成 <code>Set</code> 数据结构</p>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"#基本使用\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTUlOUYlQkElRTYlOUMlQUMlRTQlQkQlQkYlRTclOTQlQTg=\">#</span>基本使用</h3><ul>\n<li>语法<br><code>new Set([iterable])</code> 接收一个数组（或者具有 iterable 接口的其他数据结构）, 返回一个新的<code>Set</code>对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(set) <span class=\"comment\">// &#123;1,2&#125; </span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码可以看出 <code>Set</code> 是可以去除数组中的重复元素</p>\n<h3 id=\"属性及方法\"><a href=\"#属性及方法\" class=\"headerlink\" title=\"#属性及方法\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTUlQjElOUUlRTYlODAlQTclRTUlOEYlOEElRTYlOTYlQjklRTYlQjMlOTU=\">#</span>属性及方法</h3><p><strong>属性</strong></p>\n<ul>\n<li>size: 返回集合中所包含的元素的数量</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]).<span class=\"property\">size</span>) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>操作方法</strong></p>\n<ul>\n<li>add(value): 向集合中添加一个新的项</li>\n<li>delete(value): 从集合中删除一个值</li>\n<li>has(value): 如果值在集合中存在，返回ture, 否则返回false</li>\n<li>clear(): 移除集合中的所有项</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">set.<span class=\"title function_\">add</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">set.<span class=\"title function_\">add</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">set.<span class=\"title function_\">add</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">set.<span class=\"title function_\">add</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(set) <span class=\"comment\">// &#123;1,2,3&#125;</span></span><br><span class=\"line\">set.<span class=\"title function_\">has</span>(<span class=\"number\">2</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">set.<span class=\"title function_\">delete</span>(<span class=\"number\">2</span>)  </span><br><span class=\"line\">set.<span class=\"title function_\">has</span>(<span class=\"number\">2</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">set.<span class=\"title function_\">clear</span>() </span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>遍历方法</strong></p>\n<ul>\n<li>keys(): 返回键名的遍历器</li>\n<li>values(): 返回键值的遍历器</li>\n<li>entries(): 返回键值对的遍历器</li>\n<li>forEach(): 使用回调函数遍历每个成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由于set只有键值，没有键名，所以keys() values()行为完全一致</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(set.<span class=\"title function_\">keys</span>())) <span class=\"comment\">// [1,2,3,4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(set.<span class=\"title function_\">values</span>())) <span class=\"comment\">// [1,2,3,4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(set.<span class=\"title function_\">entries</span>())) <span class=\"comment\">//  [[1,1],[2,2],[3,3],[4,4]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">set.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item)&#125;) <span class=\"comment\">// 1,2,3,4</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"#应用场景\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTUlQkElOTQlRTclOTQlQTglRTUlOUMlQkElRTYlOTklQUY=\">#</span>应用场景</h3><p>因为 <code>Set</code> 结构的值是唯一的，我们可以很轻松的实现以下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组去重</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> unique = [... <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 并集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> union = [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([...a, ...b])]; <span class=\"comment\">// [1,2,3,4]</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 交集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> intersect = [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([...a].<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> b.<span class=\"title function_\">has</span>(x)))]; [<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 差集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> difference = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([...a].<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> !b.<span class=\"title function_\">has</span>(x)))); [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"WeakSet\"><a href=\"#WeakSet\" class=\"headerlink\" title=\"#WeakSet\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCN3ZWFrc2V0\">#</span>WeakSet</h2><blockquote>\n<p>WeakSet 对象是一些对象值的集合, 并且其中的每个对象值都只能出现一次。在WeakSet的集合中是唯一的</p>\n</blockquote>\n<p><code>WeakSet</code> 的出现主要解决弱引用对象存储的场景, 其结构与<code>Set</code>类似</p>\n<p>与<code>Set</code>的区别</p>\n<ul>\n<li>与Set相比，WeakSet 只能是对象的集合，而不能是任何类型的任意值</li>\n<li>WeakSet集合中对象的引用为弱引用。 如果没有其他的对WeakSet中对象的引用，那么这些对象会被当成垃圾回收掉。 这也意味着WeakSet中没有存储当前对象的列表。 正因为这样，WeakSet 是不可枚举的</li>\n</ul>\n<p><code>WeakSet</code> 的属性跟操作方法与 <code>Set</code> 一致，不同的是 <code>WeakSet</code> 没有遍历方法，因为其成员都是弱引用，弱引用随时都会消失，遍历机制无法保证成员的存在</p>\n<p><strong>上面一直有提到弱引用，那弱引用到底是指什么呢？</strong></p>\n<blockquote>\n<p>弱引用是指不能确保其引用的对象不会被垃圾回收器回收的引用，换句话说就是可能在任意时间被回收</p>\n</blockquote>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"#Map\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCNtYXA=\">#</span>Map</h2><blockquote>\n<p>Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者原始值) 都可以作为一个键或一个值。一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个 for…of 循环在每次迭代后会返回一个形式为[key，value]的数组</p>\n</blockquote>\n<h3 id=\"基本使用-1\"><a href=\"#基本使用-1\" class=\"headerlink\" title=\"#基本使用\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTUlOUYlQkElRTYlOUMlQUMlRTQlQkQlQkYlRTclOTQlQTgtMg==\">#</span>基本使用</h3><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">new Map([iterable])` `Iterable` 可以是一个数组或者其他 `iterable` 对象，其元素为键值对(两个元素的数组，例如: [[ 1, &#x27;one&#x27; ],[ 2, &#x27;two&#x27; ]])。 每个键值对都会添加到新的 `Map</span><br><span class=\"line\">let map = new Map()</span><br><span class=\"line\">map.set(&#x27;name&#x27;, &#x27;vuejs.cn&#x27;);</span><br><span class=\"line\">console.log(map.get(&#x27;name&#x27;))</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"属性及方法-1\"><a href=\"#属性及方法-1\" class=\"headerlink\" title=\"#属性及方法\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTUlQjElOUUlRTYlODAlQTclRTUlOEYlOEElRTYlOTYlQjklRTYlQjMlOTUtMg==\">#</span>属性及方法</h3><p>基本跟 <code>Set</code> 类似，同样具有如下方法 <strong>属性</strong></p>\n<ul>\n<li>size: 返回 Map 结构的元素总数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;vuejs.cn&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map.<span class=\"property\">size</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([[<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;vue3js.cn&#x27;</span>], [<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"string\">&#x27;18&#x27;</span>]]).<span class=\"property\">size</span>) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>操作方法</strong></p>\n<ul>\n<li>set(key, value): 向 Map 中加入或更新键值对</li>\n<li>get(key): 读取 key 对用的值，如果没有，返回 undefined</li>\n<li>has(key): 某个键是否在 Map 对象中，在返回 true 否则返回 false</li>\n<li>delete(key): 删除某个键，返回 true, 如果删除失败返回 false</li>\n<li>clear(): 删除所有元素</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;vue3js.cn&#x27;</span>)</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"string\">&#x27;18&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map) <span class=\"comment\">// Map &#123;&quot;name&quot; =&gt; &quot;vuejs.cn&quot;, &quot;age&quot; =&gt; &quot;18&quot;&#125;</span></span><br><span class=\"line\">map.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;name&#x27;</span>) <span class=\"comment\">// vue3js.cn </span></span><br><span class=\"line\">map.<span class=\"title function_\">has</span>(<span class=\"string\">&#x27;name&#x27;</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">map.<span class=\"title function_\">delete</span>(<span class=\"string\">&#x27;name&#x27;</span>)  </span><br><span class=\"line\">map.<span class=\"title function_\">has</span>(name) <span class=\"comment\">// false</span></span><br><span class=\"line\">map.<span class=\"title function_\">clear</span>() <span class=\"comment\">// Map &#123;&#125; </span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>遍历方法</strong></p>\n<ul>\n<li>keys()：返回键名的遍历器</li>\n<li>values()：返回键值的遍历器</li>\n<li>entries()：返回所有成员的遍历器</li>\n<li>forEach()：遍历 Map 的所有成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;vue3js.cn&#x27;</span>)</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"string\">&#x27;18&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([...map.<span class=\"title function_\">keys</span>()])  <span class=\"comment\">// [&quot;name&quot;, &quot;age&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([...map.<span class=\"title function_\">values</span>()])  <span class=\"comment\">// [&quot;vue3js.cn&quot;, &quot;18&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([...map.<span class=\"title function_\">entries</span>()]) <span class=\"comment\">// [[&#x27;name&#x27;,&#x27;vue3js.cn&#x27;], [&#x27;age&#x27;,&#x27;18&#x27;]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// name vuejs.cn</span></span><br><span class=\"line\"><span class=\"comment\">// age 18</span></span><br><span class=\"line\">map.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value, key</span>) =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key, value)&#125;) </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"#应用场景\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTUlQkElOTQlRTclOTQlQTglRTUlOUMlQkElRTYlOTklQUYtMg==\">#</span>应用场景</h3><p><code>Map</code> 会保留所有元素的顺序, 是在基于可迭代的基础上构建的，如果考虑到元素迭代或顺序保留或键值类型丰富的情况下都可以使用，下面摘抄自 <code>vue3</code> 源码中依赖收集的核心实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> depsMap = targetMap.<span class=\"title function_\">get</span>(target)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!depsMap) &#123;</span><br><span class=\"line\">  targetMap.<span class=\"title function_\">set</span>(target, (depsMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dep = depsMap.<span class=\"title function_\">get</span>(key)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dep) &#123;</span><br><span class=\"line\">  depsMap.<span class=\"title function_\">set</span>(key, (dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dep.<span class=\"title function_\">has</span>(activeEffect)) &#123;</span><br><span class=\"line\">  dep.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">  activeEffect.<span class=\"property\">deps</span>.<span class=\"title function_\">push</span>(dep)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"#WeakMap\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCN3ZWFrbWFw\">#</span>WeakMap</h2><blockquote>\n<p>WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的</p>\n</blockquote>\n<p>与<code>Map</code>的区别</p>\n<ul>\n<li>Map 的键可以是任意类型，WeakMap 的键只能是对象类型</li>\n<li>WeakMap 键名所指向的对象，不计入垃圾回收机制</li>\n</ul>\n<p><code>WeakMap</code> 的属性跟操作方法与 <code>Map</code> 一致，同 <code>WeakSet</code> 一样，因为是弱引用，所以 <code>WeakMap</code> 也没有遍历方法</p>\n<h2 id=\"类型的转换\"><a href=\"#类型的转换\" class=\"headerlink\" title=\"#类型的转换\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTclQjElQkIlRTUlOUUlOEIlRTclOUElODQlRTglQkQlQUMlRTYlOEQlQTI=\">#</span>类型的转换</h2><ul>\n<li><code>Map</code> 转为 <code>Array</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解构</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([[<span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">3</span>]])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([...map])    <span class=\"comment\">// [[1, 1], [2, 2], [3, 3]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array.from()</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([[<span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">3</span>]])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(map))    <span class=\"comment\">// [[1, 1], [2, 2], [3, 3]]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>Array</code> 转为 <code>Map</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([[<span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">3</span>]])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map)    <span class=\"comment\">// Map &#123;1 =&gt; 1, 2 =&gt; 2, 3 =&gt; 3&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>Map</code> 转为 <code>Object</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非字符串键名会被转换为字符串</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapToObj</span>(<span class=\"params\">map</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">        obj[key] = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>().<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;vue3js.cn&#x27;</span>).<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;18&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">mapToObj</span>(map)  <span class=\"comment\">// &#123;name: &quot;vue3js.cn&quot;, age: &quot;18&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>Object</code> 转为 <code>Map</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"string\">&quot;a&quot;</span>:<span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>:<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(obj))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"#总结\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vZXM2L2RhdGFTdHJ1Y3R1cmUuaHRtbCMlRTYlODAlQkIlRTclQkIlOTM=\">#</span>总结</h2><ul>\n<li>Set、Map、WeakSet、WeakMap、都是一种集合的数据结构</li>\n<li>Set、WeakSet 是[值,值]的集合，且具有唯一性</li>\n<li>Map 和 WeakMap 是一种[键,值]的集合，Map 的键可以是任意类型，WeakMap 的键只能是对象类型</li>\n<li>Set 和 Map 有遍历方法，WeakSet 和 WeakMap 属于弱引用不可遍历</li>\n</ul>\n","categories":["笔记"],"tags":["js"]},{"title":"diff算法","url":"/2023/08/18/diff%E7%AE%97%E6%B3%95/","content":"<h1 id=\"简单实现diff方法\"><a href=\"#简单实现diff方法\" class=\"headerlink\" title=\"简单实现diff方法\"></a>简单实现diff方法</h1><a id=\"more\"></a>\n\n<h3 id=\"一、是什么diff算法\"><a href=\"#一、是什么diff算法\" class=\"headerlink\" title=\"一、是什么diff算法\"></a>一、是什么diff算法</h3><p>先来一句概念：</p>\n<blockquote>\n<p>diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方，最后用patch记录的消息去局部更新Dom。</p>\n</blockquote>\n<p>换句人话</p>\n<blockquote>\n<p>diff的过程就是调用名为patch的函数，比较新旧节点，一边比较一边给真实的DOM打补丁</p>\n</blockquote>\n<p><strong>其有两个特点：</strong></p>\n<ul>\n<li>比较只会在同层级进行, 不会跨层级比较</li>\n<li>在diff比较的过程中，循环从两边向中间比较</li>\n</ul>\n<h3 id=\"Diff算法的步骤：\"><a href=\"#Diff算法的步骤：\" class=\"headerlink\" title=\"Diff算法的步骤：\"></a>Diff算法的步骤：</h3><ul>\n<li>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文 档当中</li>\n<li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较(diff)，记录两棵树差异</li>\n<li>把第二棵树所记录的差异应用到第一棵树所构建的真正的DOM树上(patch)，视图就更新了</li>\n</ul>\n<h3 id=\"二、比较方式\"><a href=\"#二、比较方式\" class=\"headerlink\" title=\"二、比较方式\"></a>二、比较方式</h3><p>diff整体策略为：深度优先，同层比较</p>\n<h3 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1.数据\"></a>1.数据</h4><blockquote>\n<p>vDom用于模拟更新前dom， vDom1用于模拟更新后dom</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// dom类</span><br><span class=\"line\">class Element &#123;</span><br><span class=\"line\">    constructor(type,props,children)&#123;</span><br><span class=\"line\">        this.type = type</span><br><span class=\"line\">        this.props = props</span><br><span class=\"line\">        this.children = children</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">function createElement(type,props,children)&#123;</span><br><span class=\"line\">    return new Element(type,props,children)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 虚拟dom</span><br><span class=\"line\">const vDom = createElement(&#x27;ul&#x27;, &#123;</span><br><span class=\"line\">    class:&#x27;list&#x27;,</span><br><span class=\"line\">    style: &#x27;width: 300px; height: 300px; background-color: orange&#x27;</span><br><span class=\"line\">   &#125;, </span><br><span class=\"line\">   [</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 0</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第一个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 1</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第2个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第3个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),        </span><br><span class=\"line\">   ])</span><br><span class=\"line\">// 用于寻找补丁的dom</span><br><span class=\"line\">const vDom1 = createElement(&#x27;ul&#x27;, &#123;</span><br><span class=\"line\">    class:&#x27;list-wrap&#x27;,</span><br><span class=\"line\">    style: &#x27;width: 300px; height: 300px; background-color: orange&#x27;</span><br><span class=\"line\">   &#125;, </span><br><span class=\"line\">   [</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 0</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text1&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;特殊列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 1</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;title&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第2个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;div&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第3个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),        </span><br><span class=\"line\">   ])</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-渲染器\"><a href=\"#2-渲染器\" class=\"headerlink\" title=\"2.渲染器\"></a>2.渲染器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// render渲染器</span><br><span class=\"line\">    let render = (vsnode,el)=&gt;&#123;</span><br><span class=\"line\">        // 创建最外层dom元素</span><br><span class=\"line\">        const vel = document.createElement(vsnode.type)</span><br><span class=\"line\">        for(key in vsnode.props)&#123;</span><br><span class=\"line\">            if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">                vel.addEventListener(</span><br><span class=\"line\">                    key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;else if(key == &#x27;class&#x27;) &#123;//添加类名</span><br><span class=\"line\">                vel.className=vsnode.props[key]</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                // vel.</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 如果children是字符串 则创建节点追加到vel</span><br><span class=\"line\">        if(typeof vsnode.children == &#x27;string&#x27;)&#123;</span><br><span class=\"line\">            const text = document.createTextNode(vsnode.children)</span><br><span class=\"line\">            vel.appendChild(text)</span><br><span class=\"line\">            // 如果是数组 递归</span><br><span class=\"line\">        &#125;else if(Array.isArray(vsnode.children))&#123;</span><br><span class=\"line\">            vsnode.children.forEach(chil =&gt; &#123;</span><br><span class=\"line\">                render(chil,vel)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        el.appendChild(vel)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-diff函数\"><a href=\"#3-diff函数\" class=\"headerlink\" title=\"3.diff函数\"></a>3.diff函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// diff</span><br><span class=\"line\">let types = &#123;ATTR:&#x27;ATTE&#x27;,TEXT:&#x27;TEXT&#x27;,REPLACE:&#x27;REPLACE&#x27;,REMOVE:&#x27;REMOVE&#x27;&#125;//模拟补丁类型</span><br><span class=\"line\">// 用于寻找补丁</span><br><span class=\"line\">let patches = &#123;&#125; //找到的补丁</span><br><span class=\"line\">let vnIndex = 0</span><br><span class=\"line\">const domDiff = (oldVDom, newVDom)=&gt;&#123;</span><br><span class=\"line\">    let index = 0</span><br><span class=\"line\">    vNodeWalk(oldVDom, newVDom,index)//寻找节点的补丁</span><br><span class=\"line\">    return patches</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const vNodeWalk = (oldNode, newNode, index)=&gt;&#123;</span><br><span class=\"line\">    let vnPatch = [] //本节点的补丁</span><br><span class=\"line\">    if(!newNode)&#123;//判断newnode是否被删除</span><br><span class=\"line\">        vnPatch.push(&#123;</span><br><span class=\"line\">            type: types.REMOVE,</span><br><span class=\"line\">            index:index</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;else if (typeof oldNode === &#x27;string&#x27; &amp;&amp; typeof newNode === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">        if(oldNode != newNode)&#123;//判断文本节点是否改变</span><br><span class=\"line\">            vnPatch.push(&#123;</span><br><span class=\"line\">                type:types.TEXT,</span><br><span class=\"line\">                text:newNode</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;else if (oldNode.type === newNode.type) &#123;</span><br><span class=\"line\">        const attrPatch = attrsWalk(oldNode.props, newNode.props)//用于判断两个节点的属性</span><br><span class=\"line\">        if(Object.keys(attrPatch).length&gt;0)&#123;</span><br><span class=\"line\">            vnPatch.push(&#123;</span><br><span class=\"line\">                type:types.ATTR,</span><br><span class=\"line\">                attrs: attrPatch</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 寻找子节点补丁</span><br><span class=\"line\">    childWalk(oldNode.children, newNode.children,vnIndex)</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        vnPatch.push(&#123;</span><br><span class=\"line\">            type: types.REPLACE,</span><br><span class=\"line\">            newNode</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(vnPatch.length &gt; 0)&#123;</span><br><span class=\"line\">        patches[index] = vnPatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//用于判断两个节点的属性</span><br><span class=\"line\">const attrsWalk = (oldAttrs, newAttrs)=&gt;&#123;</span><br><span class=\"line\">    let attrPatch = &#123;&#125;;</span><br><span class=\"line\">    // 修改属性</span><br><span class=\"line\">    for (key in oldAttrs) &#123;</span><br><span class=\"line\">        if(oldAttrs[key] != newAttrs[key])&#123;</span><br><span class=\"line\">            attrPatch[key] = newAttrs[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 新增属性</span><br><span class=\"line\">    for(key in newAttrs)&#123;</span><br><span class=\"line\">        if(!oldAttrs.hasOwnProperty(key))&#123;</span><br><span class=\"line\">            attrPatch[key] = newAttrs[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return attrPatch</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// // 寻找子节点补丁</span><br><span class=\"line\">const childWalk = (oldChildren, newChildren)=&gt;&#123;</span><br><span class=\"line\">    oldChildren.map((c,idx)=&gt;&#123;</span><br><span class=\"line\">        vNodeWalk(c, newChildren[idx], ++vnIndex)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">domDiff(vDom,vDom1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-打补丁\"><a href=\"#4-打补丁\" class=\"headerlink\" title=\"4.打补丁\"></a>4.打补丁</h4>","categories":["面试题","源码"],"tags":["vue3"]},{"title":"egg.js介绍与安装","url":"/2023/08/21/egg-js%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/","content":"<h1 id=\"egg-js\"><a href=\"#egg-js\" class=\"headerlink\" title=\"egg.js\"></a>egg.js</h1><a id=\"more\"></a>\n","categories":["NodeJs"],"tags":["egg.js"]},{"title":"jsthis指向问题","url":"/2023/08/14/jsthis%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/","content":"<h1 id=\"js–this指向问题\"><a href=\"#js–this指向问题\" class=\"headerlink\" title=\"js–this指向问题\"></a>js–this指向问题</h1><a id=\"more\"></a>\n\n<h2 id=\"1-普通\"><a href=\"#1-普通\" class=\"headerlink\" title=\"1.普通\"></a>1.普通</h2><blockquote>\n<p>this有三种指向 ，原则为谁调用指向谁。</p>\n</blockquote>\n<h3 id=\"1-普通函数\"><a href=\"#1-普通函数\" class=\"headerlink\" title=\"1.普通函数\"></a>1.普通函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var name = &#x27;window&#x27;</span><br><span class=\"line\">function sayName () &#123;</span><br><span class=\"line\">    console.log(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayName()// 指向window  打印window</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-new构造函数\"><a href=\"#2-new构造函数\" class=\"headerlink\" title=\"2.new构造函数\"></a>2.new构造函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const a = new Object()</span><br><span class=\"line\">a.name = &#x27;new&#x27;</span><br><span class=\"line\">a.say = sayName</span><br><span class=\"line\">console.log(a.say())// 打印new  this指向实例a</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-对象方法\"><a href=\"#3-对象方法\" class=\"headerlink\" title=\"3.对象方法\"></a>3.对象方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const people = &#123;</span><br><span class=\"line\">    name: &#x27;jake&#x27;,</span><br><span class=\"line\">    age: 18,</span><br><span class=\"line\">    say : sayName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">people.say() // this指向people 打印jake</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-箭头函数\"><a href=\"#2-箭头函数\" class=\"headerlink\" title=\"2.箭头函数\"></a>2.箭头函数</h2><blockquote>\n<p>箭头函数中没有this, 但是根据作用域链 会向上找。定义在哪里 就在那里的上一层找</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var name = &#x27;window&#x27;</span><br><span class=\"line\">const  sayName = ()=&gt;&#123;</span><br><span class=\"line\">    conlose.log(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayName() // 指向window, 打印 window</span><br><span class=\"line\"></span><br><span class=\"line\">const people = &#123;</span><br><span class=\"line\">    name: &#x27;jake&#x27;,</span><br><span class=\"line\">    age: 18,</span><br><span class=\"line\">    say : sayName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">people.say // 打印window</span><br></pre></td></tr></table></figure>\n\n","categories":["面试题","知识点"],"tags":["js"]},{"title":"js判断数据类型","url":"/2023/08/12/js%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","content":"<h1 id=\"js–typeof与instanceof\"><a href=\"#js–typeof与instanceof\" class=\"headerlink\" title=\"js–typeof与instanceof\"></a>js–typeof与instanceof</h1><a id=\"more\"></a>\n\n<h2 id=\"js数据类型\"><a href=\"#js数据类型\" class=\"headerlink\" title=\"js数据类型\"></a>js数据类型</h2><ol>\n<li><code>undefined</code></li>\n<li><code>Null</code></li>\n<li><code>Boolean</code></li>\n<li><code>Number</code></li>\n<li><code>String</code></li>\n<li><code>Symbol</code></li>\n<li>引用数据类型</li>\n</ol>\n<h2 id=\"typeof主要用于判断基本数据类型\"><a href=\"#typeof主要用于判断基本数据类型\" class=\"headerlink\" title=\"typeof主要用于判断基本数据类型\"></a>typeof主要用于判断基本数据类型</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Numbers </span><br><span class=\"line\">typeof 37 === &#x27;number&#x27;;</span><br><span class=\"line\">// Strings </span><br><span class=\"line\">typeof &quot;&quot; === &#x27;string&#x27;;</span><br><span class=\"line\">// Booleans </span><br><span class=\"line\">typeof true === &#x27;boolean&#x27;;</span><br><span class=\"line\">// Symbols </span><br><span class=\"line\">typeof Symbol(&#x27;foo&#x27;) === &#x27;symbol&#x27;;</span><br><span class=\"line\">// Undefined </span><br><span class=\"line\">typeof undefined === &#x27;undefined&#x27;; </span><br><span class=\"line\">typeof blabla === &#x27;undefined&#x27;; // 一个未定义的变量,或者一个定义了却未赋初值的变量</span><br><span class=\"line\">// Objects </span><br><span class=\"line\">typeof &#123;a:1&#125; === &#x27;object&#x27;;</span><br><span class=\"line\">type [1,2,3] = &#x27;object&#x27;</span><br><span class=\"line\">------------------------&#x27;下面是不是有点奇怪？&#x27;--------------------------</span><br><span class=\"line\">// 函数</span><br><span class=\"line\">typeof function()&#123;&#125; === &#x27;function&#x27;;</span><br><span class=\"line\">// Null</span><br><span class=\"line\">typeof null === &#x27;object&#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"instanceof判断该对象是谁的实例\"><a href=\"#instanceof判断该对象是谁的实例\" class=\"headerlink\" title=\"instanceof判断该对象是谁的实例\"></a>instanceof判断该对象是谁的实例</h2><blockquote>\n<p><code>instanceof</code>的判断就是根据原型链进行搜寻，在对象obj1的原型链上如果存在另一个对象obj2的原型属性，那么表达式（<code>obj1 instanceof obj2</code>）返回值为true；否则返回false。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function Parent()&#123;&#125;;</span><br><span class=\"line\">function Child()&#123;&#125;;</span><br><span class=\"line\">function Other()&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype = new Parent();</span><br><span class=\"line\">let child = new Child();</span><br><span class=\"line\"></span><br><span class=\"line\">child instanceof Child; // true</span><br><span class=\"line\">child instanceof Parent; // true</span><br><span class=\"line\">child instanceof Object; // true</span><br><span class=\"line\">child instanceof Other; // false</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"typeof与instanceof都是判断数据类型的方法，区别如下：\"><a href=\"#typeof与instanceof都是判断数据类型的方法，区别如下：\" class=\"headerlink\" title=\"typeof与instanceof都是判断数据类型的方法，区别如下：\"></a>typeof与instanceof都是判断数据类型的方法，区别如下：</h2><ol>\n<li>typeof会返回一个变量的基本类型，instanceof返回的是一个布尔值</li>\n<li>instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</li>\n<li>而typeof 也存在弊端，它虽然可以判断基础数据类型（null 除外），但是引用数据类型中，除了function 类型以外，其他的也无法判断</li>\n</ol>\n","categories":["面试题","知识点"],"tags":["js"]},{"title":"js原型原型链","url":"/2023/08/12/js%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE/","content":"<h1 id=\"js–原型-原型链\"><a href=\"#js–原型-原型链\" class=\"headerlink\" title=\"js–原型 原型链\"></a>js–原型 原型链</h1><a id=\"more\"></a>\n\n<blockquote>\n<p>每个函数都有一个prototype, 每个对象都有一个-proto- 指向其原型对象prototype</p>\n</blockquote>\n<h3 id=\"prototype：\"><a href=\"#prototype：\" class=\"headerlink\" title=\"prototype：\"></a>prototype：</h3><blockquote>\n<p>每个函数都有prototype属性 称之为原型， 因为这个属性的值是个对象，也成为原型对象</p>\n</blockquote>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><blockquote>\n<p>存放一些属性和方法</p>\n<p>实现继承</p>\n</blockquote>\n<h3 id=\"proto-：\"><a href=\"#proto-：\" class=\"headerlink\" title=\"-proto-_：\"></a>-proto-_：</h3><blockquote>\n<p>每个对象对象都有-proto-属性</p>\n</blockquote>\n<h4 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4><blockquote>\n<p>这个属性指向它的原型对象</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const arr = new Array(1,2,3)</span><br><span class=\"line\">arr.__proto__ === Array.prototype // true</span><br></pre></td></tr></table></figure>\n\n","categories":["面试题","知识点"],"tags":["js"]},{"title":"js字符串方法","url":"/2023/08/14/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/","content":"<h1 id=\"js–字符串方法\"><a href=\"#js–字符串方法\" class=\"headerlink\" title=\"js–字符串方法\"></a>js–字符串方法</h1><a id=\"more\"></a>\n\n<blockquote>\n<h2 id=\"操作方法-转换方法-模板匹配方法\"><a href=\"#操作方法-转换方法-模板匹配方法\" class=\"headerlink\" title=\"操作方法 转换方法 模板匹配方法\"></a>操作方法 转换方法 模板匹配方法</h2></blockquote>\n<h2 id=\"一、操作方法\"><a href=\"#一、操作方法\" class=\"headerlink\" title=\"一、操作方法\"></a>一、操作方法</h2><p>我们也可将字符串常用的操作方法归纳为增、删、改、查，需要知道字符串的特点是一旦创建了，就不可变</p>\n<h3 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"#增\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sIyVFNSVBMiU5RQ==\">#</span>增</h3><p>这里增的意思并不是说直接增添内容，而是创建字符串的一个副本，再进行操作</p>\n<p>除了常用<code>+</code>以及<code>$&#123;&#125;</code>进行字符串拼接之外，还可通过<code>concat</code></p>\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"#concat\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI2NvbmNhdA==\">#</span>concat</h4><p>用于将一个或多个字符串拼接成一个新字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot;hello &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = stringValue.<span class=\"title function_\">concat</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// &quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue); <span class=\"comment\">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"#删\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sIyVFNSU4OCVBMA==\">#</span>删</h3><p>这里的删的意思并不是说删除原字符串的内容，而是创建字符串的一个副本，再进行操作</p>\n<p>常见的有：</p>\n<ul>\n<li>slice()</li>\n<li>substr()</li>\n<li>substring()</li>\n</ul>\n<p>这三个方法都返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>(<span class=\"number\">3</span>)); <span class=\"comment\">// &quot;lo world&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>(<span class=\"number\">3</span>)); <span class=\"comment\">// &quot;lo world&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>(<span class=\"number\">3</span>)); <span class=\"comment\">// &quot;lo world&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>(<span class=\"number\">3</span>, <span class=\"number\">7</span>)); <span class=\"comment\">// &quot;lo w&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>(<span class=\"number\">3</span>,<span class=\"number\">7</span>)); <span class=\"comment\">// &quot;lo w&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>(<span class=\"number\">3</span>, <span class=\"number\">7</span>)); <span class=\"comment\">// &quot;lo worl&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"#改\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sIyVFNiU5NCVCOQ==\">#</span>改</h3><p>这里改的意思也不是改变原字符串，而是创建字符串的一个副本，再进行操作</p>\n<p>常见的有：</p>\n<ul>\n<li>trim()、trimLeft()、trimRight()</li>\n<li>repeat()</li>\n<li>padStart()、padEnd()</li>\n<li>toLowerCase()、 toUpperCase()</li>\n</ul>\n<h4 id=\"trim-、trimLeft-、trimRight\"><a href=\"#trim-、trimLeft-、trimRight\" class=\"headerlink\" title=\"#trim()、trimLeft()、trimRight()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3RyaW0tJUUzJTgwJTgxdHJpbWxlZnQtJUUzJTgwJTgxdHJpbXJpZ2h0\">#</span>trim()、trimLeft()、trimRight()</h4><p>删除前、后或前后所有空格符，再返回新的字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot; hello world &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> trimmedStringValue = stringValue.<span class=\"title function_\">trim</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue); <span class=\"comment\">// &quot; hello world &quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(trimmedStringValue); <span class=\"comment\">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"#repeat()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3JlcGVhdA==\">#</span>repeat()</h4><p>接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot;na &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> copyResult = stringValue.<span class=\"title function_\">repeat</span>(<span class=\"number\">2</span>) <span class=\"comment\">// na na </span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"padEnd\"><a href=\"#padEnd\" class=\"headerlink\" title=\"#padEnd()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3BhZGVuZA==\">#</span>padEnd()</h4><p>复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">padStart</span>(<span class=\"number\">6</span>)); <span class=\"comment\">// &quot; foo&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">padStart</span>(<span class=\"number\">9</span>, <span class=\"string\">&quot;.&quot;</span>)); <span class=\"comment\">// &quot;......foo&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"toLowerCase-、-toUpperCase\"><a href=\"#toLowerCase-、-toUpperCase\" class=\"headerlink\" title=\"#toLowerCase()、 toUpperCase()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3RvbG93ZXJjYXNlLSVFMyU4MCU4MS10b3VwcGVyY2FzZQ==\">#</span>toLowerCase()、 toUpperCase()</h3><p>大小写转化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">// &quot;HELLO WORLD&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">toLowerCase</span>()); <span class=\"comment\">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"#查\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sIyVFNiU5RiVBNQ==\">#</span>查</h3><p>除了通过索引的方式获取字符串的值，还可通过：</p>\n<ul>\n<li>chatAt()</li>\n<li>indexOf()</li>\n<li>startWith()</li>\n<li>includes()</li>\n</ul>\n<h4 id=\"charAt\"><a href=\"#charAt\" class=\"headerlink\" title=\"#charAt()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI2NoYXJhdA==\">#</span>charAt()</h4><p>返回给定索引位置的字符，由传给方法的整数参数指定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">&quot;abcde&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message.<span class=\"title function_\">charAt</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// &quot;c&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"#indexOf()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI2luZGV4b2Y=\">#</span>indexOf()</h4><p>从字符串开头去搜索传入的字符串，并返回位置（如果没找到，则返回 -1 ）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;o&quot;</span>)); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"startWith-、includes\"><a href=\"#startWith-、includes\" class=\"headerlink\" title=\"#startWith()、includes()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3N0YXJ0d2l0aC0lRTMlODAlODFpbmNsdWRlcw==\">#</span>startWith()、includes()</h4><p>从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">&quot;foobarbaz&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;foo&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;bar&quot;</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;bar&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;qux&quot;</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二、转换方法\"><a href=\"#二、转换方法\" class=\"headerlink\" title=\"#二、转换方法\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sIyVFNCVCQSU4QyVFMyU4MCU4MSVFOCVCRCVBQyVFNiU4RCVBMiVFNiU5NiVCOSVFNiVCMyU5NQ==\">#</span>二、转换方法</h2><h3 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"#split\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3NwbGl0\">#</span>split</h3><p>把字符串按照指定的分割符，拆分成数组中的每一项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;12+23+34&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = str.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;+&quot;</span>) <span class=\"comment\">// [12,23,34]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三、模板匹配方法\"><a href=\"#三、模板匹配方法\" class=\"headerlink\" title=\"#三、模板匹配方法\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sIyVFNCVCOCU4OSVFMyU4MCU4MSVFNiVBOCVBMSVFNiU5RCVCRiVFNSU4QyVCOSVFOSU4NSU4RCVFNiU5NiVCOSVFNiVCMyU5NQ==\">#</span>三、模板匹配方法</h2><p>针对正则表达式，字符串设计了几个方法：</p>\n<ul>\n<li>match()</li>\n<li>search()</li>\n<li>replace()</li>\n</ul>\n<h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"#match()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI21hdGNo\">#</span>match()</h3><p>接收一个参数，可以是一个正则表达式字符串，也可以是一个<code>RegExp</code>对象，返回数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/.at/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> matches = text.<span class=\"title function_\">match</span>(pattern);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matches[<span class=\"number\">0</span>]); <span class=\"comment\">// &quot;cat&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"#search()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3NlYXJjaA==\">#</span>search()</h3><p>接收一个参数，可以是一个正则表达式字符串，也可以是一个<code>RegExp</code>对象，找到则返回匹配索引，否则返回 -1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pos = text.<span class=\"title function_\">search</span>(<span class=\"regexp\">/at/</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pos); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"#replace()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvc3RyaW5nX2FwaS5odG1sI3JlcGxhY2U=\">#</span>replace()</h3><p>接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素（可用函数）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = text.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;at&quot;</span>, <span class=\"string\">&quot;ond&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// &quot;cond, bat, sat, fat&quot;</span></span><br></pre></td></tr></table></figure>\n","categories":["面试题","知识点"],"tags":["js"]},{"title":"js数组方法","url":"/2023/08/13/js%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/","content":"<h1 id=\"js–数组方法\"><a href=\"#js–数组方法\" class=\"headerlink\" title=\"js–数组方法\"></a>js–数组方法</h1><a id=\"more\"></a>\n\n<blockquote>\n<p>数组常见方法：操作方法 排序方法 转换方法 迭代方法，</p>\n</blockquote>\n<h2 id=\"1-操作方法\"><a href=\"#1-操作方法\" class=\"headerlink\" title=\"1.操作方法\"></a>1.操作方法</h2><blockquote>\n<p>增  删  改  查</p>\n</blockquote>\n<h3 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"#增\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjJUU1JUEyJTlF\">#</span>增</h3><p>下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响</p>\n<ul>\n<li>push()</li>\n<li>unshift()</li>\n<li>splice()</li>\n<li>concat()</li>\n</ul>\n<h4 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"#push()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjcHVzaA==\">#</span>push()</h4><p><code>push()</code>方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = []; <span class=\"comment\">// 创建一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = colors.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>); <span class=\"comment\">// 推入两项</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"#unshift()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjdW5zaGlmdA==\">#</span>unshift()</h4><p>unshift()在数组开头添加任意多个值，然后返回新的数组长度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(); <span class=\"comment\">// 创建一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = colors.<span class=\"title function_\">unshift</span>(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>); <span class=\"comment\">// 从数组开头推入两项</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(count); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"#splice\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc3BsaWNl\">#</span>splice</h4><p>传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> removed = colors.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors) <span class=\"comment\">// red,yellow,orange,green,blue</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(removed) <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"#concat()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjY29uY2F0\">#</span>concat()</h4><p>首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> colors2 = colors.<span class=\"title function_\">concat</span>(<span class=\"string\">&quot;yellow&quot;</span>, [<span class=\"string\">&quot;black&quot;</span>, <span class=\"string\">&quot;brown&quot;</span>]);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors); <span class=\"comment\">// [&quot;red&quot;, &quot;green&quot;,&quot;blue&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors2); <span class=\"comment\">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"#删\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjJUU1JTg4JUEw\">#</span>删</h3><p>下面三种都会影响原数组，最后一项不影响原数组：</p>\n<ul>\n<li>pop()</li>\n<li>shift()</li>\n<li>splice()</li>\n<li>slice()</li>\n</ul>\n<h4 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"#pop()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjcG9w\">#</span>pop()</h4><p><code>pop()</code> 方法用于删除数组的最后一项，同时减少数组的<code>length</code> 值，返回被删除的项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = colors.<span class=\"title function_\">pop</span>(); <span class=\"comment\">// 取得最后一项</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item) <span class=\"comment\">// green</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors.<span class=\"property\">length</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"#shift()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc2hpZnQ=\">#</span>shift()</h4><p><code>shift()</code>方法用于删除数组的第一项，同时减少数组的<code>length</code> 值，返回被删除的项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = colors.<span class=\"title function_\">shift</span>(); <span class=\"comment\">// 取得第一项</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item) <span class=\"comment\">// red</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors.<span class=\"property\">length</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"splice-1\"><a href=\"#splice-1\" class=\"headerlink\" title=\"#splice()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc3BsaWNlLTI=\">#</span>splice()</h4><p>传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> removed = colors.<span class=\"title function_\">splice</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>); <span class=\"comment\">// 删除第一项</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors); <span class=\"comment\">// green,blue</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(removed); <span class=\"comment\">// red，只有一个元素的数组</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"#slice()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc2xpY2U=\">#</span>slice()</h3><p>slice() 用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;purple&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> colors2 = colors.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> colors3 = colors.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors)   <span class=\"comment\">// red,green,blue,yellow,purple</span></span><br><span class=\"line\">concole.<span class=\"title function_\">log</span>(colors2); <span class=\"comment\">// green,blue,yellow,purple</span></span><br><span class=\"line\">concole.<span class=\"title function_\">log</span>(colors3); <span class=\"comment\">// green,blue,yellow</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"#改\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjJUU2JTk0JUI5\">#</span>改</h4><p>即修改原来数组的内容，常用<code>splice</code></p>\n<h4 id=\"splice-2\"><a href=\"#splice-2\" class=\"headerlink\" title=\"#splice()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc3BsaWNlLTM=\">#</span>splice()</h4><p>传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> removed = colors.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;purple&quot;</span>); <span class=\"comment\">// 插入两个值，删除一个元素</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(colors); <span class=\"comment\">// red,red,purple,blue</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(removed); <span class=\"comment\">// green，只有一个元素的数组</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"#查\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjJUU2JTlGJUE1\">#</span>查</h4><p>即查找元素，返回元素坐标或者元素值</p>\n<ul>\n<li>indexOf()</li>\n<li>includes()</li>\n<li>find()</li>\n</ul>\n<h4 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"#indexOf()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjaW5kZXhvZg==\">#</span>indexOf()</h4><p>返回要查找的元素在数组中的位置，如果没找到则返回 -1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">numbers.<span class=\"title function_\">indexOf</span>(<span class=\"number\">4</span>) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"#includes()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjaW5jbHVkZXM=\">#</span>includes()</h4><p>返回要查找的元素在数组中的位置，找到返回<code>true</code>，否则<code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">numbers.<span class=\"title function_\">includes</span>(<span class=\"number\">4</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"#find()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjZmluZA==\">#</span>find()</h4><p>返回第一个匹配的元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> people = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;Matt&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">27</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;Nicholas&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">29</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">people.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">element, index, array</span>) =&gt;</span> element.<span class=\"property\">age</span> &lt; <span class=\"number\">28</span>) <span class=\"comment\">// // &#123;name: &quot;Matt&quot;, age: 27&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-排序方法\"><a href=\"#2-排序方法\" class=\"headerlink\" title=\"2.排序方法\"></a>2.排序方法</h2><p>数组有两个方法可以用来对元素重新排序：</p>\n<ul>\n<li>reverse()</li>\n<li>sort()</li>\n</ul>\n<h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"#reverse()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjcmV2ZXJzZQ==\">#</span>reverse()</h3><p>顾名思义，将数组元素方向反转</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">values.<span class=\"title function_\">reverse</span>();</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(values); <span class=\"comment\">// 5,4,3,2,1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"#sort()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc29ydA==\">#</span>sort()</h3><p>sort()方法接受一个比较函数，用于判断哪个值应该排在前面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">compare</span>(<span class=\"params\">value1, value2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value1 &lt; value2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value1 &gt; value2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\">values.<span class=\"title function_\">sort</span>(compare);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(values); <span class=\"comment\">// 0,1,5,10,15</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-转换方法\"><a href=\"#3-转换方法\" class=\"headerlink\" title=\"3.转换方法\"></a>3.转换方法</h2><h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h3><p>join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(colors.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;,&quot;</span>)); <span class=\"comment\">// red,green,blue</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(colors.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;||&quot;</span>)); <span class=\"comment\">// red||green||blue</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-迭代方法\"><a href=\"#4-迭代方法\" class=\"headerlink\" title=\"4.迭代方法\"></a>4.迭代方法</h2><p>常用来迭代数组的方法（都不改变原数组）有如下：</p>\n<ul>\n<li>some()</li>\n<li>every()</li>\n<li>forEach()</li>\n<li>filter()</li>\n<li>map()</li>\n</ul>\n<h3 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"#some()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjc29tZQ==\">#</span>some()</h3><p>对数组每一项都运行传入的测试函数，如果至少有1个元素返回 true ，则这个方法返回 true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> someResult = numbers.<span class=\"title function_\">some</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> item &gt; <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(someResult) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"#every()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjZXZlcnk=\">#</span>every()</h3><p>对数组每一项都运行传入的测试函数，如果所有元素都返回 true ，则这个方法返回 true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> everyResult = numbers.<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> item &gt; <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(everyResult) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"#forEach()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjZm9yZWFjaA==\">#</span>forEach()</h3><p>对数组每一项都运行传入的函数，没有返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">numbers.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行某些操作</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"#filter()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjZmlsdGVy\">#</span>filter()</h3><p>对数组每一项都运行传入的函数，函数返回 <code>true</code> 的项会组成数组之后返回</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> filterResult = numbers.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> item &gt; <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(filterResult); <span class=\"comment\">// 3,4,5,4,3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"#map()\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvYXJyYXlfYXBpLmh0bWwjbWFw\">#</span>map()</h3><p>对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> mapResult = numbers.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> item * <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(mapResult) <span class=\"comment\">// 2,4,6,8,10,8,6,4,2</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-数组扁平化\"><a href=\"#5-数组扁平化\" class=\"headerlink\" title=\"5.数组扁平化\"></a>5.数组扁平化</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let arr = [1, [2, [3, 4]]];</span><br><span class=\"line\">function flatten(arr) &#123;</span><br><span class=\"line\">  return arr.flat(Infinity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(flatten(arr)); //  [1, 2, 3, 4，5]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-数组求和\"><a href=\"#6-数组求和\" class=\"headerlink\" title=\"6.数组求和\"></a>6.数组求和</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev,cur,index,arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,init)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>arr: 表示将要原数组</li>\n<li>prev:表示上一次调用回调时的返回值，或者初始值init</li>\n<li>cur:表示当前正在处理的数组元素</li>\n<li>index:表示正在处理的数组元素的索引，若提供init值，则索引为0，否则索引为1</li>\n<li>init: 表示初始值</li>\n</ul>\n<p>案例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">javascript复制代码<span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre,cur</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre +cur</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum)</span><br></pre></td></tr></table></figure>\n","categories":["面试题","知识点"],"tags":["js"]},{"title":"vue3","url":"/2023/08/11/vue3/","content":"<h1 id=\"VUE3学习\"><a href=\"#VUE3学习\" class=\"headerlink\" title=\"VUE3学习\"></a><p class=\"color-blue\">VUE3学习</p></h1><a id=\"more\"></a>\n\n<h1 id=\"1-使用vite创建项目\"><a href=\"#1-使用vite创建项目\" class=\"headerlink\" title=\"1.使用vite创建项目\"></a>1.使用vite创建项目</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm create vite@latest 《项目名称》 --template vue</span><br><span class=\"line\">到文件夹中npm install</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-模板语法\"><a href=\"#2-模板语法\" class=\"headerlink\" title=\"2.模板语法\"></a>2.模板语法</h1><h2 id=\"1-v-once\"><a href=\"#1-v-once\" class=\"headerlink\" title=\"1.v-once\"></a>1.v-once</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;p v-once&gt;  &#123;&#123; uname &#125;&#125; &lt;/p&gt;</span><br><span class=\"line\">当改变uname时，插值不会更新</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态参数\"><a href=\"#2-动态参数\" class=\"headerlink\" title=\"2.动态参数\"></a>2.动态参数</h2><p>1.动态属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">id=&#x27;color&#x27;</span><br><span class=\"line\">&lt;div :[id]=&#x27;red&#x27;&gt;填充文字&lt;/div&gt;</span><br><span class=\"line\">&lt;button @click=&quot;id=&#x27;backgroundColor&#x27;&quot;&gt;点击改变id&lt;/button&gt;</span><br><span class=\"line\">当点击按钮时 背景颜色会变为红色 而不是文字颜色</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.动态事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">met=&#x27;click&#x27;</span><br><span class=\"line\">&lt;div v-on:[met]=&#x27;count++&#x27;&gt;填充文字&lt;/div&gt;</span><br><span class=\"line\">&lt;button @click=&quot;met=mouseover&quot;&gt;点击改变事件&lt;/button&gt;</span><br><span class=\"line\">原本点击div count才会加1 点击完按钮后，鼠标经过就会加1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-视图更新\"><a href=\"#3-视图更新\" class=\"headerlink\" title=\"3.视图更新\"></a>3.视图更新</h1><p>在vue2中，改变数组中的某个元素不会使视图更新，而在vue3中可以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.arr[2]=&#x27;  &#x27;,会更新视图</span><br></pre></td></tr></table></figure>\n\n<p>所以数组的一些方法也可以用来更新视图</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.push()</span><br><span class=\"line\">arr.pop()</span><br><span class=\"line\">arr.shift()</span><br><span class=\"line\">arr.unshift()</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice()</span><br><span class=\"line\">arr.sort()</span><br><span class=\"line\">arr.reverse()</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"ref-isRef\"><a href=\"#ref-isRef\" class=\"headerlink\" title=\"ref  isRef\"></a>ref  isRef</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const a= ref(0) // 使元素变为响应式</span><br><span class=\"line\">ifRef(a) === true //判断元素是否为响应式</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const b = reactive(&#123;arr:[]&#125;) //使对象 数组等变为响应式</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"toRef-toRefs-toRaw\"><a href=\"#toRef-toRefs-toRaw\" class=\"headerlink\" title=\"toRef   toRefs   toRaw\"></a>toRef   toRefs   toRaw</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">    name:1</span><br><span class=\"line\">    age:2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const state = toRef(obj, name)//将name转为响应式</span><br><span class=\"line\">const staet = toRefs(obj) // 批量追加为响应式</span><br><span class=\"line\">const newState = toRaw(state)// 将响应式转换为普通对象</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; computed, reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">let price = ref(0)//$0</span><br><span class=\"line\"> </span><br><span class=\"line\">let m = computed&lt;string&gt;(()=&gt;&#123;</span><br><span class=\"line\">   return `$` + price.value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">watch(message, (newVal, oldVal) =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27;新的值----&#x27;, newVal);</span><br><span class=\"line\">    console.log(&#x27;旧的值----&#x27;, oldVal);</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    immediate:true,</span><br><span class=\"line\">    deep:true //可以检测到对象中属性的变化</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"watchEffect\"><a href=\"#watchEffect\" class=\"headerlink\" title=\"watchEffect\"></a>watchEffect</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</span><br><span class=\"line\">如果用到message 就只会监听message 就是用到几个监听几个 而且是非惰性 会默认调用一次</span><br><span class=\"line\">const stop =  watchEffect((oninvalidate) =&gt; &#123;</span><br><span class=\"line\">    //console.log(&#x27;message&#x27;, message.value);</span><br><span class=\"line\">    oninvalidate(()=&gt;&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(&#x27;message2&#x27;, message2.value);</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    flush:&quot;post&quot;,</span><br><span class=\"line\">    onTrigger () &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">stop()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"父子传值\"><a href=\"#父子传值\" class=\"headerlink\" title=\"父子传值\"></a>父子传值</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">父传</span><br><span class=\"line\">&lt;Menu v-bind:data=&quot;data&quot;  title=&quot;我是标题&quot;&gt;&lt;/Menu&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">子接1</span><br><span class=\"line\">defineProps&lt;&#123;</span><br><span class=\"line\">    title:string,</span><br><span class=\"line\">    data:number[]</span><br><span class=\"line\">&#125;&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">子接2</span><br><span class=\"line\">//withDefaults是个函数也是无须引入开箱即用接受一个props函数第二个参数是一个对象设置默认值</span><br><span class=\"line\">type Props = &#123;</span><br><span class=\"line\">    title?: string,</span><br><span class=\"line\">    data?: number[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class=\"line\">    title: &quot;张三&quot;,</span><br><span class=\"line\">    data: () =&gt; [1, 2, 3]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">子传</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;menu&quot;&gt;</span><br><span class=\"line\">        &lt;button @click=&quot;clickTap&quot;&gt;派发给父组件&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const list = reactive&lt;number[]&gt;([4, 5, 6])</span><br><span class=\"line\"> </span><br><span class=\"line\">const emit = defineEmits([&#x27;on-click&#x27;])</span><br><span class=\"line\"> </span><br><span class=\"line\">//如果用了ts可以这样两种方式</span><br><span class=\"line\">// const emit = defineEmits&lt;&#123;</span><br><span class=\"line\">//     (e: &quot;on-click&quot;, name: string): void</span><br><span class=\"line\">// &#125;&gt;()</span><br><span class=\"line\">const clickTap = () =&gt; &#123;</span><br><span class=\"line\">    emit(&#x27;on-click&#x27;, list)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">父接</span><br><span class=\"line\">&lt;Menu @on-click=&quot;getList&quot;&gt;&lt;/Menu&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">const getList = (list: number[]) =&gt; &#123;</span><br><span class=\"line\">    console.log(list,&#x27;父组件接受子组件&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;keepAlive&gt;</span><br><span class=\"line\">    import a from &#x27;&#x27;</span><br><span class=\"line\">    import b from &#x27;&#x27;</span><br><span class=\"line\">    &lt;component :is=&quot;a&quot;&gt;&lt;/component&gt;</span><br><span class=\"line\">&lt;/keepAlive&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"异步组件\"><a href=\"#异步组件\" class=\"headerlink\" title=\"异步组件\"></a>异步组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const sync = defineAsyncComponent(() =&gt; import(&#x27;@/components/SYNC.vue&#x27;))</span><br><span class=\"line\">加载异步组件</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Suspense&gt;</span><br><span class=\"line\">    &lt;template #default&gt;</span><br><span class=\"line\">      &lt;sync&gt;&lt;/sync&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">    &lt;template #fallback&gt;</span><br><span class=\"line\">      &lt;!-- &lt;h1&gt;1111&lt;/h1&gt; --&gt;</span><br><span class=\"line\">      &lt;sync1&gt;&lt;/sync1&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/Suspense&gt;</span><br><span class=\"line\">  配合suspense使用</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sync.vue</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;异步组件&lt;/h1&gt;</span><br><span class=\"line\">    &lt;!-- 异步组件 模拟数据在public/syncData.json--&gt;</span><br><span class=\"line\">    &lt;h1&gt;&#123;&#123; myData.name &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h1&gt;&#123;&#123; myData.age &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">interface t &#123;</span><br><span class=\"line\">  name:string,</span><br><span class=\"line\">  age:number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const myData = reactive&lt;t&gt;(&#123;</span><br><span class=\"line\">  name: &#x27;&#x27;,</span><br><span class=\"line\">  age: 0</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const &#123; data &#125; = await axios.get&lt;t&gt;(&#x27;./syncData.json&#x27;)</span><br><span class=\"line\">const gets = () =&gt; &#123;</span><br><span class=\"line\">  myData.name = data.name</span><br><span class=\"line\">  myData.age = data.age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"传送组件\"><a href=\"#传送组件\" class=\"headerlink\" title=\"传送组件\"></a>传送组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Teleport to=&quot;body&quot;&gt;</span><br><span class=\"line\">    &lt;te&gt;&lt;/te&gt;</span><br><span class=\"line\">  &lt;/Teleport&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\"> 将一个组件传送值指定位置</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"transition组件\"><a href=\"#transition组件\" class=\"headerlink\" title=\"transition组件\"></a>transition组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Transition enter-active-class=&quot;animate__animated animate__flip&quot; leave-active-class=&quot;animate__animated animate__fadeOutBottomLeft&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;inner&quot; v-if=&quot;isShow&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/Transition&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">控制组件显示隐藏时的动画效果</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">可以与 animate.css 联合使用 </span><br></pre></td></tr></table></figure>\n\n<p>生命周期</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">  &lt;Transition</span><br><span class=\"line\">   enter-active-class=&quot;animate__animated animate__flip&quot; leave-active-class=&quot;animate__animated animate__fadeOutBottomLeft&quot;</span><br><span class=\"line\">   @before-enter = &quot;beEnter&quot;</span><br><span class=\"line\">   @enter = &quot;enter&quot;</span><br><span class=\"line\">   @after-enter = &quot;afterEnter&quot;</span><br><span class=\"line\">   @enter-cancelled = &quot;enterCancelled&quot;</span><br><span class=\"line\">   @before-leave = &quot;beLeave&quot;</span><br><span class=\"line\">   @leave = &quot;leave&quot;</span><br><span class=\"line\">   @after-leava = &quot;afterLeave&quot;</span><br><span class=\"line\">   @leave-cancelled = &quot;leaveCancelled&quot;</span><br><span class=\"line\">   &gt;</span><br><span class=\"line\">     &lt;!-- 生命周期 --&gt;</span><br><span class=\"line\">     &lt;div class=&quot;inner&quot; v-if=&quot;isShow&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">   &lt;/Transition&gt;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   const enter = (el:Element, done:any) =&gt; &#123;</span><br><span class=\"line\">         console.log(&#x27;已经出现~~&#x27;)</span><br><span class=\"line\">         setTimeout(() =&gt; &#123; done() &#125;, 5000) //五miao后完成</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>gsap</p>\n<p>  appear</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">appear-active-class=&quot;animate__animated animate__fadeInTopLeft&quot;</span><br><span class=\"line\">页面加载完毕 帮助执行一次</span><br><span class=\"line\">可以与 animate.css 联合使用 </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"transition-group\"><a href=\"#transition-group\" class=\"headerlink\" title=\"transition-group\"></a>transition-group</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;TransitionGroup enter-active-class=&quot;animate__animated animate__jackInTheBox&quot; leave-active-                       class=&quot;animate__animated animate__hinge&quot;&gt; </span><br><span class=\"line\">  &lt;div v-for=&quot;item in list&quot; :key=&quot;item&quot; class=&quot;item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;/TransitionGroup&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">对内部所有 加 过度</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"transition-group-amp-Lodash-平滑移动\"><a href=\"#transition-group-amp-Lodash-平滑移动\" class=\"headerlink\" title=\"transition-group &amp; Lodash 平滑移动\"></a>transition-group &amp; Lodash 平滑移动</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">  &lt;button @click=&quot;doChange&quot;&gt;变换&lt;/button&gt;</span><br><span class=\"line\">  &lt;div id=&quot;out&quot;&gt;</span><br><span class=\"line\">    &lt;TransitionGroup name=&quot;list&quot;&gt;</span><br><span class=\"line\">      &lt;div v-for=&quot;item in arr&quot; :key=&quot;item.id&quot; class=&quot;item&quot;&gt;&#123;&#123; item.index &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/TransitionGroup&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import _ from &#x27;lodash&#x27;</span><br><span class=\"line\">// 创建一个81个元素的空数组</span><br><span class=\"line\">const arr = ref(Array.apply(null, &#123; length: 81 &#125; as number[]).map((item, index) =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    id: index,</span><br><span class=\"line\">    index: index % 9 + 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">const doChange = () =&gt; &#123;</span><br><span class=\"line\">  arr.value = _.shuffle(arr.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  #out &#123;</span><br><span class=\"line\">    margin: 50px;</span><br><span class=\"line\">    width: calc(50px * 9 + 18px);</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-wrap: wrap;</span><br><span class=\"line\">    .item &#123;</span><br><span class=\"line\">      width: 50px;</span><br><span class=\"line\">      height: 50px;</span><br><span class=\"line\">      border: 1px solid black;</span><br><span class=\"line\">      background-color: aliceblue;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">      line-height: 50px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // group 中元素的移动过</span><br><span class=\"line\">  .list-move, /* 对移动中的元素应用的过渡 */</span><br><span class=\"line\">.list-enter-active,</span><br><span class=\"line\">.list-leave-active &#123;</span><br><span class=\"line\">  transition: all 0.5s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.list-enter-from,</span><br><span class=\"line\">.list-leave-to &#123;</span><br><span class=\"line\">  opacity: 0;</span><br><span class=\"line\">  transform: translateX(30px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Lodash—javascript原生库\"><a href=\"#Lodash—javascript原生库\" class=\"headerlink\" title=\"Lodash—javascript原生库\"></a>Lodash—javascript原生库</h1><h1 id=\"Gsap-—-动画库\"><a href=\"#Gsap-—-动画库\" class=\"headerlink\" title=\"Gsap — 动画库\"></a>Gsap — 动画库</h1><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"==============\"></a>==============</h1><h1 id=\"bind-apply-call\"><a href=\"#bind-apply-call\" class=\"headerlink\" title=\"bind apply  call\"></a>bind apply  call</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const p1 = &#123;</span><br><span class=\"line\">  name: &#x27;jake&#x27;,</span><br><span class=\"line\">  phone: 60,</span><br><span class=\"line\">  addP (num1, num2) &#123;</span><br><span class=\"line\">    this.phone += (num1 + num2)</span><br><span class=\"line\">    console.log(this.name + &#x27;---&gt;&#x27; + this.phone);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const p2 = &#123;</span><br><span class=\"line\">  name: &#x27;stevn&#x27;,</span><br><span class=\"line\">  phone: 50,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// console.log(p1.phone);60</span><br><span class=\"line\">// p1.addP(30)</span><br><span class=\"line\">// console.log(p1.phone);90</span><br><span class=\"line\">// p1.addP.call(p2, 30, 10) call直接传入</span><br><span class=\"line\">// p1.addP.apply(p2, [30, 10]) //apply 接收数组</span><br><span class=\"line\">const stevnAddp = p1.addP.bind(p2) //bind返回一个方法 需要手动调用</span><br><span class=\"line\">stevnAddp(30, 10)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"es6-–-gt-from-fill\"><a href=\"#es6-–-gt-from-fill\" class=\"headerlink\" title=\"es6 –&gt; from fill\"></a>es6 –&gt; from fill</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Array.fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</span><br><span class=\"line\">const array1 = [1, 2, 3, 4];</span><br><span class=\"line\"> </span><br><span class=\"line\">// fill with 0 from position 2 until position 4</span><br><span class=\"line\">console.log(array1.fill(0, 2, 4));</span><br><span class=\"line\">// expected output: [1, 2, 0, 0]</span><br><span class=\"line\"> </span><br><span class=\"line\">// fill with 5 from position 1</span><br><span class=\"line\">console.log(array1.fill(5, 1));</span><br><span class=\"line\">// expected output: [1, 5, 5, 5]</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(array1.fill(6));</span><br><span class=\"line\">// expected output: [6, 6, 6, 6]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Array.from() 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</span><br><span class=\"line\">console.log(Array.from(&#x27;foo&#x27;));</span><br><span class=\"line\">// expected output: Array [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(Array.from([1, 2, 3], x =&gt; x + x));</span><br><span class=\"line\">// expected output: Array [2, 4, 6]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"es6-–-gt-map\"><a href=\"#es6-–-gt-map\" class=\"headerlink\" title=\"es6 –&gt; map\"></a>es6 –&gt; map</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">map()方法定义在JavaScript的Array中，它返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。</span><br><span class=\"line\">map()不会对空数组进行检测</span><br><span class=\"line\">map()不会改变原始数组</span><br><span class=\"line\"></span><br><span class=\"line\">array.map(function(currentValue, index, arr), thisIndex)</span><br><span class=\"line\">currentValue：必须。当前元素的的值。</span><br><span class=\"line\">index：可选。当前元素的索引。</span><br><span class=\"line\">arr：可选。当前元素属于的数组对象。</span><br><span class=\"line\">thisValue：可选。对象作为该执行回调时使用，传递给函数，用作&quot;this&quot;的值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let array = [1, 2, 3, 4, 5];</span><br><span class=\"line\"></span><br><span class=\"line\">let newArray = array.map((item) =&gt; &#123;</span><br><span class=\"line\">    return item * item;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(newArray)  // [1, 4, 9, 16, 25]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"=============\"></a>=============</h1><h1 id=\"provide-inject\"><a href=\"#provide-inject\" class=\"headerlink\" title=\"provide inject\"></a>provide inject</h1><h1 id=\"mitt\"><a href=\"#mitt\" class=\"headerlink\" title=\"mitt\"></a>mitt</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import i mitt -S</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>两种使用方法 1 main.ts 全局配置  2 单独抽成文件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import mitt from &#x27;mitt&#x27;</span><br><span class=\"line\">const mit = mitt()</span><br><span class=\"line\">// TypeScript注册</span><br><span class=\"line\">// 由于必须要拓展ComponentCustomProperties类型才能获得类型提示</span><br><span class=\"line\">declare module &#x27;vue&#x27; &#123;</span><br><span class=\"line\">  export interface ComponentCustomProperties &#123;</span><br><span class=\"line\">      $Bus: typeof mit</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const app = createApp(App)</span><br><span class=\"line\">app.config.globalProperties.$Bus = mit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用</span><br><span class=\"line\">由于v3没有 this 所有 import &#123; getCurrentInstance &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const instance = getCurrentInstance()</span><br><span class=\"line\">instance?.proxy?.$Bus.emit(&#x27;&#x27;, )</span><br><span class=\"line\">instance?.proxy?.$Bus.on(&#x27;&#x27;, ()=&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h1><blockquote>\n<p>vue3 传给组建的v-model 需要子组件 defineProps接收 defineEmits修改</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">父亲 ： &lt;vmodel v-model=&quot;show&quot; v-model:name=&quot;name&quot;&gt;&lt;/vmodel&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">子</span><br><span class=\"line\">// 接收传来的值 :绑定的用 :后的名字接收 直接绑定的用 modelValue接收</span><br><span class=\"line\">defineProps&lt;&#123;</span><br><span class=\"line\">  modelValue: boolean,</span><br><span class=\"line\">  name:string</span><br><span class=\"line\">&#125;&gt;()</span><br><span class=\"line\">// 修改传来的值 update:名字 修改的固定写法</span><br><span class=\"line\">const emit = defineEmits([&#x27;update:modelValue&#x27;, &#x27;update:name&#x27;])</span><br><span class=\"line\">const change = () =&gt; &#123;</span><br><span class=\"line\">  emit(&#x27;update:modelValue&#x27;, false)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// inputing</span><br><span class=\"line\">const inputing = (e:Event) =&gt; &#123;</span><br><span class=\"line\">  const val = e.target as HTMLInputElement</span><br><span class=\"line\">  emit(&#x27;update:name&#x27;, val.value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">名字应为 v开头</span><br><span class=\"line\">const vMove：Directive = &#123;</span><br><span class=\"line\">  created () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; created&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeMount () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; beforeMount&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted (e:HTMLElement, binding:object, vnode:object) &#123;// e 当前dom元素 binding各种值  vnode虚拟dom </span><br><span class=\"line\">    e.focus()</span><br><span class=\"line\">    console.log(e, binding, vnode)</span><br><span class=\"line\">    console.log(&#x27;===&gt; mounted&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeUpdate () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; beforeUpdate&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  updated () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; updated&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeUnmount () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; updated&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  unmounted () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; unmounted&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const app = creatApp(app)</span><br><span class=\"line\">得到app后</span><br><span class=\"line\">app.config.globalProperties.$[名字] = ...[&#123;&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">app.config.globalProperties.$dev = &#x27;dev&#x27;</span><br><span class=\"line\">app.config.globalProperties.$filter = &#123;</span><br><span class=\"line\">  format&lt;T&gt; (str:T):string &#123;</span><br><span class=\"line\">    return &#x27;jake&#x27; + str</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// TypeScript注册</span><br><span class=\"line\">// 由于必须要拓展ComponentCustomProperties类型才能获得类型提示</span><br><span class=\"line\">type filter = &#123;</span><br><span class=\"line\">  format&lt;T&gt; (str:T):string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">declare module &#x27;vue&#x27; &#123;</span><br><span class=\"line\">  export interface ComponentCustomProperties &#123;</span><br><span class=\"line\">      $dev:string,</span><br><span class=\"line\">      $filter: filter</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 在js中使用</span><br><span class=\"line\">import &#123; ref, getCurrentInstance &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const instance = getCurrentInstance()</span><br><span class=\"line\">const data = instance?.proxy?.$dev</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"样式穿透\"><a href=\"#样式穿透\" class=\"headerlink\" title=\"样式穿透\"></a>样式穿透</h1><p>/deep/ .input {color = black}  —–&gt;  :deep(.input) { color = black }</p>\n<h1 id=\"Css新特性\"><a href=\"#Css新特性\" class=\"headerlink\" title=\"Css新特性\"></a>Css新特性</h1><ol>\n<li><p>插槽中 修改父传来的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">:slotted(属性名) &#123;</span><br><span class=\"line\">    css....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>全局样式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">:global(标签) &#123;</span><br><span class=\"line\">    css.....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>3.v-bind绑定css</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const color = ref(&#x27;red&#x27;)</span><br><span class=\"line\">style&#123;</span><br><span class=\"line\">    .input&#123;</span><br><span class=\"line\">        backgroundColor: v-bind(color)// 如果是对象格式 改为 v-bind( &#x27;~~~&#x27; )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.css  module</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;p :class=&quot;$style.类名&quot;&gt;1111&lt;/p&gt;</span><br><span class=\"line\">// 多个写成</span><br><span class=\"line\">&lt;p :class=&quot;[$style.a, $style.b]&quot;&gt;1111&lt;/p&gt;</span><br><span class=\"line\">style</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    .a &#123;</span><br><span class=\"line\">    color:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .b &#123;</span><br><span class=\"line\">    fontsize:...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style module=&quot;zs&quot;&gt;</span><br><span class=\"line\">module中的值可以把$style 替换 </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Event-Loop\"><a href=\"#Event-Loop\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h1><p>同步任务<br>代码从上到下按顺序执行</p>\n<p>异步任务<br>1.宏任务<br>script(整体代码)、setTimeout、setInterval、UI交互事件、postMessage、Ajax</p>\n<p>2.微任务<br>Promise.then catch finally、MutaionObserver、process.nextTick(Node.js 环境)</p>\n<p>运行机制</p>\n<p>所有的同步任务都是在主进程执行的形成一个执行栈，主线程之外，还存在一个”任务队列”，异步任务执行队列中先执行宏任务，然后清空当次宏任务中的所有微任务，然后进行下一个tick如此形成循环。</p>\n<p>nextTick 就是创建一个异步任务，那么它自然要等到同步任务执行完成后才执行。</p>\n<h1 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"nextTick\"></a>nextTick</h1><h1 id=\"Proxy代理解决跨域\"><a href=\"#Proxy代理解决跨域\" class=\"headerlink\" title=\"Proxy代理解决跨域\"></a>Proxy代理解决跨域</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vite.config.js ===</span><br><span class=\"line\"></span><br><span class=\"line\">server: &#123;</span><br><span class=\"line\">      proxy: &#123;</span><br><span class=\"line\">        &#x27;/api&#x27;: &#123;   ’/api‘名字自起 一般是 /api</span><br><span class=\"line\">          target: &#x27;http://localhost:9999&#x27;, //要代理的地址</span><br><span class=\"line\">          rewrite: (path) =&gt; path.replace(/^\\/api/, &#x27;&#x27;)  // 截掉api</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  与 plugins同级</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"=======================\"></a>=======================</h1><h1 id=\"pinia\"><a href=\"#pinia\" class=\"headerlink\" title=\"pinia\"></a>pinia</h1><h1 id=\"1-引入注册\"><a href=\"#1-引入注册\" class=\"headerlink\" title=\"1.引入注册\"></a>1.引入注册</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App.vue&#x27;</span><br><span class=\"line\">import &#123;createPinia&#125; from &#x27;pinia&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">const store = createPinia()</span><br><span class=\"line\">let app = createApp(App)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">app.use(store)</span><br><span class=\"line\"> </span><br><span class=\"line\">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-初始化\"><a href=\"#2-初始化\" class=\"headerlink\" title=\"2.初始化\"></a>2.初始化</h1><blockquote>\n<p><strong>1.新建一个文件夹Store</strong></p>\n<p><strong>2.新建文件[name].ts</strong></p>\n<p><strong>3.定义仓库Store</strong></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; defineStore &#125; from &#x27;pinia&#x27;</span><br><span class=\"line\">import &#123; Names &#125; from &#x27;./store-namespce&#x27; //名字</span><br><span class=\"line\"> </span><br><span class=\"line\">export const useTestStore = defineStore(Names.Test, &#123;</span><br><span class=\"line\">     state:()=&gt;&#123;</span><br><span class=\"line\">         return &#123;</span><br><span class=\"line\">             current:1</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     //类似于computed 可以帮我们去修饰我们的值</span><br><span class=\"line\">     getters:&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     //可以操作异步 和 同步提交state</span><br><span class=\"line\">     actions:&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-state\"><a href=\"#3-state\" class=\"headerlink\" title=\"3.state\"></a>3.state</h1><h2 id=\"1-在需要使用的文件夹导入\"><a href=\"#1-在需要使用的文件夹导入\" class=\"headerlink\" title=\"1.在需要使用的文件夹导入\"></a>1.在需要使用的文件夹导入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123;useTestStore&#125; from &#x27;....&#x27;</span><br><span class=\"line\">const store = userTestStore()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"修改值的五种方法\"><a href=\"#修改值的五种方法\" class=\"headerlink\" title=\"修改值的五种方法\"></a>修改值的五种方法</h2><h3 id=\"1-直接store-current\"><a href=\"#1-直接store-current\" class=\"headerlink\" title=\"1. 直接store.current++\"></a>1. 直接store.current++</h3><h2 id=\"2-批量修改state\"><a href=\"#2-批量修改state\" class=\"headerlink\" title=\"2.批量修改state\"></a>2.批量修改state</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 对象</span><br><span class=\"line\">store.$path(&#123;</span><br><span class=\"line\">    current:1</span><br><span class=\"line\">    name: &#x27;jake&#x27;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-批量修改函数格式\"><a href=\"#3-批量修改函数格式\" class=\"headerlink\" title=\"3.批量修改函数格式\"></a>3.批量修改函数格式</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">可以进行一些判断  接收一个state参数 </span><br><span class=\"line\">store.$paht((state)=&gt;&#123;</span><br><span class=\"line\">    if(....)&#123;</span><br><span class=\"line\">        state.current++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><h2 id=\"5-通过Actions修改\"><a href=\"#5-通过Actions修改\" class=\"headerlink\" title=\"5.通过Actions修改\"></a>5.通过Actions修改</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">actions:&#123;</span><br><span class=\"line\">       setCurrent () &#123;</span><br><span class=\"line\">           this.current++</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-解构store\"><a href=\"#6-解构store\" class=\"headerlink\" title=\"6.解构store\"></a>6.解构store</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">const Test = useTestStore()</span><br><span class=\"line\"> </span><br><span class=\"line\">const &#123; current, name &#125; = storeToRefs(Test)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-Actions\"><a href=\"#4-Actions\" class=\"headerlink\" title=\"4.Actions\"></a>4.Actions</h1><h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">        increment() &#123;</span><br><span class=\"line\">            this.counter++</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        randomizeCounter() &#123;</span><br><span class=\"line\">            this.counter = Math.round(100 * Math.random())</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class=\"line\">import &#123;useTestStore&#125; from &#x27;./store&#x27;</span><br><span class=\"line\">const Test = useTestStore()</span><br><span class=\"line\">const Add = () =&gt; &#123;</span><br><span class=\"line\">     Test.randomizeCounter()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结合-async-await\"><a href=\"#结合-async-await\" class=\"headerlink\" title=\"结合 async  await\"></a>结合 async  await</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">        async getLoginInfo() &#123;</span><br><span class=\"line\">            const result = await Login()</span><br><span class=\"line\">            this.user = result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多个actions-互相调用\"><a href=\"#多个actions-互相调用\" class=\"headerlink\" title=\"多个actions 互相调用\"></a>多个actions 互相调用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">       async getLoginInfo() &#123;</span><br><span class=\"line\">           const result = await Login()</span><br><span class=\"line\">           this.user = result;</span><br><span class=\"line\">           this.setName(result.name)</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       setName (name:string) &#123;</span><br><span class=\"line\">           this.name = name;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-getter\"><a href=\"#5-getter\" class=\"headerlink\" title=\"5.getter\"></a>5.getter</h1><blockquote>\n<p> 使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTclQUUlQUQlRTUlQTQlQjQlRTUlODclQkQlRTYlOTUlQjAmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">箭头函数</span>不能使用this this指向已经改变指向undefined 修改值请用state</p>\n<p> 主要作用类似于computed 数据修饰并且有缓存</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">getters:&#123;</span><br><span class=\"line\">      newCurrent ():number &#123;</span><br><span class=\"line\">          return ++this.current</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>相互调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">getters:&#123;</span><br><span class=\"line\">   newCurrent ():number | string &#123;</span><br><span class=\"line\">       return ++this.current + this.newName</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   newName ():string &#123;</span><br><span class=\"line\">       return `$-$&#123;this.name&#125;`</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-reset\"><a href=\"#6-reset\" class=\"headerlink\" title=\"6.$reset()\"></a>6.$reset()</h1><p>通过实例调用 $reset() 可以将 state重置为初始内容</p>\n<h1 id=\"7-subscribe\"><a href=\"#7-subscribe\" class=\"headerlink\" title=\"7.$subscribe()\"></a>7.$subscribe()</h1><blockquote>\n<p>在每个 state变化时 都会自动调用这个api</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">通过实例调用 $subscribe()</span><br><span class=\"line\">store.$subscribe( (args,state)=&gt;&#123;</span><br><span class=\"line\">    // args 包括新值 旧值 实例名 等</span><br><span class=\"line\">    // state 为state    </span><br><span class=\"line\">&#125; , &#123; detached:true &#125;)//设置为true 当组件销毁 一九可以监听</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-onAction\"><a href=\"#8-onAction\" class=\"headerlink\" title=\"8.$onAction()\"></a>8.$onAction()</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">store.$onAction( (args)=&gt;&#123;</span><br><span class=\"line\">    当触发事件时调用</span><br><span class=\"line\">&#125;, true )</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"=================\"></a>=================</h1><h1 id=\"vue3组件通信\"><a href=\"#vue3组件通信\" class=\"headerlink\" title=\"vue3组件通信\"></a>vue3组件通信</h1><h2 id=\"1-props\"><a href=\"#1-props\" class=\"headerlink\" title=\"1. props\"></a>1. props</h2><h2 id=\"2-自定义事件-emit\"><a href=\"#2-自定义事件-emit\" class=\"headerlink\" title=\"2.自定义事件 emit\"></a>2.自定义事件 emit</h2><h2 id=\"3-mitt兄弟传值\"><a href=\"#3-mitt兄弟传值\" class=\"headerlink\" title=\"3.mitt兄弟传值\"></a>3.mitt兄弟传值</h2><p>1.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save mitt</span><br></pre></td></tr></table></figure>\n\n<p>2.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">在main.js中挂载到全局</span><br><span class=\"line\"></span><br><span class=\"line\">////</span><br><span class=\"line\">// 标准的ES模块化引入方式</span><br><span class=\"line\">import mitt from &#x27;mitt&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const app = createApp(App)</span><br><span class=\"line\"></span><br><span class=\"line\">// vue3.x的全局实例，要挂载在config.globalProperties上</span><br><span class=\"line\">app.config.globalProperties.$EventBus = new mitt()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2/1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">或者封装一个模块</span><br><span class=\"line\"></span><br><span class=\"line\">import mitt from &#x27;mitt&#x27;</span><br><span class=\"line\">export default new mitt()</span><br></pre></td></tr></table></figure>\n\n<p>3.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//发送</span><br><span class=\"line\">$bus.emit(&#x27;toBro&#x27;, car.value)</span><br><span class=\"line\"></span><br><span class=\"line\">// 接收</span><br><span class=\"line\">$bus.on(&#x27;toBro&#x27;, (val) =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27;getting&#x27; + val);</span><br><span class=\"line\">    theCar.value = val</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-v-model\"><a href=\"#4-v-model\" class=\"headerlink\" title=\"4.v-model\"></a>4.v-model</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//父</span><br><span class=\"line\"> &lt;Son v-model:pageNum=&quot;num&quot;&gt;&lt;/Son&gt;</span><br><span class=\"line\">// 子</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;out&quot;&gt;</span><br><span class=\"line\">      &lt;h2&gt;接收到的值-&#123;&#123; pageNum &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">      &lt;button @click=&quot; emit(&#x27;update:pageNum&#x27;, prop.pageNum + 10)&quot;&gt;点击+10&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup &#123;emit&#125;&gt;</span><br><span class=\"line\">const prop = defineProps(&#123;</span><br><span class=\"line\">  pageNum: &#123;</span><br><span class=\"line\">    default: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const emit = defineEmits(&#123; &#x27;update:pageNum&#x27;: null &#125;) //对象格式 避免验证 不报警告</span><br><span class=\"line\">const addN = () =&gt; &#123;</span><br><span class=\"line\">  emit(&#x27;update:pageNum&#x27;, prop.pageNum + 10)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-useAttrs\"><a href=\"#5-useAttrs\" class=\"headerlink\" title=\"5.useAttrs\"></a>5.useAttrs</h2><p>可以获取到标签身上的属性和方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 父</span><br><span class=\"line\"> &lt;Son3 title=&quot;aaa&quot; @click=&quot;fun1&quot;&gt;&lt;/Son3&gt;</span><br><span class=\"line\"> // 子</span><br><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1 :title=&quot;$attr.title + &#x27;bbb&#x27;&quot; @click=&quot;aa&quot;&gt;son3&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import &#123; useAttrs &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">const $attr = useAttrs()</span><br><span class=\"line\">console.log($attr);</span><br><span class=\"line\">const aa = () =&gt; &#123;</span><br><span class=\"line\">  console.log(&quot;---&gt;&quot;);</span><br><span class=\"line\">  $attr.onClick</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-ref-与-parent\"><a href=\"#6-ref-与-parent\" class=\"headerlink\" title=\"6.ref 与 $parent\"></a>6.ref 与 $parent</h2><blockquote>\n<p>通过ref获取子组件属性方法</p>\n<p>通过$parent获取父组件属性和方法</p>\n</blockquote>\n<p>父</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;父值：&#123;&#123; faNum &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;获取到的子值：&#123;&#123; sonNum &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;getSon&quot;&gt;点击获取&lt;/button&gt;</span><br><span class=\"line\">    &lt;son ref=&quot;son1&quot;&gt;&lt;/son&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import son from &#x27;./Son4son.vue&#x27;</span><br><span class=\"line\">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const sonNum = ref()</span><br><span class=\"line\">const faNum = ref(100)</span><br><span class=\"line\">const son1 = ref()</span><br><span class=\"line\">const getSon = () =&gt; &#123;</span><br><span class=\"line\">  sonNum.value = son1.value.sonNum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">defineExpose(&#123; faNum &#125;)//允许外界访问</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;子值：&#123;&#123; sonNum &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;获取到的父值：&#123;&#123; faNum &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;getFa($parent)&quot;&gt;点击获取&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const sonNum = ref(200)</span><br><span class=\"line\">const faNum = ref()</span><br><span class=\"line\">const getFa = ($parent) =&gt; &#123;</span><br><span class=\"line\">  faNum.value = $parent.faNum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">defineExpose(&#123; sonNum &#125;)//允许外界访问</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-provide-inject\"><a href=\"#7-provide-inject\" class=\"headerlink\" title=\"7.provide inject\"></a>7.provide inject</h2>","categories":["笔记"],"tags":["vue3"]},{"title":"对象操作的14种方法","url":"/2023/08/17/%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C%E7%9A%8414%E7%A7%8D%E6%96%B9%E6%B3%95/","content":"<h1 id=\"js–对象操作的14种方法\"><a href=\"#js–对象操作的14种方法\" class=\"headerlink\" title=\"js–对象操作的14种方法\"></a>js–对象操作的14种方法</h1><a id=\"more\"></a>\n\n<blockquote>\n<p>定义一个 obj 对象</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">var obj = &#123;a: 1, b: 2&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1、获取原型-GetPrototypeOf\"><a href=\"#1、获取原型-GetPrototypeOf\" class=\"headerlink\" title=\"1、获取原型 [[GetPrototypeOf]]\"></a>1、获取原型 [[GetPrototypeOf]]</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 以下 3 种方式都获取到了 obj 的原型，但是只有第一种是函数式方法，是 js 内置提供的方法，推荐使用第一种</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.getPrototypeOf(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj.__proto__)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.prototype)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、设置原型-SetPrototypeOf\"><a href=\"#2、设置原型-SetPrototypeOf\" class=\"headerlink\" title=\"2、设置原型 [[SetPrototypeOf]]\"></a>2、设置原型 [[SetPrototypeOf]]</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object.setPrototypeOf(obj, &#123;c: 3&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.getPrototypeOf(obj)) // obj 的 __proto__ 设置成了 &#123;c: 3&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、判断是否可扩展-IsExtensible\"><a href=\"#3、判断是否可扩展-IsExtensible\" class=\"headerlink\" title=\"3、判断是否可扩展 [[IsExtensible]]\"></a>3、判断是否可扩展 [[IsExtensible]]</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(Object.isExtensible(obj)) // true</span><br><span class=\"line\"></span><br><span class=\"line\">// 可扩展的意思是可以给对象添加属性</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、禁止扩展-PreventExtensions\"><a href=\"#4、禁止扩展-PreventExtensions\" class=\"headerlink\" title=\"4、禁止扩展 [[PreventExtensions]]\"></a>4、禁止扩展 [[PreventExtensions]]</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object.preventExtensions(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.c = 3</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj) // &#123;a: 1, b: 2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.isExtensible(obj)) // false</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、获取自有属性-GetOwnProperty\"><a href=\"#5、获取自有属性-GetOwnProperty\" class=\"headerlink\" title=\"5、获取自有属性 [[GetOwnProperty]]\"></a>5、获取自有属性 [[GetOwnProperty]]</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object.setPrototypeOf(obj, &#123;c: 3&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.getOwnPropertyNames(obj)) // [&quot;a&quot;, &quot;b&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">// 这里只能获取到 obj 的自有属性，会把原型链上的属性排除掉</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、判断是否是自有属性-HasProperty\"><a href=\"#6、判断是否是自有属性-HasProperty\" class=\"headerlink\" title=\"6、判断是否是自有属性 [[HasProperty]]\"></a>6、判断是否是自有属性 [[HasProperty]]</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(obj.hasOwnProperty(&#x27;a&#x27;)) // true</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj.hasOwnProperty(&#x27;c&#x27;)) // false</span><br><span class=\"line\"></span><br><span class=\"line\">Object.setPrototypeOf(obj, &#123;c: 3&#125;) // 设置原型属性</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj.hasOwnProperty(&#x27;c&#x27;)) // false</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7、拦截对象操作-DefineOwnProperty\"><a href=\"#7、拦截对象操作-DefineOwnProperty\" class=\"headerlink\" title=\"7、拦截对象操作 [[DefineOwnProperty]]\"></a>7、拦截对象操作 [[DefineOwnProperty]]</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">var obj2 = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(obj2, &#x27;c&#x27;, &#123;</span><br><span class=\"line\">  set(value) &#123;</span><br><span class=\"line\">    console.log(&#x27;成功拦截了设置 c 属性的操作&#x27;)</span><br><span class=\"line\">    obj[&#x27;c&#x27;] = value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  get() &#123;</span><br><span class=\"line\">    console.log(&#x27;成功拦截了读取 c 属性的操作&#x27;)</span><br><span class=\"line\">    return obj[&#x27;c&#x27;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">obj2.c = 3</span><br><span class=\"line\">console.log(obj2.c)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8、获取-GET\"><a href=\"#8、获取-GET\" class=\"headerlink\" title=\"8、获取 [[GET]]\"></a>8、获取 [[GET]]</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object.setPrototypeOf(obj, &#123;c: 3&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj.a) // 1</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj.c) // 3</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#x27;c&#x27; in obj) // true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9、设置-SET\"><a href=\"#9、设置-SET\" class=\"headerlink\" title=\"9、设置 [[SET]]\"></a>9、设置 [[SET]]</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">obj.a = 4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">obj[&#x27;b&#x27;] = 5</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj) // &#123;a: 4, b: 5&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10、删除-Delete\"><a href=\"#10、删除-Delete\" class=\"headerlink\" title=\"10、删除 [[Delete]]\"></a>10、删除 [[Delete]]</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">delete obj.a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj) // &#123;b: 2&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11、枚举-Enumerate\"><a href=\"#11、枚举-Enumerate\" class=\"headerlink\" title=\"11、枚举 [[Enumerate]]\"></a>11、枚举 [[Enumerate]]</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object.setPrototypeOf(obj, &#123;c: 3&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for (var property in obj) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  console.log(property + &#x27;: &#x27; + obj[property])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 可以把原型链上的属性也枚举出来</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12、获取键集合-OwnPropertyKeys\"><a href=\"#12、获取键集合-OwnPropertyKeys\" class=\"headerlink\" title=\"12、获取键集合 [[OwnPropertyKeys]]\"></a>12、获取键<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTklOUIlODYlRTUlOTAlODgmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">集合</span> [[OwnPropertyKeys]]</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object.setPrototypeOf(obj, &#123;c: 3&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.keys(obj)) // [&quot;a&quot;, &quot;b&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 只能获取自有键，不能获取原型链上的键</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13、调用函数\"><a href=\"#13、调用函数\" class=\"headerlink\" title=\"13、调用函数\"></a>13、调用函数</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">function test() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">obj.test = function () &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">obj.test()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14、实例化对象\"><a href=\"#14、实例化对象\" class=\"headerlink\" title=\"14、实例化对象\"></a>14、实例化对象</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">function Test() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new Test()</span><br></pre></td></tr></table></figure>\n","categories":["笔记"],"tags":["js"]},{"title":"第一篇文章","url":"/2023/08/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><a>会逐步更新一些前端的笔记 面试题等</a></p>\n<a id=\"more\"></a>\n\n","categories":["other"],"tags":["测试"]},{"title":"虚拟dom及render渲染器","url":"/2023/08/16/%E8%99%9A%E6%8B%9Fdom%E5%8F%8Arender%E6%B8%B2%E6%9F%93%E5%99%A8/","content":"<h1 id=\"简单手写虚拟dom及渲染器\"><a href=\"#简单手写虚拟dom及渲染器\" class=\"headerlink\" title=\"简单手写虚拟dom及渲染器\"></a>简单手写虚拟dom及渲染器</h1><a id=\"more\"></a>\n\n<h2 id=\"1-虚拟dom\"><a href=\"#1-虚拟dom\" class=\"headerlink\" title=\"1.虚拟dom\"></a>1.虚拟dom</h2><blockquote>\n<p>虚拟DOM就是普通的js对象。是一个用来描述真实dom结构的js对象，因为它不是真实的dom，所以才叫做虚拟dom。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let dom = &#123;</span><br><span class=\"line\">    tag: &#x27;div&#x27;,</span><br><span class=\"line\">    props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">    children: &#x27;内容&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-render渲染器\"><a href=\"#2-render渲染器\" class=\"headerlink\" title=\"2.render渲染器\"></a>2.render渲染器</h2><blockquote>\n<p>render就是一个函数，用于将虚拟dom转为真实的dom</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function renderer (vnode, container) &#123; // vnode为要传入的虚拟dom对象， container为要挂载到的节点</span><br><span class=\"line\">    // 创建最外层元素</span><br><span class=\"line\">    const el = document.createElement(vnode.tag)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 props</span><br><span class=\"line\">    for(key in vnode.props)&#123;</span><br><span class=\"line\">        if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">             el.addEventListener(</span><br><span class=\"line\">                  key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 children</span><br><span class=\"line\">    if(typeof vnode.children === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        const text = document.createTextElement(vnode.children)</span><br><span class=\"line\">        el.appendChild(text)</span><br><span class=\"line\">    &#125;else if(Array.isArray(vnode.children)) &#123;</span><br><span class=\"line\">        renderer(vnode.children, el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 渲染到要挂载的节点上</span><br><span class=\"line\">    container.appendChild(el)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-组件的渲染\"><a href=\"#3-组件的渲染\" class=\"headerlink\" title=\"3.组件的渲染\"></a>3.组件的渲染</h2><blockquote>\n<p>组件就是一组 DOM 元素的封装，这组 DOM 元素就是组件要渲染的内容，因此我们可以定义一个函数来代表组件，而函数的返回值就代表组件要渲染的内容</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 方法形式</span><br><span class=\"line\">function MyComponent () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        tag: &#x27;div&#x27;,</span><br><span class=\"line\">        props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">        children: &#x27;内容&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 对象形式</span><br><span class=\"line\">let MyComponent = &#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return:&#123;</span><br><span class=\"line\">            tag: &#x27;div&#x27;,</span><br><span class=\"line\">            props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">            children: &#x27;内容&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">///</span><br><span class=\"line\">const vnode = &#123;</span><br><span class=\"line\">    tag: MyComponent</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>现在需要renderer渲染的有两部分，一个属组件 一个是虚拟dom对象 所以需要判断， 若 vnode.tag 类型为string 则是标签，若为object，则是组件 </p>\n</blockquote>\n<h3 id=\"分别创建渲染组件和标签的方法\"><a href=\"#分别创建渲染组件和标签的方法\" class=\"headerlink\" title=\"分别创建渲染组件和标签的方法\"></a>分别创建渲染组件和标签的方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 渲染标签的函数</span><br><span class=\"line\">function mountElement(vnode,container)&#123;</span><br><span class=\"line\">        // 创建最外层元素</span><br><span class=\"line\">    const el = document.createElement(vnode.tag)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 props</span><br><span class=\"line\">    for(key in vnode.props)&#123;</span><br><span class=\"line\">        if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">             el.addEventListener(</span><br><span class=\"line\">                  key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 children</span><br><span class=\"line\">    if(typeof vnode.children === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        const text = document.createTextElement(vnode.children)</span><br><span class=\"line\">        el.appendChild(text)</span><br><span class=\"line\">    &#125;else if(Array.isArray(vnode.children)) &#123;</span><br><span class=\"line\">        renderer(vnode.children, el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 渲染到要挂载的节点上</span><br><span class=\"line\">    container.appendChild(el)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 渲染组件的函数</span><br><span class=\"line\">function mountComponent(vnode,container)&#123;</span><br><span class=\"line\">    const subTree = vnode.tag()</span><br><span class=\"line\">    renderer(subTree,container)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 渲染器</span><br><span class=\"line\">function renderer(vnode,container)&#123;</span><br><span class=\"line\">    if(typeof vnode.tag === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        mountElement(vnode,container)</span><br><span class=\"line\">    &#125;else if(vnode.tag === &#x27;function&#x27;) &#123;</span><br><span class=\"line\">        mountComponent(vnode,container)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"当组件为对象格式\"><a href=\"#当组件为对象格式\" class=\"headerlink\" title=\"当组件为对象格式\"></a>当组件为对象格式</h3><blockquote>\n<p>对渲染组件的函数进行修改</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 渲染组件的函数</span><br><span class=\"line\">function mountComponent(vnode,container)&#123;</span><br><span class=\"line\">    const subTree = vnode.tag.render()</span><br><span class=\"line\">    renderer(subTree,container)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对渲染器进行修改</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function renderer(vnode,container)&#123;</span><br><span class=\"line\">    if(typeof vnode.tag === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        mountElement(vnode,container)</span><br><span class=\"line\">    &#125;else if(vnode.tag === &#x27;object&#x27;) &#123;</span><br><span class=\"line\">        mountComponent(vnode,container)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["面试题","源码"],"tags":["vue3"]}]