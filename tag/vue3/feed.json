{
    "version": "https://jsonfeed.org/version/1",
    "title": "zhuZhu • All posts by \"vue3\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/08/18/diff%E7%AE%97%E6%B3%95/",
            "url": "http://example.com/2023/08/18/diff%E7%AE%97%E6%B3%95/",
            "title": "diff算法",
            "date_published": "2023-08-18T04:47:09.000Z",
            "content_html": "<h1 id=\"简单实现diff方法\"><a href=\"#简单实现diff方法\" class=\"headerlink\" title=\"简单实现diff方法\"></a>简单实现diff方法</h1><a id=\"more\"></a>\n\n<h3 id=\"一、是什么diff算法\"><a href=\"#一、是什么diff算法\" class=\"headerlink\" title=\"一、是什么diff算法\"></a>一、是什么diff算法</h3><p>先来一句概念：</p>\n<blockquote>\n<p>diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方，最后用patch记录的消息去局部更新Dom。</p>\n</blockquote>\n<p>换句人话</p>\n<blockquote>\n<p>diff的过程就是调用名为patch的函数，比较新旧节点，一边比较一边给真实的DOM打补丁</p>\n</blockquote>\n<p><strong>其有两个特点：</strong></p>\n<ul>\n<li>比较只会在同层级进行, 不会跨层级比较</li>\n<li>在diff比较的过程中，循环从两边向中间比较</li>\n</ul>\n<h3 id=\"Diff算法的步骤：\"><a href=\"#Diff算法的步骤：\" class=\"headerlink\" title=\"Diff算法的步骤：\"></a>Diff算法的步骤：</h3><ul>\n<li>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文 档当中</li>\n<li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较(diff)，记录两棵树差异</li>\n<li>把第二棵树所记录的差异应用到第一棵树所构建的真正的DOM树上(patch)，视图就更新了</li>\n</ul>\n<h3 id=\"二、比较方式\"><a href=\"#二、比较方式\" class=\"headerlink\" title=\"二、比较方式\"></a>二、比较方式</h3><p>diff整体策略为：深度优先，同层比较</p>\n<h3 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1.数据\"></a>1.数据</h4><blockquote>\n<p>vDom用于模拟更新前dom， vDom1用于模拟更新后dom</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// dom类</span><br><span class=\"line\">class Element &#123;</span><br><span class=\"line\">    constructor(type,props,children)&#123;</span><br><span class=\"line\">        this.type = type</span><br><span class=\"line\">        this.props = props</span><br><span class=\"line\">        this.children = children</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">function createElement(type,props,children)&#123;</span><br><span class=\"line\">    return new Element(type,props,children)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 虚拟dom</span><br><span class=\"line\">const vDom = createElement(&#x27;ul&#x27;, &#123;</span><br><span class=\"line\">    class:&#x27;list&#x27;,</span><br><span class=\"line\">    style: &#x27;width: 300px; height: 300px; background-color: orange&#x27;</span><br><span class=\"line\">   &#125;, </span><br><span class=\"line\">   [</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 0</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第一个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 1</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第2个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第3个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),        </span><br><span class=\"line\">   ])</span><br><span class=\"line\">// 用于寻找补丁的dom</span><br><span class=\"line\">const vDom1 = createElement(&#x27;ul&#x27;, &#123;</span><br><span class=\"line\">    class:&#x27;list-wrap&#x27;,</span><br><span class=\"line\">    style: &#x27;width: 300px; height: 300px; background-color: orange&#x27;</span><br><span class=\"line\">   &#125;, </span><br><span class=\"line\">   [</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 0</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text1&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;特殊列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;li&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 1</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;title&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第2个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    createElement(</span><br><span class=\"line\">        &#x27;div&#x27;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        class: &#x27;item&#x27;,</span><br><span class=\"line\">        &#x27;data-index&#x27;: 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [</span><br><span class=\"line\">        createElement(&#x27;p&#x27;, &#123;</span><br><span class=\"line\">            class: &#x27;text&#x27;, </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            [&#x27;第3个列表项&#x27;]</span><br><span class=\"line\">            )</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ),        </span><br><span class=\"line\">   ])</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-渲染器\"><a href=\"#2-渲染器\" class=\"headerlink\" title=\"2.渲染器\"></a>2.渲染器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// render渲染器</span><br><span class=\"line\">    let render = (vsnode,el)=&gt;&#123;</span><br><span class=\"line\">        // 创建最外层dom元素</span><br><span class=\"line\">        const vel = document.createElement(vsnode.type)</span><br><span class=\"line\">        for(key in vsnode.props)&#123;</span><br><span class=\"line\">            if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">                vel.addEventListener(</span><br><span class=\"line\">                    key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;else if(key == &#x27;class&#x27;) &#123;//添加类名</span><br><span class=\"line\">                vel.className=vsnode.props[key]</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                // vel.</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 如果children是字符串 则创建节点追加到vel</span><br><span class=\"line\">        if(typeof vsnode.children == &#x27;string&#x27;)&#123;</span><br><span class=\"line\">            const text = document.createTextNode(vsnode.children)</span><br><span class=\"line\">            vel.appendChild(text)</span><br><span class=\"line\">            // 如果是数组 递归</span><br><span class=\"line\">        &#125;else if(Array.isArray(vsnode.children))&#123;</span><br><span class=\"line\">            vsnode.children.forEach(chil =&gt; &#123;</span><br><span class=\"line\">                render(chil,vel)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        el.appendChild(vel)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-diff函数\"><a href=\"#3-diff函数\" class=\"headerlink\" title=\"3.diff函数\"></a>3.diff函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// diff</span><br><span class=\"line\">let types = &#123;ATTR:&#x27;ATTE&#x27;,TEXT:&#x27;TEXT&#x27;,REPLACE:&#x27;REPLACE&#x27;,REMOVE:&#x27;REMOVE&#x27;&#125;//模拟补丁类型</span><br><span class=\"line\">// 用于寻找补丁</span><br><span class=\"line\">let patches = &#123;&#125; //找到的补丁</span><br><span class=\"line\">let vnIndex = 0</span><br><span class=\"line\">const domDiff = (oldVDom, newVDom)=&gt;&#123;</span><br><span class=\"line\">    let index = 0</span><br><span class=\"line\">    vNodeWalk(oldVDom, newVDom,index)//寻找节点的补丁</span><br><span class=\"line\">    return patches</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const vNodeWalk = (oldNode, newNode, index)=&gt;&#123;</span><br><span class=\"line\">    let vnPatch = [] //本节点的补丁</span><br><span class=\"line\">    if(!newNode)&#123;//判断newnode是否被删除</span><br><span class=\"line\">        vnPatch.push(&#123;</span><br><span class=\"line\">            type: types.REMOVE,</span><br><span class=\"line\">            index:index</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;else if (typeof oldNode === &#x27;string&#x27; &amp;&amp; typeof newNode === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">        if(oldNode != newNode)&#123;//判断文本节点是否改变</span><br><span class=\"line\">            vnPatch.push(&#123;</span><br><span class=\"line\">                type:types.TEXT,</span><br><span class=\"line\">                text:newNode</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;else if (oldNode.type === newNode.type) &#123;</span><br><span class=\"line\">        const attrPatch = attrsWalk(oldNode.props, newNode.props)//用于判断两个节点的属性</span><br><span class=\"line\">        if(Object.keys(attrPatch).length&gt;0)&#123;</span><br><span class=\"line\">            vnPatch.push(&#123;</span><br><span class=\"line\">                type:types.ATTR,</span><br><span class=\"line\">                attrs: attrPatch</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 寻找子节点补丁</span><br><span class=\"line\">    childWalk(oldNode.children, newNode.children,vnIndex)</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        vnPatch.push(&#123;</span><br><span class=\"line\">            type: types.REPLACE,</span><br><span class=\"line\">            newNode</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(vnPatch.length &gt; 0)&#123;</span><br><span class=\"line\">        patches[index] = vnPatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//用于判断两个节点的属性</span><br><span class=\"line\">const attrsWalk = (oldAttrs, newAttrs)=&gt;&#123;</span><br><span class=\"line\">    let attrPatch = &#123;&#125;;</span><br><span class=\"line\">    // 修改属性</span><br><span class=\"line\">    for (key in oldAttrs) &#123;</span><br><span class=\"line\">        if(oldAttrs[key] != newAttrs[key])&#123;</span><br><span class=\"line\">            attrPatch[key] = newAttrs[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 新增属性</span><br><span class=\"line\">    for(key in newAttrs)&#123;</span><br><span class=\"line\">        if(!oldAttrs.hasOwnProperty(key))&#123;</span><br><span class=\"line\">            attrPatch[key] = newAttrs[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return attrPatch</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// // 寻找子节点补丁</span><br><span class=\"line\">const childWalk = (oldChildren, newChildren)=&gt;&#123;</span><br><span class=\"line\">    oldChildren.map((c,idx)=&gt;&#123;</span><br><span class=\"line\">        vNodeWalk(c, newChildren[idx], ++vnIndex)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">domDiff(vDom,vDom1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-打补丁\"><a href=\"#4-打补丁\" class=\"headerlink\" title=\"4.打补丁\"></a>4.打补丁</h4>",
            "tags": [
                "vue3"
            ]
        },
        {
            "id": "http://example.com/2023/08/16/%E8%99%9A%E6%8B%9Fdom%E5%8F%8Arender%E6%B8%B2%E6%9F%93%E5%99%A8/",
            "url": "http://example.com/2023/08/16/%E8%99%9A%E6%8B%9Fdom%E5%8F%8Arender%E6%B8%B2%E6%9F%93%E5%99%A8/",
            "title": "虚拟dom及render渲染器",
            "date_published": "2023-08-16T11:36:07.000Z",
            "content_html": "<h1 id=\"简单手写虚拟dom及渲染器\"><a href=\"#简单手写虚拟dom及渲染器\" class=\"headerlink\" title=\"简单手写虚拟dom及渲染器\"></a>简单手写虚拟dom及渲染器</h1><a id=\"more\"></a>\n\n<h2 id=\"1-虚拟dom\"><a href=\"#1-虚拟dom\" class=\"headerlink\" title=\"1.虚拟dom\"></a>1.虚拟dom</h2><blockquote>\n<p>虚拟DOM就是普通的js对象。是一个用来描述真实dom结构的js对象，因为它不是真实的dom，所以才叫做虚拟dom。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let dom = &#123;</span><br><span class=\"line\">    tag: &#x27;div&#x27;,</span><br><span class=\"line\">    props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">    children: &#x27;内容&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-render渲染器\"><a href=\"#2-render渲染器\" class=\"headerlink\" title=\"2.render渲染器\"></a>2.render渲染器</h2><blockquote>\n<p>render就是一个函数，用于将虚拟dom转为真实的dom</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function renderer (vnode, container) &#123; // vnode为要传入的虚拟dom对象， container为要挂载到的节点</span><br><span class=\"line\">    // 创建最外层元素</span><br><span class=\"line\">    const el = document.createElement(vnode.tag)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 props</span><br><span class=\"line\">    for(key in vnode.props)&#123;</span><br><span class=\"line\">        if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">             el.addEventListener(</span><br><span class=\"line\">                  key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 children</span><br><span class=\"line\">    if(typeof vnode.children === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        const text = document.createTextElement(vnode.children)</span><br><span class=\"line\">        el.appendChild(text)</span><br><span class=\"line\">    &#125;else if(Array.isArray(vnode.children)) &#123;</span><br><span class=\"line\">        renderer(vnode.children, el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 渲染到要挂载的节点上</span><br><span class=\"line\">    container.appendChild(el)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-组件的渲染\"><a href=\"#3-组件的渲染\" class=\"headerlink\" title=\"3.组件的渲染\"></a>3.组件的渲染</h2><blockquote>\n<p>组件就是一组 DOM 元素的封装，这组 DOM 元素就是组件要渲染的内容，因此我们可以定义一个函数来代表组件，而函数的返回值就代表组件要渲染的内容</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方法形式</span><br><span class=\"line\">function MyComponent () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        tag: &#x27;div&#x27;,</span><br><span class=\"line\">        props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">        children: &#x27;内容&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 对象形式</span><br><span class=\"line\">let MyComponent = &#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return:&#123;</span><br><span class=\"line\">            tag: &#x27;div&#x27;,</span><br><span class=\"line\">            props: &#123;onClick: ()=&gt;&#123;alert(&#x27;123&#x27;)&#125;&#125;,</span><br><span class=\"line\">            children: &#x27;内容&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">///</span><br><span class=\"line\">const vnode = &#123;</span><br><span class=\"line\">    tag: MyComponent</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>现在需要renderer渲染的有两部分，一个属组件 一个是虚拟dom对象 所以需要判断， 若 vnode.tag 类型为string 则是标签，若为object，则是组件 </p>\n</blockquote>\n<h3 id=\"分别创建渲染组件和标签的方法\"><a href=\"#分别创建渲染组件和标签的方法\" class=\"headerlink\" title=\"分别创建渲染组件和标签的方法\"></a>分别创建渲染组件和标签的方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 渲染标签的函数</span><br><span class=\"line\">function mountElement(vnode,container)&#123;</span><br><span class=\"line\">        // 创建最外层元素</span><br><span class=\"line\">    const el = document.createElement(vnode.tag)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 props</span><br><span class=\"line\">    for(key in vnode.props)&#123;</span><br><span class=\"line\">        if(/^on/.test(key))&#123; // on开头是事件</span><br><span class=\"line\">             el.addEventListener(</span><br><span class=\"line\">                  key.substr(2).toLowerCase(),</span><br><span class=\"line\">                    vsnode.props[key]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理 children</span><br><span class=\"line\">    if(typeof vnode.children === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        const text = document.createTextElement(vnode.children)</span><br><span class=\"line\">        el.appendChild(text)</span><br><span class=\"line\">    &#125;else if(Array.isArray(vnode.children)) &#123;</span><br><span class=\"line\">        renderer(vnode.children, el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 渲染到要挂载的节点上</span><br><span class=\"line\">    container.appendChild(el)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 渲染组件的函数</span><br><span class=\"line\">function mountComponent(vnode,container)&#123;</span><br><span class=\"line\">    const subTree = vnode.tag()</span><br><span class=\"line\">    renderer(subTree,container)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 渲染器</span><br><span class=\"line\">function renderer(vnode,container)&#123;</span><br><span class=\"line\">    if(typeof vnode.tag === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        mountElement(vnode,container)</span><br><span class=\"line\">    &#125;else if(vnode.tag === &#x27;function&#x27;) &#123;</span><br><span class=\"line\">        mountComponent(vnode,container)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"当组件为对象格式\"><a href=\"#当组件为对象格式\" class=\"headerlink\" title=\"当组件为对象格式\"></a>当组件为对象格式</h3><blockquote>\n<p>对渲染组件的函数进行修改</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 渲染组件的函数</span><br><span class=\"line\">function mountComponent(vnode,container)&#123;</span><br><span class=\"line\">    const subTree = vnode.tag.render()</span><br><span class=\"line\">    renderer(subTree,container)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对渲染器进行修改</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function renderer(vnode,container)&#123;</span><br><span class=\"line\">    if(typeof vnode.tag === &#x27;string&#x27;)&#123;</span><br><span class=\"line\">        mountElement(vnode,container)</span><br><span class=\"line\">    &#125;else if(vnode.tag === &#x27;object&#x27;) &#123;</span><br><span class=\"line\">        mountComponent(vnode,container)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "vue3"
            ]
        },
        {
            "id": "http://example.com/2023/08/11/vue3/",
            "url": "http://example.com/2023/08/11/vue3/",
            "title": "vue3",
            "date_published": "2023-08-11T14:10:03.000Z",
            "content_html": "<h1 id=\"VUE3学习\"><a href=\"#VUE3学习\" class=\"headerlink\" title=\"VUE3学习\"></a><p class=\"color-blue\">VUE3学习</p></h1><a id=\"more\"></a>\n\n<h1 id=\"1-使用vite创建项目\"><a href=\"#1-使用vite创建项目\" class=\"headerlink\" title=\"1.使用vite创建项目\"></a>1.使用vite创建项目</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm create vite@latest 《项目名称》 --template vue</span><br><span class=\"line\">到文件夹中npm install</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-模板语法\"><a href=\"#2-模板语法\" class=\"headerlink\" title=\"2.模板语法\"></a>2.模板语法</h1><h2 id=\"1-v-once\"><a href=\"#1-v-once\" class=\"headerlink\" title=\"1.v-once\"></a>1.v-once</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-once&gt;  &#123;&#123; uname &#125;&#125; &lt;/p&gt;</span><br><span class=\"line\">当改变uname时，插值不会更新</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态参数\"><a href=\"#2-动态参数\" class=\"headerlink\" title=\"2.动态参数\"></a>2.动态参数</h2><p>1.动态属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=&#x27;color&#x27;</span><br><span class=\"line\">&lt;div :[id]=&#x27;red&#x27;&gt;填充文字&lt;/div&gt;</span><br><span class=\"line\">&lt;button @click=&quot;id=&#x27;backgroundColor&#x27;&quot;&gt;点击改变id&lt;/button&gt;</span><br><span class=\"line\">当点击按钮时 背景颜色会变为红色 而不是文字颜色</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.动态事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">met=&#x27;click&#x27;</span><br><span class=\"line\">&lt;div v-on:[met]=&#x27;count++&#x27;&gt;填充文字&lt;/div&gt;</span><br><span class=\"line\">&lt;button @click=&quot;met=mouseover&quot;&gt;点击改变事件&lt;/button&gt;</span><br><span class=\"line\">原本点击div count才会加1 点击完按钮后，鼠标经过就会加1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-视图更新\"><a href=\"#3-视图更新\" class=\"headerlink\" title=\"3.视图更新\"></a>3.视图更新</h1><p>在vue2中，改变数组中的某个元素不会使视图更新，而在vue3中可以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.arr[2]=&#x27;  &#x27;,会更新视图</span><br></pre></td></tr></table></figure>\n\n<p>所以数组的一些方法也可以用来更新视图</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.push()</span><br><span class=\"line\">arr.pop()</span><br><span class=\"line\">arr.shift()</span><br><span class=\"line\">arr.unshift()</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice()</span><br><span class=\"line\">arr.sort()</span><br><span class=\"line\">arr.reverse()</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"ref-isRef\"><a href=\"#ref-isRef\" class=\"headerlink\" title=\"ref  isRef\"></a>ref  isRef</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a= ref(0) // 使元素变为响应式</span><br><span class=\"line\">ifRef(a) === true //判断元素是否为响应式</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const b = reactive(&#123;arr:[]&#125;) //使对象 数组等变为响应式</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"toRef-toRefs-toRaw\"><a href=\"#toRef-toRefs-toRaw\" class=\"headerlink\" title=\"toRef   toRefs   toRaw\"></a>toRef   toRefs   toRaw</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">    name:1</span><br><span class=\"line\">    age:2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const state = toRef(obj, name)//将name转为响应式</span><br><span class=\"line\">const staet = toRefs(obj) // 批量追加为响应式</span><br><span class=\"line\">const newState = toRaw(state)// 将响应式转换为普通对象</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; computed, reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">let price = ref(0)//$0</span><br><span class=\"line\"> </span><br><span class=\"line\">let m = computed&lt;string&gt;(()=&gt;&#123;</span><br><span class=\"line\">   return `$` + price.value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch(message, (newVal, oldVal) =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27;新的值----&#x27;, newVal);</span><br><span class=\"line\">    console.log(&#x27;旧的值----&#x27;, oldVal);</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    immediate:true,</span><br><span class=\"line\">    deep:true //可以检测到对象中属性的变化</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"watchEffect\"><a href=\"#watchEffect\" class=\"headerlink\" title=\"watchEffect\"></a>watchEffect</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</span><br><span class=\"line\">如果用到message 就只会监听message 就是用到几个监听几个 而且是非惰性 会默认调用一次</span><br><span class=\"line\">const stop =  watchEffect((oninvalidate) =&gt; &#123;</span><br><span class=\"line\">    //console.log(&#x27;message&#x27;, message.value);</span><br><span class=\"line\">    oninvalidate(()=&gt;&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(&#x27;message2&#x27;, message2.value);</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    flush:&quot;post&quot;,</span><br><span class=\"line\">    onTrigger () &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">stop()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"父子传值\"><a href=\"#父子传值\" class=\"headerlink\" title=\"父子传值\"></a>父子传值</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父传</span><br><span class=\"line\">&lt;Menu v-bind:data=&quot;data&quot;  title=&quot;我是标题&quot;&gt;&lt;/Menu&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">子接1</span><br><span class=\"line\">defineProps&lt;&#123;</span><br><span class=\"line\">    title:string,</span><br><span class=\"line\">    data:number[]</span><br><span class=\"line\">&#125;&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">子接2</span><br><span class=\"line\">//withDefaults是个函数也是无须引入开箱即用接受一个props函数第二个参数是一个对象设置默认值</span><br><span class=\"line\">type Props = &#123;</span><br><span class=\"line\">    title?: string,</span><br><span class=\"line\">    data?: number[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class=\"line\">    title: &quot;张三&quot;,</span><br><span class=\"line\">    data: () =&gt; [1, 2, 3]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">子传</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;menu&quot;&gt;</span><br><span class=\"line\">        &lt;button @click=&quot;clickTap&quot;&gt;派发给父组件&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const list = reactive&lt;number[]&gt;([4, 5, 6])</span><br><span class=\"line\"> </span><br><span class=\"line\">const emit = defineEmits([&#x27;on-click&#x27;])</span><br><span class=\"line\"> </span><br><span class=\"line\">//如果用了ts可以这样两种方式</span><br><span class=\"line\">// const emit = defineEmits&lt;&#123;</span><br><span class=\"line\">//     (e: &quot;on-click&quot;, name: string): void</span><br><span class=\"line\">// &#125;&gt;()</span><br><span class=\"line\">const clickTap = () =&gt; &#123;</span><br><span class=\"line\">    emit(&#x27;on-click&#x27;, list)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">父接</span><br><span class=\"line\">&lt;Menu @on-click=&quot;getList&quot;&gt;&lt;/Menu&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">const getList = (list: number[]) =&gt; &#123;</span><br><span class=\"line\">    console.log(list,&#x27;父组件接受子组件&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keepAlive&gt;</span><br><span class=\"line\">    import a from &#x27;&#x27;</span><br><span class=\"line\">    import b from &#x27;&#x27;</span><br><span class=\"line\">    &lt;component :is=&quot;a&quot;&gt;&lt;/component&gt;</span><br><span class=\"line\">&lt;/keepAlive&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"异步组件\"><a href=\"#异步组件\" class=\"headerlink\" title=\"异步组件\"></a>异步组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const sync = defineAsyncComponent(() =&gt; import(&#x27;@/components/SYNC.vue&#x27;))</span><br><span class=\"line\">加载异步组件</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Suspense&gt;</span><br><span class=\"line\">    &lt;template #default&gt;</span><br><span class=\"line\">      &lt;sync&gt;&lt;/sync&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">    &lt;template #fallback&gt;</span><br><span class=\"line\">      &lt;!-- &lt;h1&gt;1111&lt;/h1&gt; --&gt;</span><br><span class=\"line\">      &lt;sync1&gt;&lt;/sync1&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/Suspense&gt;</span><br><span class=\"line\">  配合suspense使用</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync.vue</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;异步组件&lt;/h1&gt;</span><br><span class=\"line\">    &lt;!-- 异步组件 模拟数据在public/syncData.json--&gt;</span><br><span class=\"line\">    &lt;h1&gt;&#123;&#123; myData.name &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h1&gt;&#123;&#123; myData.age &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">interface t &#123;</span><br><span class=\"line\">  name:string,</span><br><span class=\"line\">  age:number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const myData = reactive&lt;t&gt;(&#123;</span><br><span class=\"line\">  name: &#x27;&#x27;,</span><br><span class=\"line\">  age: 0</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const &#123; data &#125; = await axios.get&lt;t&gt;(&#x27;./syncData.json&#x27;)</span><br><span class=\"line\">const gets = () =&gt; &#123;</span><br><span class=\"line\">  myData.name = data.name</span><br><span class=\"line\">  myData.age = data.age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"传送组件\"><a href=\"#传送组件\" class=\"headerlink\" title=\"传送组件\"></a>传送组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Teleport to=&quot;body&quot;&gt;</span><br><span class=\"line\">    &lt;te&gt;&lt;/te&gt;</span><br><span class=\"line\">  &lt;/Teleport&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\"> 将一个组件传送值指定位置</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"transition组件\"><a href=\"#transition组件\" class=\"headerlink\" title=\"transition组件\"></a>transition组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Transition enter-active-class=&quot;animate__animated animate__flip&quot; leave-active-class=&quot;animate__animated animate__fadeOutBottomLeft&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;inner&quot; v-if=&quot;isShow&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/Transition&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">控制组件显示隐藏时的动画效果</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以与 animate.css 联合使用 </span><br></pre></td></tr></table></figure>\n\n<p>生命周期</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;Transition</span><br><span class=\"line\">   enter-active-class=&quot;animate__animated animate__flip&quot; leave-active-class=&quot;animate__animated animate__fadeOutBottomLeft&quot;</span><br><span class=\"line\">   @before-enter = &quot;beEnter&quot;</span><br><span class=\"line\">   @enter = &quot;enter&quot;</span><br><span class=\"line\">   @after-enter = &quot;afterEnter&quot;</span><br><span class=\"line\">   @enter-cancelled = &quot;enterCancelled&quot;</span><br><span class=\"line\">   @before-leave = &quot;beLeave&quot;</span><br><span class=\"line\">   @leave = &quot;leave&quot;</span><br><span class=\"line\">   @after-leava = &quot;afterLeave&quot;</span><br><span class=\"line\">   @leave-cancelled = &quot;leaveCancelled&quot;</span><br><span class=\"line\">   &gt;</span><br><span class=\"line\">     &lt;!-- 生命周期 --&gt;</span><br><span class=\"line\">     &lt;div class=&quot;inner&quot; v-if=&quot;isShow&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">   &lt;/Transition&gt;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   const enter = (el:Element, done:any) =&gt; &#123;</span><br><span class=\"line\">         console.log(&#x27;已经出现~~&#x27;)</span><br><span class=\"line\">         setTimeout(() =&gt; &#123; done() &#125;, 5000) //五miao后完成</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>gsap</p>\n<p>  appear</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appear-active-class=&quot;animate__animated animate__fadeInTopLeft&quot;</span><br><span class=\"line\">页面加载完毕 帮助执行一次</span><br><span class=\"line\">可以与 animate.css 联合使用 </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"transition-group\"><a href=\"#transition-group\" class=\"headerlink\" title=\"transition-group\"></a>transition-group</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TransitionGroup enter-active-class=&quot;animate__animated animate__jackInTheBox&quot; leave-active-                       class=&quot;animate__animated animate__hinge&quot;&gt; </span><br><span class=\"line\">  &lt;div v-for=&quot;item in list&quot; :key=&quot;item&quot; class=&quot;item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;/TransitionGroup&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">对内部所有 加 过度</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"transition-group-amp-Lodash-平滑移动\"><a href=\"#transition-group-amp-Lodash-平滑移动\" class=\"headerlink\" title=\"transition-group &amp; Lodash 平滑移动\"></a>transition-group &amp; Lodash 平滑移动</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;button @click=&quot;doChange&quot;&gt;变换&lt;/button&gt;</span><br><span class=\"line\">  &lt;div id=&quot;out&quot;&gt;</span><br><span class=\"line\">    &lt;TransitionGroup name=&quot;list&quot;&gt;</span><br><span class=\"line\">      &lt;div v-for=&quot;item in arr&quot; :key=&quot;item.id&quot; class=&quot;item&quot;&gt;&#123;&#123; item.index &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/TransitionGroup&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import _ from &#x27;lodash&#x27;</span><br><span class=\"line\">// 创建一个81个元素的空数组</span><br><span class=\"line\">const arr = ref(Array.apply(null, &#123; length: 81 &#125; as number[]).map((item, index) =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    id: index,</span><br><span class=\"line\">    index: index % 9 + 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">const doChange = () =&gt; &#123;</span><br><span class=\"line\">  arr.value = _.shuffle(arr.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  #out &#123;</span><br><span class=\"line\">    margin: 50px;</span><br><span class=\"line\">    width: calc(50px * 9 + 18px);</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-wrap: wrap;</span><br><span class=\"line\">    .item &#123;</span><br><span class=\"line\">      width: 50px;</span><br><span class=\"line\">      height: 50px;</span><br><span class=\"line\">      border: 1px solid black;</span><br><span class=\"line\">      background-color: aliceblue;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">      line-height: 50px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // group 中元素的移动过</span><br><span class=\"line\">  .list-move, /* 对移动中的元素应用的过渡 */</span><br><span class=\"line\">.list-enter-active,</span><br><span class=\"line\">.list-leave-active &#123;</span><br><span class=\"line\">  transition: all 0.5s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.list-enter-from,</span><br><span class=\"line\">.list-leave-to &#123;</span><br><span class=\"line\">  opacity: 0;</span><br><span class=\"line\">  transform: translateX(30px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Lodash—javascript原生库\"><a href=\"#Lodash—javascript原生库\" class=\"headerlink\" title=\"Lodash—javascript原生库\"></a>Lodash—javascript原生库</h1><h1 id=\"Gsap-—-动画库\"><a href=\"#Gsap-—-动画库\" class=\"headerlink\" title=\"Gsap — 动画库\"></a>Gsap — 动画库</h1><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"==============\"></a>==============</h1><h1 id=\"bind-apply-call\"><a href=\"#bind-apply-call\" class=\"headerlink\" title=\"bind apply  call\"></a>bind apply  call</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p1 = &#123;</span><br><span class=\"line\">  name: &#x27;jake&#x27;,</span><br><span class=\"line\">  phone: 60,</span><br><span class=\"line\">  addP (num1, num2) &#123;</span><br><span class=\"line\">    this.phone += (num1 + num2)</span><br><span class=\"line\">    console.log(this.name + &#x27;---&gt;&#x27; + this.phone);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const p2 = &#123;</span><br><span class=\"line\">  name: &#x27;stevn&#x27;,</span><br><span class=\"line\">  phone: 50,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// console.log(p1.phone);60</span><br><span class=\"line\">// p1.addP(30)</span><br><span class=\"line\">// console.log(p1.phone);90</span><br><span class=\"line\">// p1.addP.call(p2, 30, 10) call直接传入</span><br><span class=\"line\">// p1.addP.apply(p2, [30, 10]) //apply 接收数组</span><br><span class=\"line\">const stevnAddp = p1.addP.bind(p2) //bind返回一个方法 需要手动调用</span><br><span class=\"line\">stevnAddp(30, 10)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"es6-–-gt-from-fill\"><a href=\"#es6-–-gt-from-fill\" class=\"headerlink\" title=\"es6 –&gt; from fill\"></a>es6 –&gt; from fill</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</span><br><span class=\"line\">const array1 = [1, 2, 3, 4];</span><br><span class=\"line\"> </span><br><span class=\"line\">// fill with 0 from position 2 until position 4</span><br><span class=\"line\">console.log(array1.fill(0, 2, 4));</span><br><span class=\"line\">// expected output: [1, 2, 0, 0]</span><br><span class=\"line\"> </span><br><span class=\"line\">// fill with 5 from position 1</span><br><span class=\"line\">console.log(array1.fill(5, 1));</span><br><span class=\"line\">// expected output: [1, 5, 5, 5]</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(array1.fill(6));</span><br><span class=\"line\">// expected output: [6, 6, 6, 6]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.from() 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</span><br><span class=\"line\">console.log(Array.from(&#x27;foo&#x27;));</span><br><span class=\"line\">// expected output: Array [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(Array.from([1, 2, 3], x =&gt; x + x));</span><br><span class=\"line\">// expected output: Array [2, 4, 6]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"es6-–-gt-map\"><a href=\"#es6-–-gt-map\" class=\"headerlink\" title=\"es6 –&gt; map\"></a>es6 –&gt; map</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map()方法定义在JavaScript的Array中，它返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。</span><br><span class=\"line\">map()不会对空数组进行检测</span><br><span class=\"line\">map()不会改变原始数组</span><br><span class=\"line\"></span><br><span class=\"line\">array.map(function(currentValue, index, arr), thisIndex)</span><br><span class=\"line\">currentValue：必须。当前元素的的值。</span><br><span class=\"line\">index：可选。当前元素的索引。</span><br><span class=\"line\">arr：可选。当前元素属于的数组对象。</span><br><span class=\"line\">thisValue：可选。对象作为该执行回调时使用，传递给函数，用作&quot;this&quot;的值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let array = [1, 2, 3, 4, 5];</span><br><span class=\"line\"></span><br><span class=\"line\">let newArray = array.map((item) =&gt; &#123;</span><br><span class=\"line\">    return item * item;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(newArray)  // [1, 4, 9, 16, 25]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"=============\"></a>=============</h1><h1 id=\"provide-inject\"><a href=\"#provide-inject\" class=\"headerlink\" title=\"provide inject\"></a>provide inject</h1><h1 id=\"mitt\"><a href=\"#mitt\" class=\"headerlink\" title=\"mitt\"></a>mitt</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import i mitt -S</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>两种使用方法 1 main.ts 全局配置  2 单独抽成文件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mitt from &#x27;mitt&#x27;</span><br><span class=\"line\">const mit = mitt()</span><br><span class=\"line\">// TypeScript注册</span><br><span class=\"line\">// 由于必须要拓展ComponentCustomProperties类型才能获得类型提示</span><br><span class=\"line\">declare module &#x27;vue&#x27; &#123;</span><br><span class=\"line\">  export interface ComponentCustomProperties &#123;</span><br><span class=\"line\">      $Bus: typeof mit</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const app = createApp(App)</span><br><span class=\"line\">app.config.globalProperties.$Bus = mit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用</span><br><span class=\"line\">由于v3没有 this 所有 import &#123; getCurrentInstance &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const instance = getCurrentInstance()</span><br><span class=\"line\">instance?.proxy?.$Bus.emit(&#x27;&#x27;, )</span><br><span class=\"line\">instance?.proxy?.$Bus.on(&#x27;&#x27;, ()=&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h1><blockquote>\n<p>vue3 传给组建的v-model 需要子组件 defineProps接收 defineEmits修改</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父亲 ： &lt;vmodel v-model=&quot;show&quot; v-model:name=&quot;name&quot;&gt;&lt;/vmodel&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">子</span><br><span class=\"line\">// 接收传来的值 :绑定的用 :后的名字接收 直接绑定的用 modelValue接收</span><br><span class=\"line\">defineProps&lt;&#123;</span><br><span class=\"line\">  modelValue: boolean,</span><br><span class=\"line\">  name:string</span><br><span class=\"line\">&#125;&gt;()</span><br><span class=\"line\">// 修改传来的值 update:名字 修改的固定写法</span><br><span class=\"line\">const emit = defineEmits([&#x27;update:modelValue&#x27;, &#x27;update:name&#x27;])</span><br><span class=\"line\">const change = () =&gt; &#123;</span><br><span class=\"line\">  emit(&#x27;update:modelValue&#x27;, false)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// inputing</span><br><span class=\"line\">const inputing = (e:Event) =&gt; &#123;</span><br><span class=\"line\">  const val = e.target as HTMLInputElement</span><br><span class=\"line\">  emit(&#x27;update:name&#x27;, val.value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">名字应为 v开头</span><br><span class=\"line\">const vMove：Directive = &#123;</span><br><span class=\"line\">  created () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; created&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeMount () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; beforeMount&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted (e:HTMLElement, binding:object, vnode:object) &#123;// e 当前dom元素 binding各种值  vnode虚拟dom </span><br><span class=\"line\">    e.focus()</span><br><span class=\"line\">    console.log(e, binding, vnode)</span><br><span class=\"line\">    console.log(&#x27;===&gt; mounted&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeUpdate () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; beforeUpdate&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  updated () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; updated&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeUnmount () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; updated&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  unmounted () &#123;</span><br><span class=\"line\">    console.log(&#x27;===&gt; unmounted&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const app = creatApp(app)</span><br><span class=\"line\">得到app后</span><br><span class=\"line\">app.config.globalProperties.$[名字] = ...[&#123;&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">app.config.globalProperties.$dev = &#x27;dev&#x27;</span><br><span class=\"line\">app.config.globalProperties.$filter = &#123;</span><br><span class=\"line\">  format&lt;T&gt; (str:T):string &#123;</span><br><span class=\"line\">    return &#x27;jake&#x27; + str</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// TypeScript注册</span><br><span class=\"line\">// 由于必须要拓展ComponentCustomProperties类型才能获得类型提示</span><br><span class=\"line\">type filter = &#123;</span><br><span class=\"line\">  format&lt;T&gt; (str:T):string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">declare module &#x27;vue&#x27; &#123;</span><br><span class=\"line\">  export interface ComponentCustomProperties &#123;</span><br><span class=\"line\">      $dev:string,</span><br><span class=\"line\">      $filter: filter</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 在js中使用</span><br><span class=\"line\">import &#123; ref, getCurrentInstance &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const instance = getCurrentInstance()</span><br><span class=\"line\">const data = instance?.proxy?.$dev</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"样式穿透\"><a href=\"#样式穿透\" class=\"headerlink\" title=\"样式穿透\"></a>样式穿透</h1><p>/deep/ .input {color = black}  —–&gt;  :deep(.input) { color = black }</p>\n<h1 id=\"Css新特性\"><a href=\"#Css新特性\" class=\"headerlink\" title=\"Css新特性\"></a>Css新特性</h1><ol>\n<li><p>插槽中 修改父传来的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:slotted(属性名) &#123;</span><br><span class=\"line\">    css....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>全局样式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:global(标签) &#123;</span><br><span class=\"line\">    css.....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>3.v-bind绑定css</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const color = ref(&#x27;red&#x27;)</span><br><span class=\"line\">style&#123;</span><br><span class=\"line\">    .input&#123;</span><br><span class=\"line\">        backgroundColor: v-bind(color)// 如果是对象格式 改为 v-bind( &#x27;~~~&#x27; )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.css  module</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p :class=&quot;$style.类名&quot;&gt;1111&lt;/p&gt;</span><br><span class=\"line\">// 多个写成</span><br><span class=\"line\">&lt;p :class=&quot;[$style.a, $style.b]&quot;&gt;1111&lt;/p&gt;</span><br><span class=\"line\">style</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    .a &#123;</span><br><span class=\"line\">    color:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .b &#123;</span><br><span class=\"line\">    fontsize:...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style module=&quot;zs&quot;&gt;</span><br><span class=\"line\">module中的值可以把$style 替换 </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Event-Loop\"><a href=\"#Event-Loop\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h1><p>同步任务<br>代码从上到下按顺序执行</p>\n<p>异步任务<br>1.宏任务<br>script(整体代码)、setTimeout、setInterval、UI交互事件、postMessage、Ajax</p>\n<p>2.微任务<br>Promise.then catch finally、MutaionObserver、process.nextTick(Node.js 环境)</p>\n<p>运行机制</p>\n<p>所有的同步任务都是在主进程执行的形成一个执行栈，主线程之外，还存在一个”任务队列”，异步任务执行队列中先执行宏任务，然后清空当次宏任务中的所有微任务，然后进行下一个tick如此形成循环。</p>\n<p>nextTick 就是创建一个异步任务，那么它自然要等到同步任务执行完成后才执行。</p>\n<h1 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"nextTick\"></a>nextTick</h1><h1 id=\"Proxy代理解决跨域\"><a href=\"#Proxy代理解决跨域\" class=\"headerlink\" title=\"Proxy代理解决跨域\"></a>Proxy代理解决跨域</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vite.config.js ===</span><br><span class=\"line\"></span><br><span class=\"line\">server: &#123;</span><br><span class=\"line\">      proxy: &#123;</span><br><span class=\"line\">        &#x27;/api&#x27;: &#123;   ’/api‘名字自起 一般是 /api</span><br><span class=\"line\">          target: &#x27;http://localhost:9999&#x27;, //要代理的地址</span><br><span class=\"line\">          rewrite: (path) =&gt; path.replace(/^\\/api/, &#x27;&#x27;)  // 截掉api</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  与 plugins同级</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"=======================\"></a>=======================</h1><h1 id=\"pinia\"><a href=\"#pinia\" class=\"headerlink\" title=\"pinia\"></a>pinia</h1><h1 id=\"1-引入注册\"><a href=\"#1-引入注册\" class=\"headerlink\" title=\"1.引入注册\"></a>1.引入注册</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App.vue&#x27;</span><br><span class=\"line\">import &#123;createPinia&#125; from &#x27;pinia&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">const store = createPinia()</span><br><span class=\"line\">let app = createApp(App)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">app.use(store)</span><br><span class=\"line\"> </span><br><span class=\"line\">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-初始化\"><a href=\"#2-初始化\" class=\"headerlink\" title=\"2.初始化\"></a>2.初始化</h1><blockquote>\n<p><strong>1.新建一个文件夹Store</strong></p>\n<p><strong>2.新建文件[name].ts</strong></p>\n<p><strong>3.定义仓库Store</strong></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; defineStore &#125; from &#x27;pinia&#x27;</span><br><span class=\"line\">import &#123; Names &#125; from &#x27;./store-namespce&#x27; //名字</span><br><span class=\"line\"> </span><br><span class=\"line\">export const useTestStore = defineStore(Names.Test, &#123;</span><br><span class=\"line\">     state:()=&gt;&#123;</span><br><span class=\"line\">         return &#123;</span><br><span class=\"line\">             current:1</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     //类似于computed 可以帮我们去修饰我们的值</span><br><span class=\"line\">     getters:&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     //可以操作异步 和 同步提交state</span><br><span class=\"line\">     actions:&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-state\"><a href=\"#3-state\" class=\"headerlink\" title=\"3.state\"></a>3.state</h1><h2 id=\"1-在需要使用的文件夹导入\"><a href=\"#1-在需要使用的文件夹导入\" class=\"headerlink\" title=\"1.在需要使用的文件夹导入\"></a>1.在需要使用的文件夹导入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;useTestStore&#125; from &#x27;....&#x27;</span><br><span class=\"line\">const store = userTestStore()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"修改值的五种方法\"><a href=\"#修改值的五种方法\" class=\"headerlink\" title=\"修改值的五种方法\"></a>修改值的五种方法</h2><h3 id=\"1-直接store-current\"><a href=\"#1-直接store-current\" class=\"headerlink\" title=\"1. 直接store.current++\"></a>1. 直接store.current++</h3><h2 id=\"2-批量修改state\"><a href=\"#2-批量修改state\" class=\"headerlink\" title=\"2.批量修改state\"></a>2.批量修改state</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对象</span><br><span class=\"line\">store.$path(&#123;</span><br><span class=\"line\">    current:1</span><br><span class=\"line\">    name: &#x27;jake&#x27;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-批量修改函数格式\"><a href=\"#3-批量修改函数格式\" class=\"headerlink\" title=\"3.批量修改函数格式\"></a>3.批量修改函数格式</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以进行一些判断  接收一个state参数 </span><br><span class=\"line\">store.$paht((state)=&gt;&#123;</span><br><span class=\"line\">    if(....)&#123;</span><br><span class=\"line\">        state.current++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><h2 id=\"5-通过Actions修改\"><a href=\"#5-通过Actions修改\" class=\"headerlink\" title=\"5.通过Actions修改\"></a>5.通过Actions修改</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions:&#123;</span><br><span class=\"line\">       setCurrent () &#123;</span><br><span class=\"line\">           this.current++</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-解构store\"><a href=\"#6-解构store\" class=\"headerlink\" title=\"6.解构store\"></a>6.解构store</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">const Test = useTestStore()</span><br><span class=\"line\"> </span><br><span class=\"line\">const &#123; current, name &#125; = storeToRefs(Test)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-Actions\"><a href=\"#4-Actions\" class=\"headerlink\" title=\"4.Actions\"></a>4.Actions</h1><h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">        increment() &#123;</span><br><span class=\"line\">            this.counter++</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        randomizeCounter() &#123;</span><br><span class=\"line\">            this.counter = Math.round(100 * Math.random())</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class=\"line\">import &#123;useTestStore&#125; from &#x27;./store&#x27;</span><br><span class=\"line\">const Test = useTestStore()</span><br><span class=\"line\">const Add = () =&gt; &#123;</span><br><span class=\"line\">     Test.randomizeCounter()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结合-async-await\"><a href=\"#结合-async-await\" class=\"headerlink\" title=\"结合 async  await\"></a>结合 async  await</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">        async getLoginInfo() &#123;</span><br><span class=\"line\">            const result = await Login()</span><br><span class=\"line\">            this.user = result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多个actions-互相调用\"><a href=\"#多个actions-互相调用\" class=\"headerlink\" title=\"多个actions 互相调用\"></a>多个actions 互相调用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">       async getLoginInfo() &#123;</span><br><span class=\"line\">           const result = await Login()</span><br><span class=\"line\">           this.user = result;</span><br><span class=\"line\">           this.setName(result.name)</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       setName (name:string) &#123;</span><br><span class=\"line\">           this.name = name;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-getter\"><a href=\"#5-getter\" class=\"headerlink\" title=\"5.getter\"></a>5.getter</h1><blockquote>\n<p> 使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTclQUUlQUQlRTUlQTQlQjQlRTUlODclQkQlRTYlOTUlQjAmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">箭头函数</span>不能使用this this指向已经改变指向undefined 修改值请用state</p>\n<p> 主要作用类似于computed 数据修饰并且有缓存</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters:&#123;</span><br><span class=\"line\">      newCurrent ():number &#123;</span><br><span class=\"line\">          return ++this.current</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>相互调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters:&#123;</span><br><span class=\"line\">   newCurrent ():number | string &#123;</span><br><span class=\"line\">       return ++this.current + this.newName</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   newName ():string &#123;</span><br><span class=\"line\">       return `$-$&#123;this.name&#125;`</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-reset\"><a href=\"#6-reset\" class=\"headerlink\" title=\"6.$reset()\"></a>6.$reset()</h1><p>通过实例调用 $reset() 可以将 state重置为初始内容</p>\n<h1 id=\"7-subscribe\"><a href=\"#7-subscribe\" class=\"headerlink\" title=\"7.$subscribe()\"></a>7.$subscribe()</h1><blockquote>\n<p>在每个 state变化时 都会自动调用这个api</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过实例调用 $subscribe()</span><br><span class=\"line\">store.$subscribe( (args,state)=&gt;&#123;</span><br><span class=\"line\">    // args 包括新值 旧值 实例名 等</span><br><span class=\"line\">    // state 为state    </span><br><span class=\"line\">&#125; , &#123; detached:true &#125;)//设置为true 当组件销毁 一九可以监听</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-onAction\"><a href=\"#8-onAction\" class=\"headerlink\" title=\"8.$onAction()\"></a>8.$onAction()</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.$onAction( (args)=&gt;&#123;</span><br><span class=\"line\">    当触发事件时调用</span><br><span class=\"line\">&#125;, true )</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"=================\"></a>=================</h1><h1 id=\"vue3组件通信\"><a href=\"#vue3组件通信\" class=\"headerlink\" title=\"vue3组件通信\"></a>vue3组件通信</h1><h2 id=\"1-props\"><a href=\"#1-props\" class=\"headerlink\" title=\"1. props\"></a>1. props</h2><h2 id=\"2-自定义事件-emit\"><a href=\"#2-自定义事件-emit\" class=\"headerlink\" title=\"2.自定义事件 emit\"></a>2.自定义事件 emit</h2><h2 id=\"3-mitt兄弟传值\"><a href=\"#3-mitt兄弟传值\" class=\"headerlink\" title=\"3.mitt兄弟传值\"></a>3.mitt兄弟传值</h2><p>1.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save mitt</span><br></pre></td></tr></table></figure>\n\n<p>2.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在main.js中挂载到全局</span><br><span class=\"line\"></span><br><span class=\"line\">////</span><br><span class=\"line\">// 标准的ES模块化引入方式</span><br><span class=\"line\">import mitt from &#x27;mitt&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const app = createApp(App)</span><br><span class=\"line\"></span><br><span class=\"line\">// vue3.x的全局实例，要挂载在config.globalProperties上</span><br><span class=\"line\">app.config.globalProperties.$EventBus = new mitt()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2/1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">或者封装一个模块</span><br><span class=\"line\"></span><br><span class=\"line\">import mitt from &#x27;mitt&#x27;</span><br><span class=\"line\">export default new mitt()</span><br></pre></td></tr></table></figure>\n\n<p>3.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//发送</span><br><span class=\"line\">$bus.emit(&#x27;toBro&#x27;, car.value)</span><br><span class=\"line\"></span><br><span class=\"line\">// 接收</span><br><span class=\"line\">$bus.on(&#x27;toBro&#x27;, (val) =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27;getting&#x27; + val);</span><br><span class=\"line\">    theCar.value = val</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-v-model\"><a href=\"#4-v-model\" class=\"headerlink\" title=\"4.v-model\"></a>4.v-model</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父</span><br><span class=\"line\"> &lt;Son v-model:pageNum=&quot;num&quot;&gt;&lt;/Son&gt;</span><br><span class=\"line\">// 子</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;out&quot;&gt;</span><br><span class=\"line\">      &lt;h2&gt;接收到的值-&#123;&#123; pageNum &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">      &lt;button @click=&quot; emit(&#x27;update:pageNum&#x27;, prop.pageNum + 10)&quot;&gt;点击+10&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup &#123;emit&#125;&gt;</span><br><span class=\"line\">const prop = defineProps(&#123;</span><br><span class=\"line\">  pageNum: &#123;</span><br><span class=\"line\">    default: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const emit = defineEmits(&#123; &#x27;update:pageNum&#x27;: null &#125;) //对象格式 避免验证 不报警告</span><br><span class=\"line\">const addN = () =&gt; &#123;</span><br><span class=\"line\">  emit(&#x27;update:pageNum&#x27;, prop.pageNum + 10)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-useAttrs\"><a href=\"#5-useAttrs\" class=\"headerlink\" title=\"5.useAttrs\"></a>5.useAttrs</h2><p>可以获取到标签身上的属性和方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 父</span><br><span class=\"line\"> &lt;Son3 title=&quot;aaa&quot; @click=&quot;fun1&quot;&gt;&lt;/Son3&gt;</span><br><span class=\"line\"> // 子</span><br><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1 :title=&quot;$attr.title + &#x27;bbb&#x27;&quot; @click=&quot;aa&quot;&gt;son3&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import &#123; useAttrs &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">const $attr = useAttrs()</span><br><span class=\"line\">console.log($attr);</span><br><span class=\"line\">const aa = () =&gt; &#123;</span><br><span class=\"line\">  console.log(&quot;---&gt;&quot;);</span><br><span class=\"line\">  $attr.onClick</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-ref-与-parent\"><a href=\"#6-ref-与-parent\" class=\"headerlink\" title=\"6.ref 与 $parent\"></a>6.ref 与 $parent</h2><blockquote>\n<p>通过ref获取子组件属性方法</p>\n<p>通过$parent获取父组件属性和方法</p>\n</blockquote>\n<p>父</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;父值：&#123;&#123; faNum &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;获取到的子值：&#123;&#123; sonNum &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;getSon&quot;&gt;点击获取&lt;/button&gt;</span><br><span class=\"line\">    &lt;son ref=&quot;son1&quot;&gt;&lt;/son&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import son from &#x27;./Son4son.vue&#x27;</span><br><span class=\"line\">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const sonNum = ref()</span><br><span class=\"line\">const faNum = ref(100)</span><br><span class=\"line\">const son1 = ref()</span><br><span class=\"line\">const getSon = () =&gt; &#123;</span><br><span class=\"line\">  sonNum.value = son1.value.sonNum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">defineExpose(&#123; faNum &#125;)//允许外界访问</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;子值：&#123;&#123; sonNum &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;获取到的父值：&#123;&#123; faNum &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;getFa($parent)&quot;&gt;点击获取&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const sonNum = ref(200)</span><br><span class=\"line\">const faNum = ref()</span><br><span class=\"line\">const getFa = ($parent) =&gt; &#123;</span><br><span class=\"line\">  faNum.value = $parent.faNum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">defineExpose(&#123; sonNum &#125;)//允许外界访问</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-provide-inject\"><a href=\"#7-provide-inject\" class=\"headerlink\" title=\"7.provide inject\"></a>7.provide inject</h2>",
            "tags": [
                "vue3"
            ]
        }
    ]
}